# shellcheck shell=sh disable=SC2039,SC2142,SC3043

# Section: test prepare
option_help(){
    param:dsl      <<A
type:
    access  =   private public
    repo_t  =~  "cde"   "def"
advise:
    repo  list_repo all
    #1    list_repo
option:
    --mul_line_arg|-m       "Test multiple line argument"            <mline_arg>:mline_arg_type
    --regex_arg1            "Test an argument with regex 1"          <>=0     =~  [0-9]*
    --regex_arg2            "Test an argument with regex 2"          <>=20    =~  ([1-9]?[0-9]|100)
    --repo|-r               "Provide repo name"                      <>:repo_type   =~  "abc"   "cde"   "def"
    --repo2|-b|m            "Provide two repo name"
        <arg1>:repo_type=""               =   "abc"   "cde"   "def"
        <arg2>:repo_t=
    --priviledge|-p         "Provide privilidge"                     <priviledge_type>:access=private
    --no_type_arg|-n        "Test no type argument but have default" <no_type_arg>=default
    --flag1|-f              "Flag1 that you can use \\\$\{flag1:-false} to get the bool value"
    --flag1222|-g           "Flag1222 that you can use \\\$\{flag1222:-false} to get the bool value"
    #1                      "Test rest argument #1 when exist option and flag"
    #222222                 "Provide number #2"
    #3                      "Provide number #3"
A
    param:run
}
# EndSection

test_option_help(){
    @assert stdout option_help --help <<A

FLAGS:
    --flag1,-f      Flag1 that you can use \\$\\{flag1:-false} to get the bool value
    --flag1222,-g   Flag1222 that you can use \\$\\{flag1222:-false} to get the bool value

OPTIONS:
    --mul_line_arg,-m <mline_arg>       Test multiple line argument
    --regex_arg1 <>                     Test an argument with regex 1 [default: 0] [regex: "[0-9]*"]
    --regex_arg2 <>                     Test an argument with regex 2 [default: 20] [regex: "([1-9]?[0-9]|100)"]
    --repo,-r <>                        Provide repo name [regex: "abc"|"cde"|"def"]
    --repo2,-b <arg1> <arg2>            Provide two repo name [candidate: "abc", "cde", "def"] [regex:${space}
                                        "cde"|"def"] [multiple]
    --priviledge,-p <priviledge_type>   Provide privilidge [default: private] [candidate: "private", "public"]
    --no_type_arg,-n <no_type_arg>      Test no type argument but have default [default: default]

ARGS:
    #1        Test rest argument #1 when exist option and flag
    #222222   Provide number #2
    #3        Provide number #3

A
}

@assert:file:func