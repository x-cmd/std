# shellcheck shell=sh disable=SC2016

param_advise(){
    param:dsl   '
subcommand:
    option|op-test  "Test option"
option:
    --candi_null    "Test null option to use candidate"  <candi_null>:candis="abc"        =  abc  cde     def
'
    param:run
}

param_advise_option(){
    param:dsl   '
type:
    access  =   private public
advise:
    repo  list_repo all
    #1    list_repo
    #n    candidate_exec_arr=( \$(ls) )
option:
    --repo|-r               "Provide repo name"                      <>:repo_type   =~  "abc"   "cde"   "def"
    --repo2|-b|m            "Provide two repo name"
        <arg1>:repo_type=""               =   "abc"   "cde"   "def"
        <arg2>:repo_t=
    --priviledge|-p         "Provide privilidge"                     <priviledge_type>:access=private
    --flag1|-f              "Flag1 that you can use \$\{flag1:-false} to get the bool value"
    #1                      "Test rest argument #1 when exist option and flag"
    #222222                 "Provide number #2"
    #3                      "Test rest argument #3 request"  <rarg>:atlist_type  =   "private"      "public"    "inner-public"
    #4                      "Test an argument with regex 4"              <>=20    =~  ([1-9][0-9]?|100)
    #5                      "Test an argument with regex 5"              <>      = "qwe" "asd" "zxc"
    #n                      "Test rest argument #n request"              <>      = "qwe" "asd" "zxc"
'
    param:run
}

test_param_advise(){
    local INDENT=4
    @assert stdout "X_CMD_ADVISE_FUNC_NAME=param_advise; param_advise _x_cmd_advise_json | x jo fmt" <<A
{
    "#desc": "",
    "--candi_null": {
        "#desc": "Test null option to use candidate",
        "#1": {
            "#desc": "",
            "#cand": [
                "abc",
                "cde",
                "def"
            ]
        }
    },
    "option|op-test": {
        "#desc": "Test option",
        "--repo|-r": {
            "#desc": "Provide repo name",
            "#1": {
                "#desc": "",
                "#regex": [
                    "abc",
                    "cde",
                    "def"
                ]
            }
        },
        "--repo2|-b|m": {
            "#desc": "Provide two repo name",
            "#1": {
                "#desc": "",
                "#cand": [
                    "abc",
                    "cde",
                    "def"
                ]
            },
            "#2": {
                "#desc": ""
            }
        },
        "--priviledge|-p": {
            "#desc": "Provide privilidge",
            "#1": {
                "#desc": "",
                "#cand": [
                    "private",
                    "public"
                ]
            }
        },
        "--flag1|-f": {
            "#desc": "Flag1 that you can use \$\{flag1:-false} to get the bool value"
        },
        "#1": {
            "#desc": "Test rest argument #1 when exist option and flag",
            "#exec": "list_repo"
        },
        "#222222": {
            "#desc": "Provide number #2"
        },
        "#3": {
            "#desc": "Test rest argument #3 request",
            "#cand": [
                "private",
                "public",
                "inner-public"
            ]
        },
        "#4": {
            "#desc": "Test an argument with regex 4",
            "#regex": [
                "([1-9][0-9]?|100)"
            ]
        },
        "#5": {
            "#desc": "Test an argument with regex 5",
            "#cand": [
                "qwe",
                "asd",
                "zxc"
            ]
        },
        "#n": {
            "#desc": "Test rest argument #n request",
            "#exec": "candidate_exec_arr=( \$(ls) )",
            "#cand": [
                "qwe",
                "asd",
                "zxc"
            ]
        }
    }
}
A
}
@assert:file:func