# shellcheck shell=sh
# shellcheck disable=SC2039

# author:       Li Junhao           l@x-cmd.com    edwinjhlee.github.io
# maintainer:   Li Junhao

# shellcheck disable=SC2142
alias param='{ eval "$(_param_main "$@")"; }'

# TODO: handle newline in ARGSTR
_param_main(){
    local IFS
    IFS="$(printf "\005")"

    local sw=""
    while read -r line; do
        if [ -n "$sw" ]; then
            echo "$line"
            continue
        fi

        printf "%s" "$*"
        printf "\n\001\001\001\n"
        sw=1
        if line="$(echo "$line" | awk '{ if ($1 == "default") { printf("%s", $2); exit 0; } else { exit 1; } }' - )"; then    
            eval printf "%s" \"\$PARAM_DEFAULT_${line}\"
            printf "\n\001\001\001\n"
        fi
    # done | awk -v ARG_SEP="$IFS" -f param.awk -
    done | awk -v ARG_SEP="$IFS" -f "$(xrc_which param/v0.awk)" -
}


param_default(){
    case $# in
        0|1) printf "%s" "TODO: help doc here"      ;;
        2) param_default_get "$1" "$2"      ;;
        3) param_default_set "$1" "$2" "$3" ;;
        *) printf "%s" "TODO: help doc here"        ;;
    esac
}

# Because awk split bug in unprintable seperators. We have to encode the string by transposing the newline character
PARAM_DEFAULT_VAR_PREFIX=___X_CMD_X_BASH_PARAM_DEFAULT

param_default_clear(){
    local O="${1:?Provide default scope}"
    eval "${PARAM_DEFAULT_VAR_PREFIX}_$O=\"\""
}

PARAM_NEWLINE_TR="$(printf "\001")"

param_default_set(){
    local O="${1:?Provide default scope}"

    local s
    s="$(awk \
        -v key="$(printf "%s" "${2:?Provide key}" | tr "\n" "${PARAM_NEWLINE_TR}")" \
        -v val="$(printf "%s" "${3:?Provide value}" | tr "\n" "${PARAM_NEWLINE_TR}")" '

BEGIN {
    RS="\n"
    is_keyline = 0
    sw = 1
}

{
    if (is_keyline == 0) {
        keyline=$0
    } else {
        if (keyline == key) {
            print key
            print val
            sw = 0
        } else {
            print keyline
            print $0
        }
        
    }
    is_keyline = 1 - is_keyline
}

END {
    if (sw == 1) {
        print key
        print val
    }
}

' <<A
$(eval printf "%s" \"\$${PARAM_DEFAULT_VAR_PREFIX}_${O}\")
A
)"
    eval "PARAM_DEFAULT_$O=\"\$s\""
}


param_default_get(){
    awk -v key="$(printf "%s" "${2:?Provide key}" | tr "\n" "${PARAM_NEWLINE_TR}")" \
        -v NEWLINE="${PARAM_NEWLINE_TR}" '

NR%2==1{
    if ($0 == key) {
        getline
        gsub(NEWLINE, "\n", $0)
        print $0
        exit 0
    }
}
END { exit 1; }
' <<A
$(eval printf "%s" \"\$${PARAM_DEFAULT_VAR_PREFIX}_${1:?Provide default scope}\")
A
}

param_default_list(){
    eval printf "%s" \"\$${PARAM_DEFAULT_VAR_PREFIX}_${1:?Provide default scope}\" | \
        awk -v NEWLINE="${PARAM_NEWLINE_TR}" '
    NR%2==1{
        keyline=$0
    }
    NR%2==0{
        gsub("\001", "\n", $0)
        gsub(NEWLINE, "\n", keyline)
        gsub(NEWLINE, "\n", $0)
        print keyline "=" $0
    }'
}


alias param_example='local PARAM_EXAMPLE 2>/dev/null; _param_example PARAM_EXAMPLE'

param_example_show(){
    # shellcheck disable=SC2154
    echo "$PARAM_EXAMPLE"
}

_param_example(){
    local name=$1 
    local s
    shift
    # shellcheck disable=SC2034
    s="$(_param_example_cat "$@")"
    eval "$name=\"\$s\""
}

_param_example_cat(){
    local i
    echo "----------------"
    printf "Example:\n"
    for (( i=1; i<${#@}; i++ )); do
        printf "  $(tput setaf 6)%s:$(tput init)\n" "* ${!i}"
        (( i++ ))
        printf "    > $(tput setaf 2)%s$(tput init)\n" "${!i}"
    done
}


########

param_default_set GITEE_OBJECT_NAME repo xk1

# PARAM_ARGS=$li
# $@

# gitee.repo.create -a public a1 a2 a3



w(){
    param <<A
    default     GITEE_${O:?Provide object name}
    --repo      "Provide repo name"             =~      [A-Za-z0-9\n]+
    --user=el   -u  "Provide user name"         =~      [A-Za-z0-9]+
    --access    -a  "Access Priviledge"         =       public private
    --verbose   -v  "Display in verbose mode"   =FLAG
    #1          =~      [A-Za-z0-9\n]+
    ...         =~      [A-Za-z0-9\n]+
A

    echo "----"

    echo "repo: $repo"
    echo "user: $user"
    echo "access: $access"
    echo "verbose: $verbose"

    echo "Other arguments:    $*"
    echo "$HELP_DOC"
}

# w --repo hi

ff(){
    O=OBJECT_NAME w -a private --repo "asfasfd
asdfaf" work a b
}

ff

