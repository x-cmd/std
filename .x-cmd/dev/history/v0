# shellcheck shell=bash

# author:       Li Junhao           l@x-cmd.com    edwinjhlee.github.io
# maintainer:   Li Junhao

# @src std/list
# @src std/utils

# One bash only have one queue?

# : <<'DOCTEST'
# > job_put 3 sleep 3s
# > job_put 3 sleep 3s
# > job_put 3 sleep 3s
# > job_get_active_size
# 2
# DOCTEST

: <<'DOCTEST'
> job_put 3 sleep 3s; job_put 3 sleep 3s; job_put 3 sleep 3s; job_get_active_size
3
> job_put 2 sleep 3s; job_put 2 sleep 3s; job_put 2 sleep 3s; [ "$(job_get_active_size)" -le 2 ] && echo yes
yes
DOCTEST

# TODO: rename
job_get_active_size(){
    jobs -r | wc -l | tr -d ' '
}

job_offer(){
    local MAX=${1:?Provide the max number of jobs could hold}
    shift
    local cur
    cur=$(job_get_active_size)
    if [ "$cur" -lt "${MAX:-3}" ]; then
        ( eval "$@" ) 1>&1 2>&2 &   # 1>&1 2>&2 works
        return 0
    fi
    return 1
}

# Will block
job_put(){
    until job_offer "$@"; do
        sleep "${interval:-3s}"
    done
}

job_wait_until_finished(){
    local s
    while :; do
        s=$(job_get_active_size)
        [ "$s" -eq 0 ] && return
        sleep 1s
    done
}

job_test_ping(){
    local outfile=${1:?Provide output file path}
    for ip in ${2:?Provide ip range like 192.168.6}.{1..255}; do 
        echo "$ip"
        job_put 100 "ping -c 2 $ip 1>/dev/null 2>&1 && echo $ip >>$outfile"; 
    done
    job_wait_until_finished
}

# @src std/list
job_pool_create(){
    eval "export ${1:?Provide queue name}=()"
    eval "export $1_max=${2:-6}"
    export O=$1
}

job_pool_set_max(){
    eval "export ${O:?Provide queue size}_max=3"
}

job_pool_get_max(){
    eval "echo \$${O:?Provide queue size}_max"
}

job_pool_get_active_size(){
    jobs -r | wc -l | tr -d ' '
}

job_pool_offer(){
    local cur max
    cur=$(jobpool.get_active_size)
    max=$(jobpool.get_max)
    if [ "$cur" -le "$max" ]; then
        (eval "$@") 1>&1 2>&2 &
        return 0
    fi
    return 1
}

# Will block
job_pool_put(){
    until jobpool.offer "$@"; do
        sleep 3s;
    done
}

job_pool_clear(){
    eval "export $1=()"
}

job_pool_wait_until_finished(){
    local s
    while :; do
        s=$(job_pool_get_active_size)
        [ "$s" -eq 0 ] && return
        sleep 1s
    done
}

job_pool_test_ping(){
    local outfile=${1:?Provide output file path}
    jobpool.create queue4ping 100
    for ip in ${2:?Provide ip range like 192.168.6}.{1..255}; do
        echo "$ip"
        jobpool.put "ping -c 2 $ip && echo $ip >>$outfile";
    done
    jobpool.clear
}


