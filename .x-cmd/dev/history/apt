# shellcheck shell=sh disable=SC3043

proxy_apt(){
    param:dsl <<A
subcommand:
    url        "Provide url of mirror candidates"
    set        "Setting the mirror"
    unset      "Reset the source to the original official"
A
    param:run

    if ! command -v apt >/dev/null; then
        printf "apt NOT exists."
        return 1
    elif [ -n "$PARAM_SUBCMD" ]; then
        proxy_apt_"${PARAM_SUBCMD}" "$@"
    else
        proxy_apt _param_help_doc  >&2
    fi

}

proxy_apt_url(){
    param:dsl <<A
subcommand:
    ali                 "aliyun"
    tuna                "tuna"
A
    param:run

    case "$PARAM_SUBCMD" in
        # https://gems.ruby-china.com
        ali)                    printf http://mirrors.aliyun.com                   ;;
        tuna)                   printf https://mirrors.tuna.tsinghua.edu.cn        ;;
        # official)               printf http://snapshot.debian.org                ;;
        *)                      proxy_apt_url _param_help_doc >&2                  ;;
    esac
}

# Just replace the original text
proxy_apt_set() {
    param:dsl <<A
subcommand:
    ali                 "aliyun"
    tuna                "tuna"
A
    param:run

    local url
    
    if url="$(proxy_apt_url "${PARAM_SUBCMD:-ali}")"; then
        proxy_log info "Setting proxy_apt mirror:
    $url"
        proxy_apt_generate "$url"
    fi
}

# Company Intranet
_proxy_apt_url_custom(){
    param:dsl <<A
option:
    #1          "URL"      =~       https?://.+
A
    param:run

    printf "%s" "${1:?Impossible}"
}


proxy_apt_unset() {
    param:void
    proxy_apt_set   official
}

# proxy_apt_set() {

#     local s=${1:-ali}
#     s="$(echo "$s" | tr "[:upper:]" "[:lower:]")"
#     local CONTENT=""
#     case "$s" in
#         ali) CONTENT=$(proxy_apt_ubuntu_generate "https://mirrors.aliyun.com/")
#             ;;
#     esac

#     local SRC_FP 
#     local BAK_FP
#     SRC_FP=/etc/apt/sources.list
#     BAK_FP="$SRC_FP.$(date +%Y%M%d_%0H%m%S).bak"
#     echo "Backing up $SRC_FP to $BAK_FP"
#     cp $SRC_FP "$BAK_FP" && \
#     (
#         echo "$CONTENT"
#         echo ""
#         cat "$BAK_FP"
#     ) > $SRC_FP
# }

_proxy_apt_replace(){
    local CODE="${1:?System Code}"
    local URL="${2:?Provide url}"

    local apt_conf_filepath=/etc/apt/sources.list

    awk -e CODE="$CODE" -e URL="$URL"   <$apt_conf_filepath '
function append(can){
    repo[LEN] = repo[LEN] + 1
    repo[ repo[LEN] ] = can
}

BEGIN {
    append( CODE )
    append( CODE "-security" )
    append( CODE "-updates" )
    append( CODE "-proposed" )
    append( CODE "-backports" )
}

{
    if ( $1==deb||$1==deb-src ) {
        for (i=1; i<=repo[LEN]; ++i) {
            if ($3 != i) continue
            $2 = URL
        }
    }

    print $0
}'
    
}

proxy_apt_generate(){
    param:void
    local url="${1:?url}"
    local code="${2:-bionic}"
    cat <<A
deb ${url}/ubuntu/ ${code} main restricted universe multiverse
deb ${url}/ubuntu/ ${code}-security main restricted universe multiverse
deb ${url}/ubuntu/ ${code}-updates main restricted universe multiverse
deb ${url}/ubuntu/ ${code}-proposed main restricted universe multiverse
deb ${url}/ubuntu/ ${code}-backports main restricted universe multiverse
deb-src ${url}/ubuntu/ ${code} main restricted universe multiverse
deb-src ${url}/ubuntu/ ${code}-security main restricted universe multiverse
deb-src ${url}/ubuntu/ ${code}-updates main restricted universe multiverse
deb-src ${url}/ubuntu/ ${code}-proposed main restricted universe multiverse
deb-src ${url}/ubuntu/ ${code}-backports main restricted universe multiverse
A

}

_proxy_apt_get_codename(){
    printf "%s" "bionic"
}
