# shellcheck shell=sh disable=SC2039,SC2142,SC3043

___X_CMD_XRC_MODULE_IMPORTED=
xrc param/latest
xrc assert

# Section: define functions for param testcase1

param_type_unset    paramtest

# param_type    paramtest     mline_arg_type  "=~"  "[A-Za-z0-9_\\n]+"
param_type    paramtest     access          "="   "private"         "public"          "inner-public"
param_type    paramtest     url_type        "=~"  "https?://.+"
param_type    paramtest     atlist_type     "=~"  "[-0-9,]+"

paramtest(){
    param:plugin    "paramtest"
    param:scope     "paramtest/$O"
    param:dsl  <<A
subcommand:
    option|op-test  "Test option"
    subcmd          "Test subcommand"
    marg            "Test multiple argement"
    rarg            "Test rest argement"
    namelist        "Test name list"
    snl             "Test small name list"
    advise_null     "Test advise null"
    subcmd_null     "Test subcommand null"
options:
    --candi_null    "Test null option to use candidate"  <candi_null>:candis="abc"        =  abc  cde     def
A
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        echo "candi_null: $candi_null"
        echo "rest argument $1"
        return 0
    fi

    paramtest_"${PARAM_SUBCMD}" "$@"
}

# EndSection

# Section: Testcase for generate advise json.
local space="$(printf " ")"
test_advise_json(){
    X_CMD_ADVISE_FUNC_NAME=paramtest
    assert stdout paramtest _x_cmd_advise_json<<A
{
  "--candi_null": {
    "#1": [ "abc", "cde", "def" ],
    "#desc": "Test null option to use candidate"
  },
  "option|op-test": {
    "#desc": "Test option",
    "--mul_line_arg|-m": {
      "#1": [  ],
      "#desc": "Test multiple line argument"
    },
    "--regex_arg1": {
      "#1": [  ],
      "#desc": "Test an argument with regex 1"
    },
    "--regex_arg2": {
      "#1": [  ],
      "#desc": "Test an argument with regex 2"
    },
    "--repo|-r": {
      "#1": [  ],
      "#desc": "Provide repo name"
    },
    "--repo2|-b|m": {
      "#1": [ "abc", "cde", "def" ],
      "#2": [  ],
      "#desc": "Provide two repo name"
    },
    "--priviledge|-p": {
      "#1": [ "private", "public" ],
      "#desc": "Provide privilidge"
    },
    "--no_type_arg|-n": {
      "#1": [  ],
      "#desc": "Test no type argument but have default"
    },
    "--flag1|-f": "--- Flag1 that you can use $\{flag1:-false} to get the bool value",
    "--flag1222|-g": "--- Flag1222 that you can use $\{flag1222:-false} to get the bool value",
    "#1": "list_repo",
    "#222222": [  ],
    "#3": [  ]
  },
  "subcmd": {
    "#desc": "Test subcommand",
    "sscmd1|s1|s-s1|longlongsubcommand": {
      "#desc": "Test sub sub command1",
      "--ss1_opt1|-s": "--- Test sub sub command1 option1",
      "--ss1_opt2|-d": "--- Test sub sub command1 option2",
      "--ss1_opt3|-f": "--- Test sub sub command1 option3",
      "subcmd_null":${space}
    },
    "sscmd2": ,
    "subcmd_null":${space}
  },
  "marg": {
    "#desc": "Test multiple argement",
    "--card|-c|m": {
      "#1": [  ],
      "#2": [  ],
      "#3": [  ],
      "#desc": "Provide multiple action card in following format. [ <title> <message-url> <picture-url> ] ..."
    }
  },
  "rarg": {
    "#desc": "Test rest argement",
    "#1": [ "private", "public", "inner-public" ],
    "#2": [  ],
    "#3": [  ],
    "#4": [  ],
    "#5": [  ]
  },
  "namelist": {
    "#desc": "Test name list",
    "--repo|-r": {
      "#1": [  ],
      "#desc": "Provide repo name"
    },
    "--repo2|-b|m": {
      "#1": [ "abc", "cde", "def" ],
      "#2": [  ],
      "#desc": "Provide two repo name"
    },
    "--priviledge|-p": {
      "#1": [ "private", "public" ],
      "#desc": "Provide privilidge"
    },
    "--no_type_arg|-n": {
      "#1": [  ],
      "#desc": "Test no type argument but have default"
    },
    "--flag1|-f": "--- Flag1 that you can use $\{flag1:-false} to get the bool value",
    "--flag1222|-g": "--- Flag1222 that you can use $\{flag1222:-false} to get the bool value",
    "#1|--mul_line_arg|-m": "list_repo",
    "#3|--regex_arg2": [  ],
    "#2|--regex_arg1": [  ]
  },
  "snl": {
    "#desc": "Test small name list",
    "#1|--org": [  ]
  },
  "advise_null": {
    "#desc": "Test advise null"
  },
  "subcmd_null":${space}
}
A
}

# EndSection

# Section: Testcase for other test.

param_type    gitee     repo    "=~"   "[-A-Za-z0-9_]+"

gt_repo_info() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #1|--dddd     "Provide repo"      <>:repo3 =~ [-A-Za-z0-9_]+
'
    param:run

    echo "===== $1 ====="
}

gt(){
    param:dsl       '
subcommand:
    org                                     "manage org"
'
    param:run
    if [ -z "${PARAM_SUBCMD}" ]; then
        echo "Command Not Found. Show help." >&2
        return 0
    fi
    gt_${PARAM_SUBCMD}  "$@"
}

gt_org(){
    param:scope     "gitee/$O"
    param:dsl       '
subcommands:
    repo                    "List all repos"
'
    param:run
    echo "$1 ++++++++++ $PARAM_SUBCMD"
    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log error "Command Not Found. Show help."
        return 0
    fi

    "gt_org_${PARAM_SUBCMD}" "$@"
}

# FIXME: We should ask some questions to get the $1
# gt_repo_info

# EndSection

# Section: Run all testcase1.

start_test() {
    < "$1" awk '$0~/^test_[^\(]+\(\)/{ gsub(/\(\)\{/, "", $0); print $0 }' | while read -r line; do
        echo "Testing Function: $line"
        if ! eval "$line"; then
            printf "\033[0;31m======= Fail at function: %s \033[0m" "$line" >&2
            break
        fi
    done
}

# FIXME: All char was merge when in regex ui.
# FIXME: The color was no close

# If you want close some testcase, you can add the '#' before the start_test xxx line to comment it.
# Example:
# #start_test ./testcase/v0_test_option  ls_option ls_subcmd ls_option_subcmd

for testcase in has_subcmd option namelist subcmd quote dryrun ls_subcmd ls_option ls_option_subcmd license param_default help; do
    . "$(x wsroot)/.x-cmd/testcase1/v0_test_$testcase"
    start_test "$(x wsroot)/.x-cmd/testcase1/v0_test_$testcase"
done

. "$(x wsroot)/.x-cmd/testcase1/v0_test_ui"
start_test "$(x wsroot)/.x-cmd/testcase1/v0_test"

# EndSection