# shellcheck shell=sh
# shellcheck disable=SC2039,3043

gt_org(){
    param:scope     "gitee/$O"
    param:dsl       '
subcommands:
    new                     "new organization client"
    info                    "Show information"
    create                  "create org"
    repo                    "List all repos"
    quit                    "quit org"
    issue                   "List all issues"
    member                  "member management"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log error "Command Not Found. Show help."
        return 0
    fi
      
    "gt_org_${PARAM_SUBCMD}" "$@"
}

_gt_org()(
    gt_current_owner "${1:?organziation name}" "org"
    shift 1
    gt_org ${1:+"$@"}
)

gt_org_new() {
    param:void
    local orgname="${1:?Provide orgname name}"
    local aliasname="${2:-$reponame}"
    # shellcheck disable=SC2139
    alias "$aliasname=\"O=$O _gt_org $orgname\""
}

gt_org_info() {
    param:scope     "gitee/$O"
    param:dsl       '
type: 
options:
    --admin      "admin"       <>:bool
'
    param:run

    admin=${admin:-false}
    if [ $# -eq 0 ]; then
        ___gt_get_multi "/v5/user/orgs" admin page per_page
        [ $? -eq 1 ] && return 1
    else
        ___gt_get "/v5/orgs/${1:?Provide organization}"
        [ $? -eq 1 ] && return 1
    fi
    return 0
}

# It is very rare TODO:batch?
gt_org_create() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #1              "organization name"     <>:name
    --org           "organization path"     <>=""
    --description   "description"           <>=""
'
    param:run
    org=${org:-$1}
    ___gt_post_json "/v5/users/organization" name="$1" org description  
}

gt_org_repo(){
    param:dsl       '
subcommands:
    ls          "list repo"
    create      "org repo create"
'
    param:run
    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log error "Command Not Found. Show help."
        return 0
    fi
    "gt_org_repo_${PARAM_SUBCMD}" "$@"
}

# https://gitee.com/api/v5/swagger#/getV5OrgsOrgRepos
gt_org_repo_ls() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --type     "type"     <>="all"    = all private public
'
    param:run
    ui table func ___gt_table "\"\$(O=$O ___gt_get_multi \"/v5/orgs/${1:?Provide organization}/repos\" type)\"" \
        . id full_name ownerName=owner.name updatedTime="updated_at"
}

gt_org_quit() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #n      "orgs"
'
    param:run
    if [ -z "$1" ];then
        echo "At least one org spatial address is needed"
        return 1
    fi
        for org in "$@"; do
        {
            ___gt_delete "/v5/user/memberships/orgs/${org##*/}"
        code=$?
            if [ $code -ne 0 ]; then
                echo "Creating repo failure: $name. Code is $code. " >&2
                return $code
            fi
        }  
    done
}

# Section: Member

# shellcheck shell=sh
# shellcheck disable=SC2039,3043

# Should be like this.
# gt repo member add el:admin
# gt repo member remove user-a
# gt repo member add user-b

# gt repo member +el:admin -user-a +user-b
gt_org_member(){
    param:dsl       '
subcommands:
    ls            "list member"
    user            "get org member user info"
    add             "add member"
    del|remove      "Remove member"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        echo "subcommand not found. show help." >&2
        return 0
    fi
    
    "gt_org_member_$PARAM_SUBCMD" "$@"
}

gt_org_member_ls() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #1|--org        "org space address"    <>:address
    --role          "Repo name"            <>="all"         = admin member all
'
    param:run
    ___gt_get_multi "/v5/orgs/${org##*/}/members" role page per_page  
}

gt_org_member_user() {
    param:scope     "gitee/$O"
    param:dsl      '
options:
    #1|--org            "org space address"         <>:address
    --username          "username:space address"    <>:name
'
    param:run

    ___gt_get "/v5/orgs/${org##*/}/memberships/${username##*/}"  
}

gt_org_member_add() {
    param:scope     "gitee/$O"
    param:dsl       '
type: 
    role = admin member
options:
    --org           "org"       <>:address
    --role          "role"      <>:role="member"
    #n              "username"
'
    param:run

    # repo="$(___gt_param_normalize_repo "$repo")" || return 1
    if [ -z "$1" ];then
        echo "At least one user’s spatial address is needed"
        return 1
    fi

        for username in "$@"; do
        {
            ___gt_put_json "/v5/orgs/${org##*/}/memberships/${username##*/}" role
            local code=$?
            if [ $code -ne 0 ]; then
                echo "Creating repo failure: $username. Code is $code. " >&2
                return $code
            fi
        }  
    done
}

gt_org_member_del() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --org       "org space address"         <>:address
    #n          "username"
'
    param:run

    if [ -z "$1" ];then
        echo "At least one user’s spatial address is needed"
        return 1
    fi

    local username
    for username in "$@"; do
        {
            ___gt_delete "/v5/orgs/${org##*/}/memberships/${username##*/}"
            code=$?
            if [ $code -ne 0 ]; then
                echo "Creating repo failure: $name. Code is $code. " >&2
                return $code
            fi
        }  
    done
}


# EndSection

