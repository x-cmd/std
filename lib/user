# shellcheck shell=sh
# shellcheck disable=SC2039,3043

gt_user(){
    param:scope     "gitee/$O"
    param:dsl       '
subcommands:
    info        "Show information"
    repo        "List all repos"
    email       "get user email"
    issue       "List all issues"
    key         "key management"
'
    param:run
    if [ -z "$PARAM_SUBCMD" ]; then
        echo "Command Not Found. Show help." >&2
        return 0
    fi

    # list issues of user
    # list projects of user

    "gt_user_${PARAM_SUBCMD}" "$@"
}

# gt_users() {
#     local O="${O:-GITEE_DEFAULT}"
#     param <<A
# scope:  gitee/$O
# options: 
#     #1          "Provide owner"
# A
#     ___gt_get "/v5/users/$name" | json_extract "html_url"
# }

gt_user_info() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #1              "Username, if not set, show the user information of current owner, or owner of this token" 
'
    param:run
    
    local owner="$1"
    local data name html_url types
    if [ -z "$owner" ]; then
        data=$(___gt_get "/v5/user" )
    else
        data=$(___gt_get "/v5/users/$1")
    fi
    
    ___json_awk_get name=.login html_url=.html_url types=.type <<A
    $data
A
    [ -n "$name" ] && ui tf "true" "success" "- name:$name" "- url:$html_url" "- type:$types"
}

# https://gitee.com/api/v5/swagger#/getV5UserRepos
# gt_user_repo_list() {
gt_user_repo() {
    param:scope     "gitee/$O"
    param:dsl       '
type: 
    authority = all public private
    group = owner collaborator organization_member enterprise_member admin 
    sort = created updated pushed full_name
    direction = desc asc
options:
    --visibility    "visibility"        <>:authority="all"
    --affiliation   "affiliation"       <>:group="owner"
    --sort          "sort"              <>:sort="created"
    --direction     "direction"         <>:direction="desc"
'
    param:run
    if [ -t 1 ]; then
        ui table func ___gt_table "\"\$(O=$O ___gt_get_multi \"/v5/user/repos\" visibility affiliation sort direction)\"" \
            . id full_name ownerName=owner.name updatedTime="updated_at"
    else
        ___gt_get_multi "/v5/user/repos" visibility affiliation sort direction
    fi
}

# https://gitee.com/api/v5/swagger#/getV5Emails
gt_user_email(){
    param:void
    [ -t 1 ] && ui table func ___gt_table "\"\$(O=$O ___gt_get_multi \"/v5/emails\")\"" \
        . email state && return

    ___gt_get_multi "/v5/emails"
}

gt_user_issue(){
    param:scope     "gitee/$O"
    param:dsl       '
type: 
    screen = all assigned created
    sort = open progerssing closed rejected
    direction = desc asc
options:
    --filter        "filter(assigned,created,all)"                 <>:screen="assigned"
    --state         "state(open,progerssing,closed,rejected)"      <>:sort="open"
    --labels        "labels"                                       <>=""
    --direction     "direction(asc„ÄÅdesc)"                         <>:direction="desc"
    --since         "since"                                        <>=""
    --page          "page"                                         <>:numbers=""
    --per_page      "per_page"                                     <>:numbers=""
    --schedule      "schedule"                                     <>=""
    --deadline      "deadline"                                     <>=""
    --created_at    "create date"                                  <>=""
    --finished_at   "finish date"                                  <>=""
'
    param:run
    ___gt_get_multi "/v5/user/issues" filter state labels direction since \
        schedule deadline created_at finished_at  
}

# Section: key

# generate a key by openssl, then save it in the x-cmd cloud.

gt_user_key(){
    param:scope     "gitee/$O"
    param:dsl       '
subcommands:
    ls        "Show information"
    add         "List all repos"
    get         "get one key"
    del         "List all issues"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log error "Command Not Found. Show help."
        return 0
    fi

    # list issues of user
    # list projects of user

    "gt_user_key_${PARAM_SUBCMD}" "$@"
}

gt_user_key_ls(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --page        "page"                    <>:number=1
    --per_page    "per_page"                <>:number=20
'
    param:run
    ___gt_get "v5/user/keys" page per_page
}

gt_user_key_get(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --id        "provided key id"       <>:number
'
    param:run
    ___gt_get "v5/user/keys/$id"
}

gt_user_key_del(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --id        "provided key id"           <>:number
'
    param:run
    ___gt_delete "/v5/user/keys/$id"
}

gt_user_key_add(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --key       "add key"                   <>
    --title     "add key name"              <>
'
    param:run
    ___gt_post_json "/v5/user/keys" key title
}
# TODO
# gt_user_key(){
#     param <<A
# scope:  gitee/$O
# type: 
#     operate = add get delete 
# options:
#     #1          "operate(add,get,delete)"   <>:operate="get"
#     --id        "key id"                    <>=""
#     --key       "add key"                   <>=""
#     --title     "add key name"              <>=""
# A
#     case "$1" in
#         add)
#         if [ -z "$key" ]||[ -z "$title" ];then
#             echo "ERROR:no provided key:$key or key title:$title"
#             return 1
#         fi
#            ___gt_post_json "/v5/user/keys" key title
#            ;;
#         delete)
#         if [ -z "$id" ];then
#             echo "ERROR:no provided keyid:$id"
#             return 1
#         fi
#             ___gt_delete "/v5/user/keys/$id"
#             ;;
#         get|*)
#             ___gt_get "v5/user/keys/$id"  
#             ;;
#     esac
# }

# EndSection

