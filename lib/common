# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263    # xrc

# Section: full_version_remote sort_version simplify_version

___x_cmd_env_common_full_version_remote(){
    local candidate="${1:?Provide candidate}"
    local pattern="${2}"
    ___x_cmd_env_run_common_if_notfound ls_remote "$candidate" "$pattern" "$3" \
        | awk 'END{ if (NR<=0) { exit(1) } else print $1;}'
}

___x_cmd_env_common_full_version_local(){
    local candidate="${1:?Provide candidate}"
    local pattern="${2}"
    ___x_cmd_env_run_common_if_notfound ls_local "$candidate" "$pattern" "$3" \
        | awk 'END{ if (NR<=0) { exit(1) } else print $1;}'
}

___x_cmd_env_common_sort_version(){
    sort -V
}

___x_cmd_env_common_simplify_version(){
    awk '{
        version = $1
        match(version, /[0-9]+\.[0-9+]+/)
        prefix = substr(version,RSTART+0,RLENGTH-0)

        if ( uniq_map[ prefix ] == "" && last != "" ) {
            print last
            uniq_map[ prefix ] = 1
        }
        last = version
    }
    END{ if ( last != "" ) { print last ; }}'
}
# EndSection

# Section: ls_local
___x_cmd_env_common_ls_local(){
    local candidate="${1:?Provide candidate}"
    local pattern="${2}"
    if [ -d "$___X_CMD_ENV_PATH/$candidate/versions" ]; then
        for version in "$___X_CMD_ENV_PATH/$candidate/versions"/*"$pattern"* ; do
            printf "%s\n" "${version##*/}"
        done 2>/dev/null | ___x_cmd_env_common_sort_version
    fi
}

___x_cmd_env_common_la(){
    :
}
# EndSection

# Section: use file
___x_cmd_env_common_init_file_add(){
    local candidate="$1"
    local version_path="$2"

    if [ ! -f "$___X_CMD_ROOT/.env/env/use" ]; then
        printf "%s\n" "$version_path" > "$___X_CMD_ROOT/.env/env/use"
    fi

    ___x_cmd_env_common_init_file_rm "$candidate"
    printf "%s\n" "$version_path" >> "$___X_CMD_ROOT/.env/env/use"
}

___x_cmd_env_common_init_file_rm(){
    local candidate="$1"
    local content
    content="$(grep -v "$candidate" < "$___X_CMD_ROOT/.env/env/use")"
    printf "%s\n" "$content" > "$___X_CMD_ROOT/.env/env/use"
}
# EndSection

# Section: use, try, ws

___x_cmd_env_common_use(){
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide version}"
    local use_shims="${3:-""}"

    if ! ___x_cmd_env_util_is_downloaded "$candidate" "$version" 2>/dev/null; then
        # TODO: Add prompt: download from the website.
        printf "%s" "Not downloaded" >&2
        return 0
    fi

    local version_path
    if [ -z "$use_shims" ]; then
        version_path="${___X_CMD_ENV_PATH}/$candidate/versions/$version/bin"
    else
        version_path="${___X_CMD_ENV_PATH}/$candidate/shims"
        ___x_cmd_env_util_make_shim_dir "$candidate" "${version}" || return 1
    fi

    ___x_cmd_env_util_add_path "$version_path" || return 1

    ___x_cmd_env_common_init_file_add "$candidate" "$version_path" && \
            printf "%s\n" "$version" > "$___X_CMD_ENV_PATH/$candidate/version" && \
                env:info "Using $candidate $version -> $___X_CMD_ENV_PATH/$candidate/version"
}

___x_cmd_env_common_try(){
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide version}"
    local version_path="${3:-"$___X_CMD_ENV_PATH/$candidate/versions/$version/bin"}"

    ___x_cmd_env_util_is_downloaded "$candidate" "$version" 2>/dev/null || return 1
    ___x_cmd_env_util_add_path "$version_path" && \
        env:info "Setting ${candidate} ${version} in current Shell."
}

# EndSection

# Section: current

___x_cmd_env_common_current(){
    local cmd="${1:?Provide command}"
    local cmd_path
    cmd_path="$(command -v "$cmd")"

    # No any cmd version
    if [ -z "$cmd_path" ]; then
        env:error "No version of $cmd detected, please install it first! "
        return 1

    # After try and no cmd version in xenv, but has cmd version in current shell.
    elif [ "$cmd_path" != "$___X_CMD_ENV_PATH/$cmd/shims/$cmd" ]; then
        local try_path="${cmd_path#*"versions/"}"
        try_path="${try_path%%/*}"
        if [ "$try_path" != "$cmd" ] && [ -n "$try_path" ]; then
            printf "%s\n" "$try_path"
        else
            printf "%s\n" "system"
        fi
        return 0

    # Use(shims)
    else
        local version
        if ! version=$(___x_cmd_env_util_shims_which_version "$cmd"); then
            env:error "No version of $cmd detected, please download it first! "
            return 1
        fi

        local exactly_path="$___X_CMD_ENV_PATH/$cmd/versions/$version/bin/$cmd"
        if [ ! -f "$exactly_path" ]; then
            env:error "No such file: $exactly_path"
            return 1
        fi

        printf "%s\n" "$version"
    fi
}
# EndSection

# Section: download

___x_cmd_env_common_download(){
    local candidate="${1:?Provide canddidate}"
    local version="${2:?Provide version}"

    if ___x_cmd_env_util_is_downloaded "$candidate" "$version" 2>/dev/null ; then
        env:info "Already downloaded $candidate $version"
        return 0
    fi

    if ! ___x_cmd_env_run_common_if_notfound download_archive "$candidate" "$version"; then
        env:error "Failed to download $candidate $version"
        return 1
    fi

    if ! ___x_cmd_env_run_common_if_notfound unpack "$candidate" "$version"; then
		env:error "Failed to unpack $candidate of version: $version."
		return 1
	fi
}

# EndSection

# Section: install, uninstall
___x_cmd_env_common_install(){
    local candidate="${1:?Provide canddidate}"
    local version="${2:?Provide version}"
    local use_shims="${3:-""}"

    env:info "Installing $candidate $version"
    if ! ___x_cmd_env_run_common_if_notfound download "$candidate" "$version"; then
        env:error "Failed to installed $candidate of version: $version."
        return 1
    fi

    ___x_cmd_env_common_use "$candidate" "$version" "$use_shims" || return 1
    env:info "Successfully installed $candidate $version"
}

___x_cmd_env_common_uninstall(){
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide the version}"
    env:info "Uninstalling $1 $2"

    local candidate_path="$___X_CMD_ENV_PATH/${candidate}/versions/${version}"
    if [ -d "$candidate_path" ]; then
        rm -rf "${candidate_path}"
    else
        env_log  warn "This ${candidate} ${version} is no exist."
        return 1
    fi
    ___x_cmd_env_common_init_file_rm "$candidate"
    # TODO: remove the shims from $PATH
}
# EndSection

# Section: which, exec
___x_cmd_env_common_which(){
    local candidate="${1:?Provide candidate}"
    local cmd="${2:-"$candidate"}"
    local cmd_path
    cmd_path="$(command -v "$cmd")"

    env:debug "cmd_path: $cmd_path, cmd: $cmd"
    if [ "$cmd_path" != "$___X_CMD_ENV_PATH/$candidate/shims/$cmd" ]; then
        command -v "$cmd"
        return 0
    fi

    local version
    if version=$(___x_cmd_env_util_shims_which_version "$candidate"); then
        local exactly_path="$___X_CMD_ENV_PATH/$candidate/versions/$version/bin/$cmd"
        if [ ! -f "$exactly_path" ]; then
            env:error "No such file: $exactly_path"
            return 1
        fi
        printf "%s\n" "$exactly_path"
    fi
}

___x_cmd_env_common_exec(){
    local candidate="${1:?Provide candidate}"
    local cmd="${2:?Provide command}"
    local version="${3:?Provide version}"; shift 3

    if ! ___x_cmd_env_util_is_downloaded "${candidate}" "${version}" 2>/dev/null ; then
        env:error "Candidate $candidate No such version: $version"
        return 1
    fi
    env:info "Executing $candidate $version $cmd"
    PATH="${___X_CMD_ENV_PATH}/${candidate}/versions/${version}/bin:$PATH" "$cmd" "$@"
}
# EndSection
