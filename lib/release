

# Section: release

___x_cmd_os_kernal(){
    :
}

___x_cmd_os_release_code(){
    ___x_cmd_os_release | awk -v FS="=" '$1=="DISTRIB_CODENAME"{ print $2; exit 0; }'
}

___x_cmd_os_extract(){
    awk -v name=${1:-Provide name} -v code=1 -v FS='=' '
$1==name { print $2; code=0 }
END { exit code }
'
}

___x_cmd_os_release_name(){
    if [ -f /etc/os-release ] && ___x_cmd_os_extract "ID" </etc/os-release 2>/dev/null; then
        return 0
    fi

    local s

    if s=$(cat /etc/issue 2>/dev/null); then
        # Ubuntu 20.04.2 LTS
        printf  "${s%/*}\n"
        return 0
    fi

    if s=$(cat /etc/redhat-release 2>/dev/null); then
        # redhat or centos
        # CentOS Linux release 7.6.1810 (Core)
        if [ s != "${s#CentOS}" ]; then
            printf "%s" "centos"
        else
            printf "%s"  "redhat"
        fi
        return 0
    fi

    if s=$(cat /etc/debian_version 2>/dev/null); then
        printf "%s"  debian
        return 0
    fi

    if s=$(cat /etc/slackware_version 2>/dev/null); then
        printf "%s"  slackware
        return 0
    fi

    if [ -f /etc/os-release ] && ___x_cmd_os_extract DISTRIB_ID </etc/lsb-release 2>/dev/null | tr "[:upper:]" "[:lower:]"; then
        return 0
    fi

    uname -s 2>/dev/null
    return
}

# shellcheck disable=SC2120
___x_cmd_os_release(){
    if [ $# -eq 0 ]; then
        ___x_cmd_os_release_all
        return
    fi

    local var
    local tmp

    local IFS
    {
        var=${1:-tmp}
        [ "$var" = - ] && var=tmp
        read $var

        var=${2:-tmp}
        [ "$var" = - ] && var=tmp
        read $var

        var=${3:-tmp}
        [ "$var" = - ] && var=tmp
        read $var
    } <<A
$(___x_cmd_os_release_all)
A
}

# #1 release-name
# #2 release-version
# #3 release-codename
___x_cmd_os_release_all(){

    if s=$(cat /etc/lsb-release 2>/dev/null); then
        printf "%s" "$s" | ___x_cmd_os_extract "DISTRIB_ID"
        printf "%s" "$s" | ___x_cmd_os_extract "DISTRIB_RELEASE"
        printf "%s" "$s" | ___x_cmd_os_extract "DISTRIB_CODENAME"
    fi

    local s
    if s=$(cat /etc/os-release 2>/dev/null); then
        printf "%s" "$s" | ___x_cmd_os_extract "ID"
        printf "%s" "$s" | ___x_cmd_os_extract "VERSION_ID"

        # NAME="Alpine Linux"
        # ID=alpine
        # VERSION_ID=3.10.0
        # PRETTY_NAME="Alpine Linux v3.10"
        # HOME_URL="https://alpinelinux.org/"
        # BUG_REPORT_URL="https://bugs.alpinelinux.org/"

        # Example 2

        # NAME="CentOS Linux"
        # VERSION="7 (Core)"
        # ID="centos"
        # ID_LIKE="rhel fedora"
        # VERSION_ID="7"
        # PRETTY_NAME="CentOS Linux 7 (Core)"
        # ANSI_COLOR="0;31"
        # CPE_NAME="cpe:/o:centos:centos:7"
        # HOME_URL="https://www.centos.org/"
        # BUG_REPORT_URL="https://bugs.centos.org/"

        # CENTOS_MANTISBT_PROJECT="CentOS-7"
        # CENTOS_MANTISBT_PROJECT_VERSION="7"
        # REDHAT_SUPPORT_PRODUCT="centos"
        # REDHAT_SUPPORT_PRODUCT_VERSION="7"
    fi

    if command -v uname 1>/dev/null 2>/dev/null; then
        uname -s
        uname -r
    fi

    return 1

    # local s
    # if s=$(cat /etc/redhat-release); then
    #     # redhat or centos
    #     # CentOS Linux release 7.6.1810 (Core)
    #     if [ s != ${s#CentOS} ]; then
    #         echo "centos"
    #     else
    #         echo "redhat"
    #     fi
    # fi

    # if s=$(cat /etc/debian_version); then
    #     echo
    # fi

    # if s=$(cat /etc/slackware_version); then
    #     echo slackware
    # fi

    # if s=$(/etc/lsb-release); then
    #     # DISTRIB_ID=Ubuntu
    #     # DISTRIB_RELEASE=20.04
    #     # DISTRIB_CODENAME=focal
    #     # DISTRIB_DESCRIPTION="Ubuntu 20.04.2 LTS"
    #     echo ubuntu
    # fi

    # if s=$(cat /etc/issue); then
    #     # Ubuntu 20.04.2 LTS
    #     echo ubuntu
    # fi

}

# EndSection

# Section: name
___x_cmd_os_lsname(){
    printf "%s" "linux
darwin
sunos
freebsd
openbsd
aix
win"
}


# code from nvm
___x_cmd_os_name() {
    case "$(command uname -a)" in
        Linux\ *)                   printf "%s\n" linux ;;
        Darwin\ *)                  printf "%s\n" darwin ;;
        SunOS\ *)                   printf "%s\n" sunos ;;
        FreeBSD\ *)                 printf "%s\n" freebsd ;;
        OpenBSD\ *)                 printf "%s\n" openbsd ;;         # TODO: Netbsd?
        AIX\ *)                     printf "%s\n" aix ;;
        CYGWIN* | MSYS* | MINGW*)   printf "%s\n" win ;;
    esac
}

# EndSection

# Section: arch
___x_cmd_os_lsarch(){
    printf "%s" "linux
x64
x64
arm64"
}

# code from nvm
___x_cmd_os_arch() {
    local HOST_ARCH
    local OS

    OS="$(___x_cmd_os_name)"
    if [ "${OS}" = "sunos" ]; then
        # first try to use pkgsrc to guess the most appropriate arch.
        if HOST_ARCH=$(pkg_info -Q MACHINE_ARCH pkg_install 2>/dev/null); then
            HOST_ARCH=$(echo "${HOST_ARCH}" | command tail -1)
        else
            # If it's not available, use isainfo to get the instruction set supported by the kernel.
            HOST_ARCH=$(isainfo -n)
        fi
    elif [ "${OS}" = "aix" ]; then
        HOST_ARCH=ppc64
    else
        HOST_ARCH="$(command uname -m)"
    fi

    local ARCH
    case "${HOST_ARCH}" in
        x86_64 | amd64)     ARCH="x64" ;;
        i*86)               ARCH="x86" ;;
        aarch64)            ARCH="arm64" ;;
        *)                  ARCH="${HOST_ARCH}" ;;     # TODO: Consider 32bit arm? For router or raspberry pi 3?
    esac

    # If running a 64bit ARM kernel but a 32bit ARM userland, change ARCH to 32bit ARM (armv7l)
    if [ "$OS" = "Linux" ] && [ "${ARCH}" = arm64 ]; then
        local L
        L=$(ls -dl /sbin/init 2>/dev/null) #                                         if /sbin/init is 32bit executable
        if [ "$(od -An -t x1 -j 4 -N 1 "${L#*-> }")" = ' 01' ]; then
            ARCH=armv7l
            HOST_ARCH=armv7l
        fi
    fi

    local arg
    local src
    local tgt
    for arg in "$@"; do
        src="${arg%%=*}"
        tgt="${arg#*=}"
        if [ "$src" = "$ARCH" ]; then
            printf "%s\n" "$tgt"
            return 0
        fi
    done

    printf "%s\n" "${ARCH}"
}

# EndSection

