# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263    # xrc
xrc env/lib/sdk

___x_cmd_env_scala_sort_versions(){
	sort -t . -n
}

___x_cmd_env_scala_ls_remote(){
	local cache_path="$___X_CMD_ENV_PATH/scala/cache/cache_list"
	local cache_expiration="${2:-1}"

	___x_cmd_httpget "https://www.scala-lang.org/download/all.html" "$cache_path" "$cache_expiration" 2>/dev/null && \
	awk ' match($0, /download[0-9a-z./">]+Scala[0-9. ]+<\/a>/) {gsub(/^[ ]+/,"",$0);gsub(/<a href="\/download\/[0-9. ]{1,}html">Scala/," ",$0);gsub(/<\/a>/," "$0);print(substr($0,3,8)) }' <"$cache_path" | ___x_cmd_env_scala_sort_versions | uniq
}


___x_cmd_env_scala_download_archive(){

	local version=${1:?Provide a version}
    local archive_path=$___X_CMD_ENV_PATH/scala/archive/scala-${version}.zip

    if ___x_cmd_env_util_is_archive_cached scala "$version" 2>/dev/null; then
        env_log info "Archive existed: $version"
        return 0
    fi

    mkdir -p "$(dirname $archive_path)"
    download_url="https://downloads.lightbend.com/scala/${version}/scala-${version}.zip"
    env_log info "Downloading $download_url"

    if ! curl --progress-bar --location --retry-max-time 10 --retry 0 "$download_url" --output "$archive_path" ; then
        env_log error "Download failure from $download_url"
        return 1
    fi

}
___x_cmd_env_scala_unpack(){
	local version="${1:?Provide a version}"
    env_log info "Unpacking: scala ${version}"

    local archive_path="$___X_CMD_ENV_PATH/scala/archive/scala-${version}.zip"
	x uz "$___X_CMD_ENV_PATH/scala/archive/scala-${version}.zip" "$(dirname "$archive_path")" || return 1

    local archive_unpack_files
    archive_unpack_files="$(dirname "$archive_path")/scala-$version"

    local versions_path="$___X_CMD_ENV_PATH/scala/versions"
	mkdir -p "$versions_path/${version}"
	mv -f "$archive_unpack_files/"* "$versions_path/${version}"
	rm -rf "$archive_unpack_files"
}