# shellcheck shell=sh disable=SC3043

___x_cmd_hub_file(){
    param:dsl<<A
subcommands:
    ls          "List files in hub"
    which       "Find file in hub"
    upload      "Update file to hub"
    share       "Set file to public"
    private     "Set file to private"
A
    param:run
    [ -z "${PARAM_SUBCMD}" ] && ___x_cmd_hub_file help && return
    "___x_cmd_hub_file_$PARAM_SUBCMD" "$@"
}

___x_cmd_hub_file_ls(){
    param:void
    local respath="${1:-@me/}"
    respath="$(___x_cmd_hub_file_normalize_respath "$respath")"

    local res
    if ! res="$(___x_cmd_httpget "$___X_CMD_HUB_SERVICE_URL/api/v0/file/ls?token=$(___x_cmd_hub_token)&res=${respath}")" ; then
        hub_log error "Failed to ls file: $res"
        return 1
    fi
    hub_log debug "response: ${res}"

    printf "%s" "$res" | x jq -r ".[]"
}

___x_cmd_hub_file_which(){
    param:void
    local respath="${1:?Provide respath}"
    respath="$(___x_cmd_hub_file_normalize_respath "$respath")"

    local CACHE="${___X_CMD_ROOT%/}/${respath#/}"
    mkdir -p "${CACHE%/*}"
    if ___x_cmd_httpget "$___X_CMD_HUB_SERVICE_URL/api/v0/file/cat?token=$(___x_cmd_hub_token)&res=${respath}" >"$CACHE"; then
        printf "%s" "$CACHE"
    else
        printf "Failed: %s" "$CACHE" 2>/dev/null
        return 1
    fi
}

___x_cmd_hub_file_normalize_respath(){
    local respath="${1}"
    case "$respath" in
        @me/*|@i/*|@/*)
            local user
            user=$(___x_cmd_hub_login_user)
            if [ -z "$user" ]; then
                printf "Cannot not find out login user for resource: %s" "$respath" >&2
                return 1
            fi
            printf "%s" "$user/${respath#@*/}"
            ___X_CMD_WHICH_ONE_RESOURCE_TYPE=me@hub
            ;;
        *@*)
            ___X_CMD_WHICH_ONE_RESOURCE_TYPE=hub
            printf "%s" "$respath" ;;
        *)
            ___X_CMD_WHICH_ONE_RESOURCE_TYPE=hub
            printf "%s" "$(___x_cmd_hub_login_user)/${respath#/}" ;;
    esac
}

___x_cmd_hub_file_upload(){
    param:void
    local localfp="${1:?Provide local file}"
    local respath="${2:?provide respath}"

    [ ! -f "$localfp" ] && {
        hub_log error "File Not Existed: $localfp"
        return
    }

    respath="$(___x_cmd_hub_file_normalize_respath "$respath")"

    # TODO: Wait ___x_cmd_httpget support -F "file=@$localfp"
    curl -F "file=@$localfp" "$___X_CMD_HUB_SERVICE_URL/api/v0/file/upload?token=$(___x_cmd_hub_token)&res=${respath}" 2>/dev/null
    printf "\n"
}

___x_cmd_hub_file_share(){
    param:void
    local respath="${1:?Please provide path}"
    respath="$(___x_cmd_hub_file_normalize_respath "$respath")"

    curl "$___X_CMD_HUB_SERVICE_URL/api/v0/file/share/true?token=$(___x_cmd_hub_token)&res=${respath}" 2>/dev/null
    printf "\n"
}

___x_cmd_hub_file_private(){
    param:void
    local respath="${1:?Please provide path}"
    respath="$(___x_cmd_hub_file_normalize_respath "$respath")"

    curl "$___X_CMD_HUB_SERVICE_URL/api/v0/file/share/false?token=$(___x_cmd_hub_token)&res=${respath}" 2>/dev/null
    printf "\n"
}
