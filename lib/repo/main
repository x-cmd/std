# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gh_repo(){
    param:scope     "github/$O"
    param:dsl       '
subcmd:
    create          "create repo"
    ls              "list repo of owner"
    info            "Show detailed information of repo"
    rm              "Remove repo"
    member          "manage member"
    pr              "manage pr"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        gh_log warn "Command Not Found. Show help."
        ___x_cmd_gh_repo _param_help_doc
        return 1
    fi

    "___x_cmd_gh_repo_${PARAM_SUBCMD}" "$@"
}

# Section: List Repos
___x_cmd_gh_repo_ls() {
    param:void
    local owner_type
    if [ $# -eq 0 ]; then
        owner_type=user
    else
        local owner="$1"
        owner_type="$(___x_cmd_gh_owner_type_query "$owner")"
    fi

    ___x_cmd_gh_"${owner_type}"_repo ls "$@"
}
# EndSection

# Section: Info
___x_cmd_gh_repo_info() {
    param:scope     "github/$O"
    param:dsl       '
options:
    #1|--repo    "Provide owner name and repo name.(default:the current user repo)"      <>:RepName
'
    param:run

    ___x_cmd_gh_param_init_owner_repo

    ___x_cmd_gh_http get "/repos/${owner_repo}" | (
        ___x_cmd_git_json_query_rename id=.id html_url=.html_url name=.full_name;
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true     "repo $name info:" "repo_id: $id" "name: $name" "url: $html_url"
        else
            ___x_cmd_ui_tf false    "Fail. Couldn't find any repo: ${owner_repo}"
            return 1
        fi
    )
}
# EndSection

# Section: Creation
___x_cmd_gh_repo_create() {
    local O="${O:-GITHUB_DEFAULT}"

    param:scope     "github/$O"
    param:dsl       '
type:
    access  =   private public
option:
    --access                    "private,public"                                                        <>:access=private
    --description               "description"                                                           <>=""
    --homepage                  "homepage"                                                              <>=""
    --team_id                   "the id of the team that will be granted access to this repository"     <>=""
    --gitignore_template        "The desired language or platform to apply to the .gitignore."          <>:Ignore=""
    --license_template          "The license keyword of the open source license for this repository."   <>:License=""
    --no_issues                 "Whether to disable issue"
    --no_projects               "Whether to disable has_projects"
    --no_wiki                   "Whether to disable wiki"
    --no_auto_init              "auto init README"
    --no_squash_merge           "Whether to allow squash merges for pull requests."
    --no_merge_commit           "Whether to allow merge commits for pull requests."
    --no_rebase_merge           "Whether to allow rebase merges for pull requests."
    --allow_auto_merge          "Whether to allow Auto-merge to be used on pull requests,Default:false"
    --delete_branch_on_merge    "Whether to delete head branches when pull requests are merged"
    --has_downloads             "Whether downloads are enabled."
    --is_template               "can be used to generate new repositories"
    #n                          "repo names"
'
    param:run

    if [ $# -eq 0 ]; then
        gh_log error "repo create name is null"
        return 1
    fi

    local private=true
    [ "$access" = "public" ] && private=false

    local name="%%name%%"
    local gen_gh_json
    gen_gh_json="$(
        param:option2json +name +private -access \
            has_issues=^no_issues                   has_wiki=^no_wiki                       has_projects=^no_projects \
            allow_rebase_merge=^no_rebase_merge     allow_squash_merge=^no_squash_merge     allow_merge_commit=^no_merge_commit \
            auto_init=^no_auto_init)"

    for name in "$@"; do
        # ___x_cmd_str_sub "${gen_gh_json}" "%%name%%" "$name" | \
        printf "%s" "${gen_gh_json}" | sed s/%%name%%/"${name##%/}"/g | \
        ___x_cmd_gh_http post "/user/repos" - | \
        {
            ___x_cmd_git_json_query_rename id=.id url=.html_url owner=.owner.login
            if [ -n "$id" ]; then
                ___x_cmd_ui_tf true "Creating repo $name success" "repo_id: $id" "repo_owner: $owner" "url: $url"
            else
                ___x_cmd_ui_tf false "Creating repo failure: $name."
                return 1
            fi
        }
    done
}

___x_cmd_gh_repo_create_status_handler(){
    if [ ! -t 1 ] || [ -n "$ENFORCE_JSON" ]; then
        cat
        return
    fi

    ___x_cmd_git_json_query_rename id=.id url=.html_url owner=.owner.login
    if [ -n "$id" ]; then
        ___x_cmd_ui_tf true "Creating repo $name success" "repo_id: $id" "repo_owner: $owner" "url: $url"
    else
        ___x_cmd_ui_tf false "Creating repo failure: $name."
        return 1
    fi
}
# EndSection

# Section: rm
___x_cmd_gh_repo_rm() {
    param:scope     "github/$O"
    param:dsl       '
options:
    #n      "Provide repo list"    <>
'
    param:run

    ___x_cmd_ui_select "Are you sure you want to delete repo $*" "yes" "no" "---" "---"
    [ "$___X_CMD_UI_SELECT_CURRENT_ITEM" = "yes" ] || return

    local i
    for i in "$@"; do
        ___x_cmd_gh_param_normalize_repo "$i"
        # TODO:http handleï¼Œdelete repo return data is null
        if ___x_cmd_gh_http delete "/repos/$owner_repo" >/dev/null; then
            ___x_cmd_ui_tf true  "deleted repo $owner_repo"
        else
            ___x_cmd_ui_tf false "Deleting repo failure: $owner_repo. Probably because it desn't exists."
        fi
    done
}
# EndSection

# Section: Update
___x_cmd_gh_repo_update_json() {
    local O="${O:-GITHUB_DEFAULT}"

    param:scope     "github/$O"
    param:dsl       '
type:
    Access  =   private public
option:
    --access                    "private,public"                                                        <>:Access=private
    --repo                      "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName
    --description               "description"                                                           <>=""
    --homepage                  "homepage"                                                              <>=""
    --team_id                   "the id of the team that will be granted access to this repository"     <>=""
    --default_branch            "Updates the default branch for this repository."                       <>=""
    --advanced_security         "enable or disable GitHub Advanced Security for this repository."       <>:Status=""
    --scanning                  "enable or disable secret scanning for this repository"                 <>:Status=""
    --scanning_push_protection  "enable or disable secret scanning push protection for this repository" <>:Status=""
    --no_issues                 "Whether to disable issue"
    --no_projects               "Whether to disable has_projects"
    --no_wiki                   "Whether to disable wiki"
    --no_squash_merge           "Whether to allow squash merges for pull requests."
    --no_merge_commit           "Whether to allow merge commits for pull requests."
    --no_rebase_merge           "Whether to allow rebase merges for pull requests."
    --allow_auto_merge          "Whether to allow Auto-merge to be used on pull requests,Default:false"
    --delete_branch_on_merge    "Whether to delete head branches when pull requests are merged"
    --allow_forking             "allow private forks."
    --archived                  "Mark this repository as archived and read-only."
    --is_template               "can be used to generate new repositories"
    #n                          "repo names"
'
    param:run
    if [ $# -eq 0 ];then
        gh_log error "repo name is null"
        return 1
    fi

    local private=true
    [ "$access" = "public" ] && private=false

    # true=enable false=disable param:flag2bool \
    #     secret_scanning \
    #     advanced_security \
    #     secret_scanning_push_protection

    xrc jo
    local security
    security="$(___x_cmd_jo "{
            security_and_analysis:{
                secret_scanning:{
                    status: $scanning
                },
                advanced_security:{
                    status: $advanced_security
                },
                secret_scanning_push_protection:{
                    status: $scanning_push_protection
                }
            }
        }"
    )"

    local name="%%name%%"

    local gen_gh_json
    gen_gh_json="$(param:option2json +name -repo +security visibility=access \
        has_issues=^no_issues                   has_wiki=^no_wiki                       has_projects=^no_projects \
        allow_rebase_merge=^no_rebase_merge     allow_squash_merge=^no_squash_merge     allow_merge_commit=^no_merge_commit \
        auto_init=^no_auto_init
    )"

    ___x_cmd_gh_param_init_owner_repo
    for name in "$@"; do
        printf "%s" "${gen_gh_json}" | sed s/%%name%%/"${name##%/}"/g | \
            ___x_cmd_gh_http patch "/repos/${owner_repo}" - | \
            ___x_cmd_gh_repo_update_json_status_handler
    done
}

___x_cmd_gh_repo_update_json_status_handler(){
    if [ ! -t 1 ] || [ -n "$ENFORCE_JSON" ]; then
        cat
        return
    fi

    ___x_cmd_git_json_query_rename id=.id url=.html_url owner=.owner.login
    if [ -n "$id" ];then
        ___x_cmd_ui_tf true "Update repo $name success" "repo_id: $id" "repo_owner: $owner" "url: $url"
    else
        ___x_cmd_ui_tf false "Update repo failure: $name."
        return 1
    fi
}

# EndSection