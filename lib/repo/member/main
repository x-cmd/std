# shellcheck shell=sh
# shellcheck disable=SC2039,3043

# Should be like this.
# gh repo member add el:admin
# gh repo member remove user-a
# gh repo member add user-b

# gh repo member +el:admin -user-a +user-b
___x_cmd_gh_repo_member(){
    param:dsl       '
subcmd:
    ls              "list member"
    add             "add member"
    rm              "Remove member"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        gh_log error "subcommand not found. show help."
        return 0
    fi

    "___x_cmd_gh_repo_member_$PARAM_SUBCMD" "$@"
}
# Section: List
___x_cmd_gh_repo_member_ls() {
    param:scope     "github/$O"
    param:dsl       '
type:
    Affiliation =   outside direct all
options:
    --affiliation   "Filter collaborators returned by their affiliation."               <>:Affiliation="all"
    --per_page      "Results per page"                                                  <>=30
    --page          "Page number of the results to fetch."                              <>=1
    #1|--repo       "Provide owner name and repo name.(default:the current user repo)"  <>:RepName
'
    param:run
    ___x_cmd_gh_param_init_owner_repo

    if [ -t 1 ] && ___ui_table_json Id=.id Owner=.login Url=.html_url \
         -- "___x_cmd_gh_get_multi" "/repos/${owner_repo}/collaborators" per_page page; then
        return 0
    fi

    ___x_cmd_gh_get_multi "/repos/${owner_repo}/collaborators" per_page page && return 0
}
# EndSection

# Section: Add & Rm
___x_cmd_gh_repo_member_add() {
    param:scope     "github/$O"
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"      <>:RepName
    --permission    "The permission to grant the collaborator."                             <>:permission=push
    --permissions   "permissions"                                                           <>=""
    --name          "Username list,separated by commas"                                     <>
'
    param:run

    local tmpRepo="$repo"
    local username="$name"
    # TODO:N to N && 1 TO N & N to 1
    while true ;do
        repo="${tmpRepo%%,*}"
        tmpRepo="${tmpRepo#*,}"
        ___x_cmd_gh_param_init_owner_repo
        while true;do
            name="${username%%,*}"
            username="${username#*,}"
            ___x_cmd_gh_http put json "/repos/$owner_repo/collaborators/${name##*/}" permission | (
            ___x_cmd_git_json_query_rename id=.id
            if [ -n "$id" ];then
                ui tf "true" "add $name to $repo successfully"
            else
                gh_log error "add user failure: $name."
                return 1
            fi
            )
            [ "$name" = "$username" ] && break
        done
        [ "$repo" = "$tmpRepo" ] && return 0
    done
}

___x_cmd_gh_repo_member_rm() {
    param:scope     "github/$O"
    param:dsl       '
options:
    --repo      "Provide owner name and repo name.(default:the current user repo)"  <>:RepName
    #n          "Username list"
'
    param:run
    if [ $# -eq 0 ];then
        gh_log error "At least one user's spatial address is needed"
        return 1
    fi

    ___x_cmd_gh_param_init_owner_repo
    local username
    for username in "$@"; do
        # TODO:http handleï¼Œdelete repo return data is null.Status: 204 No Content
        if ___x_cmd_gh_http delete "/repos/$owner_repo/collaborators/${username##*/}";then
            ___x_cmd_ui_tf true  "successfully deleted $username in $owner_repo"
        else
            ___x_cmd_ui_tf false "delete user failure: $username."
            return 1
        fi
    done
}
# EndSection
