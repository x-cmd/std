# shellcheck shell=sh disable=SC3043

# author:       Li Junhao           l@x-cmd.com    edwinjhlee.github.io
# maintainer:   Li Junhao

xrc param/latest

___X_CMD_PROXY_BACKUP_DIR="$___X_CMD_ROOT/proxy/.backup"

proxy(){
    param:dsl <<A
subcommands:
    set                     "Setting proxy in local shell environments: http_proxy, https_proxy"
    unset                   "Unset all proxy in the shell environment"
    version                 "Provide version"

    pip                     "Setting the pip mirror for Python development"
    npm                     "Setting the npm mirror for Javascript/Typescript development"
    maven                   "Setting the maven mirror for Java development"
    go                      "Setting the go mirror"
    gem                     "Setting the gem mirror for Ruby development"
    cargo                   "Setting the the cargo mirror for Rust development"

    apt                     "Setting the apt mirror for debian/ubuntu"
    yum                     "setting the yum mirror for centos/redhat"
    brew                    "setting the homebrew mirror"
    apk                     "setting the apk mirror for alpine"
    pacman                  "setting the pacman mirror"
A
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        proxy_log error "subcommand required"
        proxy _param_help_doc  >&2
        return
    fi

    case "$PARAM_SUBCMD" in
        set)        ___proxy_set "$@" ;;
        unset)      ___proxy_unset "$@" ;;
        version)    ___proxy_version ;;
        *)          ___proxy_exec "${PARAM_SUBCMD}" "$@" ;;
    esac
}

# Section: plugins

# TODO: It is unnecessary to source the plugin file at the first time.
for i in brew apt pip npm go apk yum cargo gem pacman; do
    xrc "proxy/lib/$i"
done

___proxy_version(){
    param:void
    printf "%s" v0
}

# TODOï¼šThere is no advise friendly way to use the subcmd.
___proxy_exec(){
    local subcmd="${1:?Subcmd}"
    shift

    if xrc "proxy/lib/$subcmd"; then
        proxy_"$subcmd" "$@"
    else
        proxy_log error "Module not found. Autoloading failure."
        return 1
    fi
}

# EndSection

# Section: proxy setting

# proxy set 127.0.0.1:7070
# proxy set 127.0.0.1:7070 ftp=ftp://127.0.0.1:7070

______proxy_inner_set(){
    local proxy="$2"

    case $proxy in
        https://*|http://*|socks*://*|ftp*://*)     ;;
        *)          
            proxy="http://$proxy"
            proxy_log info "Considered as $proxy"
            ;;
    esac
    case "$1" in
        http)
                export http_proxy="$proxy"
                export HTTP_PROXY="$proxy"
                printf "  SET http_proxy=%s\n" "$proxy"
                printf "  SET HTTP_PROXY=%s\n" "$proxy"
                ;;
        https)
                export https_proxy="$proxy"
                export HTTPS_PROXY="$proxy"
                printf "  SET https_proxy=%s\n" "$proxy"
                printf "  SET HTTPS_PROXY=%s\n" "$proxy"
                ;;    
        ftp)
                export ftp_proxy="$proxy"
                export FTP_PROXY="$proxy"
                printf "  SET ftp_proxy=%s\n" "$proxy"
                printf "  SET FTP_PROXY=%s\n" "$proxy"
                ;;
        all)
                export all_proxy="$proxy"
                export ALL_PROXY="$proxy"
                printf "  SET all_proxy=%s\n" "$proxy"
                printf "  SET ALL_PROXY=%s\n" "$proxy"
    esac
}

___proxy_set(){
    param:void

    if [ "$#" -eq 0 ]; then
        printf "Current proxy setting:\n"
        printf "  http_proxy=%s\n" "$http_proxy"
        printf "  HTTP_PROXY=%s\n" "$HTTP_PROXY"
        printf "  https_proxy=%s\n" "$http_proxy"
        printf "  HTTPS_PROXY=%s\n" "$HTTPS_PROXY"
        printf "  ftp_proxy=%s\n" "$ftp_proxy"
        printf "  FTP_PROXY=%s\n" "$FTP_PROXY"
        printf "  all_proxy=%s\n" "$all_proxy"
        printf "  ALL_PROXY=%s\n" "$ALL_PROXY"
        return
    fi

    while [ "$#" -gt 0 ]; do
        case "$1" in
            http=*)         ______proxy_inner_set http "${1#http=}"   ;;
            https=*)        ______proxy_inner_set https "${1#https=}" ;;
            ftp=*)          ______proxy_inner_set ftp "${1#ftp=}"     ;;
            all=*)          ______proxy_inner_set all "${1#all=}"     ;;
            *)              
                proxy_log info "Considered as :"
                ______proxy_inner_set http  "http://$1"
                ______proxy_inner_set https "https://$1"
                ______proxy_inner_set ftp   "ftp://$1"
                ______proxy_inner_set all   "socks5://$1"
                ;;
        esac
        shift
    done
}

___proxy_unset(){
    param:void

    if [ "$#" -eq 0 ]; then
        ___proxy_unset http https ftp all
        return
    fi

    while true; do
        case "$1" in
            http)         
                printf "  UNSET http_proxy\n"
                printf "  UNSET HTTP_PROXY\n"
                export http_proxy=
                export HTTP_PROXY= ;;
            https)        
                printf "  UNSET https_proxy\n"
                printf "  UNSET HTTPS_PROXY\n"
                export https_proxy=
                export HTTPS_PROXY= ;;
            ftp)          
                printf "  UNSET ftp_proxy\n"
                printf "  UNSET FTP_PROXY\n"
                export ftp_proxy=
                export FTP_PROXY= ;;
            all)          
                printf "  UNSET all_proxy\n"
                printf "  UNSET ALL_PROXY\n"
                export all_proxy=
                export ALL_PROXY= ;;
            *)             
                break
        esac
        shift
    done
    
}

# EndSection

# Section: Backup & Rollback functions

# Backup the src_path(file or directory) to the dst_dir.
# @param1 src_path
# @param2 app_name
# example:
#   ___proxy_backup /etc/apt/sources.list apt
#   ___proxy_backup /etc/yum.repos.d yum
___proxy_backup() {
    local src_path 
    local app_name
    local dst_dir

    src_path="${1}"
    app_name="${2}"

    dst_dir="$___X_CMD_PROXY_BACKUP_DIR/$app_name/$(date +%Y%M%d_%0H%m%S)"
    mkdir -p "$dst_dir"

    proxy_log info "Backing up $src_path to $dst_dir"

    if [ -f "$src_path" ]; then
        cp "$src_path" "$dst_dir"
    elif [ -d "$src_path" ]; then
        cp -r "$src_path"/* "$dst_dir"
    else
        proxy_log error "Invalid src_path: $src_path"
    fi
}

# Rollback from the last backup file.
# @param1 dst_path
# @param2 app_name
# example:
#   ___proxy_rollback /etc/apt/sources.list apt
#   ___proxy_rollback /etc/yum.repos.d yum
___proxy_rollback() {
    local dst_path
    local app_name
    local bak_dir

    dst_path="${1}"
    app_name="${2}"
    bak_dir="${3}"

    if [ -n "$bak_dir" ]; then
        bak_dir="$___X_CMD_PROXY_BACKUP_DIR/$app_name/$bak_dir"
    else
        bak_dir="$___X_CMD_PROXY_BACKUP_DIR/$app_name"
        bak_dir="$bak_dir/$(ls -t "$bak_dir" | head -n 1)"
    fi

    if [ -d "$bak_dir" ]; then
        proxy_log info "Rollback from $bak_dir"
        \cp -r "$bak_dir"/* "$dst_path"
    else
        proxy_log info "No backup dir found in $bak_dir"
    fi
}

___proxy_rollback_ls() {
    local app_name
    app_name="$1"

    if [ -d "$___X_CMD_PROXY_BACKUP_DIR" ]; then
        local files
        files="$(ls -t "$___X_CMD_PROXY_BACKUP_DIR/$app_name")"
        if [ -n "$files" ]; then
            printf "%s" "$files"
        else
            proxy_log error "No backup file found."
            return 1
        fi
    else
        proxy_log error "No backup directory found."
        return 1
    fi
}

# EndSection
