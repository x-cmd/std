# shellcheck shell=sh
# shellcheck disable=SC2039,3043

# Synchronized token in the x-bash user profile.

# shellcheck disable=SC2120

___x_cmd_gh_token(){
    param:void
    local O="${O:-GITHUB_DEFAULT}"
    if [ $# -eq 0 ]; then
        ___x_cmd_gh_config_get "oauth_token"  || return 1
        return 0
      else
        [ $# -gt 1 ] && gh_log warn "Multiple tokens cannot be set at the same time,Set only the first token"
        local tmp_token
        tmp_token="$(___x_cmd_gh_config_get "oauth_token")"

        if [ "$1" = "$tmp_token" ]; then
            gh_log info "Consistent with the original token"
            return 0
        fi

        http "@___x_cmd_gh_$O" header put Authorization "token $1"
        ___X_CMD_GITHUB_DEFAULT_OWNER=
        local user
        user="$(___x_cmd_gh_current_owner)"
        if [ -z "$user" ]; then
            http "@___x_cmd_gh_$O" header put Authorization "token $tmp_token"
            gh_log error "set default token $1 fail,Please check if it is a valid token"
            return 1
        fi
        ___X_CMD_GITHUB_DEFAULT_OWNER=$user
        ___x_cmd_gh_config_set "oauth_token" "$1"
        ___x_cmd_gh_config_set "user" "$___X_CMD_GITHUB_DEFAULT_OWNER"
        ___x_cmd_ui_tf true "set default token successfully,The default user is $user"
        return 0
    fi

}

____x_cmd_gh_auth(){
    param:subcmd ____x_cmd_gh_auth                      \
        login:      "Authenticate with a GitHub host"   \
        logout:     "Log out of a GitHub host"          \
        status:     "View authentication status"        \
        setup-git:  "Configure git to use GitHub CLI as a credential helper"
    param:subcmd:try
    param:run

    gh_log warn "Subcmd Not Found."
    ____x_cmd_gh_auth _param_help_doc
    return 1
}

____x_cmd_gh_auth_permission(){
    printf "%s\n" "
user
gist
repo
workflow
delete_repo
delete:packages
write:packages
write:discussion
notifications
admin:org
admin:gpg_key
admin:org_hook
admin:repo_hook
admin:public_key
admin:enterprise
---
---"
}
____x_cmd_gh_auth_login(){
    param:void
    local client_id=3d0f25caedcc0e18c985
    local grant_type="urn:ietf:params:oauth:grant-type:device_code"
    ___x_cmd_ui_gridselect multiple ____x_cmd_gh_auth_permission
    local scope
    # TODO:table scope

    [ "$scope" = "all" ] && scope=" admin:public_key admin:repo_hook admin:org_hook gist notifications user delete_repo write:discussion admin:enterprise admin:gpg_key"

    http "@____x_cmd_login_GITHUB" header put "Accept" "application/json"
    http "@____x_cmd_login_GITHUB" post json "https://github.com/login/device/code" client_id="$client_id" scope="$scope" | (
        ___x_cmd_git_json_query_rename  device_code=.device_code user_code=.user_code verification_uri=.verification_uri
        gh_log info "Copy your one-time code:$user_code"
        http browse "$verification_uri"
        local gh_status="authorization_pending"
        local data
        local ___X_CMD_UI_FORM_EXIT_STRATEGY="execute|exit"
        ___x_cmd_ui_form "Please confirm whether the verification is completed" tf 1 = "yes" "no"
        [ "$tf" = "no" ] && return
        while [ "$gh_status" = "authorization_pending" ];do
            data="$(http "@____x_cmd_log_GITHUB" post json https://github.com/login/oauth/access_token client_id="$client_id" grant_type="$grant_type" device_code="$device_code")"
            ___x_cmd_git_json_query_rename "$data" gh_status=.error
            sleep 10
        done
    )
}