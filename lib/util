
___x_cmd_install_run(){
    param:dsl <<A
advise:
    #1          ___x_cmd_install_name
options:
    #1          "get software name list"
A
    param:run

    local YES=
    case "$1" in
        -y|--yes)       YES=1; shift
    esac

    local target
    if target="$(___x_cmd_install_get "${1:?Provide target}")"; then
        printf "Executing command:\n> \e[32;1m%s\e[0m\n\n" "$target" >&2
        if [ -n "$YES" ]; then
            eval "$target"
            return
        fi

        printf "Do you want to continue? Press y to continue, otherwise will abort: " >&2
        local ch
        read -r ch
        if [ "$ch" = y ]; then
            eval "$target"
        else
            printf "Abort becase received non y\n" >&2
            return 1
        fi
    fi
    shift
}

___x_cmd_install_which(){
    local cache="$___X_CMD_ROOT/.tmp/install/index.yml"
    if ___x_cmd_httpget_gitx x-cmd install main index.yml "$cache" "${___X_CMD_INSTALL_WHICH_UPDATE:--}"; then
        printf "%s" "$cache"
    else
        return 1
    fi
}

___x_cmd_install_ls(){
    param:void
    local CACHE

    if ! CACHE="$(___x_cmd_install_which)"; then
        printf "Cannot download file.\n" >&2
        return 1
    fi

    awk -v pat="${1:-""}" "${___X_CMD_ROOT_MOD}/install/lib/ls.awk" <"$CACHE"
}

___x_cmd_install_update(){
    param:void
    ___X_CMD_INSTALL_WHICH_UPDATE=0 ___x_cmd_install_which 1>/dev/null && printf "Update success.\n" >&2
}

___x_cmd_install_name(){
    local CACHE
    if ! CACHE="$(___x_cmd_install_which)"; then
        printf "Cannot download file." >&2
        return 1
    fi
    awk '
$0!~/^[ +#]/ && NF>0 {
    print substr($0,1,length($0)-1)
}
' <"$CACHE"
}

___x_cmd_install_get(){
    param:dsl <<A
advise:
    #1          ___x_cmd_install_name
options:
    #1          "get software name list"
A
    param:run

    local CACHE
    if ! CACHE="$(___x_cmd_install_which)"; then
        printf "Cannot download file." >&2
        return 1
    fi

    local data
    data="$(___x_cmd_install_ls "^${1:?Provide software name}$")"
    local cmd
    if cmd="$(printf "%s\n" "$data" | awk '
    $1~/^>/{
        $1="";
        cmd=$0;
        count = count + 1;
    }
    END{
        if (count == 1) {
            gsub(/^[ ]+/, "", cmd)
            gsub(/[ ]+$/, "", cmd)
            print cmd
            exit(0)
        } else {
            exit(1)
        }
    }
')";
    then
        printf "%s" "$cmd"
        return 0
    else
        printf "%s\n--------\n" "Found multiple commands" >&2
        printf "%s" "$data" >&2
        return 1
    fi
}

# EndSection