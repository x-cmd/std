# Author:           Li Junhao           l@x-cmd.com
# shellcheck        shell=bash          disable=SC2016          # xrc

x log init ccmd

xrc:mod ccmd/lib/help

# Check it again.
TMPDIR=${TMPDIR:-$(dirname "$(mktemp -u)")}

___X_CMD_CCMD_TMP_FOLDER="${TMPDIR%/}/x-cmd-path}"
mkdir -p "$___X_CMD_CCMD_TMP_FOLDER"

___x_cmd_ccmd(){
    local op="${1}"
    shift
    case "$op" in
        exec)                   ___x_cmd_ccmd_exec              "$@" ;;
        clear)                  ___x_cmd_ccmd_clear             "$@" ;;
        invalidate|-)           ___x_cmd_ccmd_invalidate        "$@" ;;

        setup)                  ___x_cmd_ccmd_setup             "$@" ;;
        teardown)               ___x_cmd_ccmd_teardown          "$@" ;;

        _x_cmd_advise_json)     ___x_cmd_ccmd_x_cmd_advise_json "$@" ;;
        ""|help)                ___x_cmd_ccmd_help              "$@" ;;

        *)                      ___x_cmd_ccmd_exec      "$op"   "$@" ;;
    esac
}

# Section: exection
___x_cmd_ccmd_exec(){
    if [ "$#" -eq 0 ]; then
        ___x_cmd_ccmd_help
        return 0
    fi

    local IFS
    local expiration
    local filepath

    while [ ! "$1" = -- ]; do
        if [ "$#" -eq 0 ]; then
            ___x_cmd_ccmd_help "PANIC: Expect -- and its following command\n" >&2
            return 64
        fi
        if [ -z "$expiration" ]; then
            expiration="$1"
        elif [ -z "$filepath" ]; then
            filepath="$1"
        else
            ___x_cmd_ccmd_help "More than 3 arguments before --."
            return 64 # EX_USAGE=64         # The command was used incorrectly, e.g., with the wrong number of arguments, a bad flag, a bad syntax in a parameter, or whatever.
        fi
        shift
    done

    shift

    expiration=${expiration:-1d}

    if ! ___x_cmd___ccmd_validate_time_format "$expiration"; then
        ___x_cmd_ccmd_help "PANIC: Expiration should match pattern n[dmwsh]." >&2
        return 65 # EX_DATAERR=65       # The input data was incorrect in some way. This should only be used for user's data and not system files.
    fi

    if [ -z "$filepath" ]; then
        filepath="${X_CMD_CACHE_STORAGE_FOLDER_PATH:-$___X_CMD_CCMD_TMP_FOLDER}"
        mkdir -p "$filepath"
        filepath="$filepath/$(___x_cmd_str_md5 "$*")"
    fi

    if find "$filepath" -mtime "-${expiration}" 2>/dev/null | grep -q ^; then
        ccmd:debug "Using cache in Cache Path: $filepath"
        cat "$filepath"
    else
        ccmd:debug "FILEPATH does't exists or older than ${expiration} second. Update"
        ccmd:debug "Caching command: $*"

        local TEMP_PATH="$filepath.x-bash.origin.ed15841d4fba5c1dba9045bcbfa0819a"
        if eval "$@" | tee "$TEMP_PATH"; then
            mv "$TEMP_PATH" "$filepath"
            return 0
        else
            local code=$?
            rm "$TEMP_PATH"
            return "$code"
        fi
    fi
}

___x_cmd___ccmd_validate_time_format(){
    # if [[ ! "$expiration" =~ ^[0-9]+[dmwsh]?$ ]]; then
    case "${1:?Provide time}" in
        *d|*m|*w|*s|*h)     [ "${1%.}" -gt 0 ] 2>/dev/null; return $? ;;
    esac
    return 1
}

___x_cmd_ccmd_invalidate(){
    local IFS

    local filepath="${X_CMD_CACHE_STORAGE_FOLDER_PATH:-$___X_CMD_CCMD_TMP_FOLDER}"
    filepath="$filepath/$(___x_cmd_str_md5 "$*")"

    ccmd:debug "$*"
    printf "%s\n" "$filepath"

    if [ -f "$filepath" ]; then
        rm "$filepath"
    fi
}

___x_cmd_ccmd_clear(){
    local FILEPATH="${X_CMD_CACHE_STORAGE_FOLDER_PATH:-$___X_CMD_CCMD_TMP_FOLDER}"
    rm -f "$FILEPATH/*"
}

# EndSection

# Section: object

# If you want a new environment for script
___x_cmd_ccmd_setup(){
    X_CMD_CACHE_STORAGE_FOLDER_PATH="${1:-"$(mktemp)"}"
    export X_CMD_CACHE_STORAGE_FOLDER_PATH
    mkdir -p "$X_CMD_CACHE_STORAGE_FOLDER_PATH"
}

# Remember teardown if you have setup
___x_cmd_ccmd_teardown(){
    xrc path
    path_rmrf_safe "$X_CMD_CACHE_STORAGE_FOLDER_PATH"
    unset X_CMD_CACHE_STORAGE_FOLDER_PATH
}

# EndSection


xrc setmain ___x_cmd_ccmd
