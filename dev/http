# shellcheck shell=bash

# Using object to make it right

# Using curl
# Using Object
# Provide Github Object, to help automate the github

@src std/dict
@src std/oo

. dict
. oo

http.new(){
    oo.create_new_function http "$@"
}

http.make(){
    dict.make "${1:?Provide name}"

    local O="$1"

    dict.put "url" "${2:?Provide url}"
    # O="$1" dict.put "header" "${3:?Provide default header}"
    # eval "export ${1:?Provide name}_header=()"

    # dict.make "$(http._name.qs)"
    # dict.make "$(http._name.body)"
    # dict.make "$(http._name.header)"
}

http.dict.get(){
    local O="${O:?Provide Name}"
}

http._name.qs(){
    echo "${O:?Provide name}_x-bash_http_qs"
}

http._name.body(){
    echo "${O:?Provide name}_x-bash_http_body"
}

http._name.header(){
    echo "${O:?Provide name}_x-bash_http_header"
}

http.header.add(){
    [ -z "$O" ] && return 1
    dict.put "header.${1:?header key}" "${2:?value}"
}

http.header.remove(){
    [ -z "$O" ] && return 1
    dict.remove "header.${1:?header key}"
}

http.header.dump(){
    [ -z "$O" ] && return 1
    DICT_PRINT_SEP=': ' dict.print | while read -r l; do
        [[ "$l" =~ ^header\.* ]] && echo "${l:7}"
    done
}

# put header
# remove header
# list header
http.header(){
    echo "$(http.header.dump)
$HEADER
"
}

http.header.content-type.eq(){
    http.header.add "Content-Type" "${1:?Content-Type candidates like application/json}"
}

http.header.content-type.eq.json+utf8(){ http.header.content-type.eq "application/json;charset=utf-8"; }
http.header.content-type.eq.json(){ http.header.content-type.eq "application/json"; }
http.header.content-type.eq.yml(){  http.header.content-type.eq "application/yml"; }
http.header.content-type.eq.text(){ http.header.content-type.eq "application/text"; }

http.header.referer.eq(){
    http.header.add "Referer" "${1:?Referer}"
}

http.header.agent.eq(){
    http.header.add "User-Agent" "${1:?User agent}"
}

http.dict_pget(){
    [ -z "$O" ] && return 1
    dict.get "${1:?Provide key}"
}

# X=put D='{}' http.request
http.request(){
    [ -z "$O" ] && return 1
    local URL=${URL:-$(http.dict_pget "url")}
    local X=${X:-$(http.dict_pget "method")}

    # Using other ways

    local HEADERS=${HEADER:-$(http.dict_pget "header")}
    local D=${D:-$(http.dict_pget "data")}
    local QS=${QS:-""}

    if [ -z "$QS" ]; then
        curl -H "${HEADERS[*]}" -x "$X" "$URL/$1"
    else
        curl -H "${HEADERS[*]}" -x "$X" "$URL/$1?$QS"
    fi
}

http.cd(){
    [ -z "$O" ] && return 1
    local URL=${URL:-$(http.dict_pget "url")}
    dict.put "url" "$URL/${1:?Provide url}"
}

# TODO: how to cd back

http.path(){
    local URL=${URL:-$(http.dict_pget "url")}
    echo "$URL"
}


http.qs.add(){
    [ -z "$O" ] && return 1
    dict.put "qs.${1:?header key}" "${2:?value}"
}

http.qs.remove(){
    [ -z "$O" ] && return 1
    dict.remove "qs.${1:?header key}"
}

http.qs.dump(){
    [ -z "$O" ] && return 1
    DICT_PRINT_SEP=': ' dict.print | while read -r l; do
        [[ "$l" =~ ^qs\.* ]] && echo "${l:3}"
    done
}

http.eq_str_by_name(){
    for i in "$@"; do
        echo "$i=${!i}"
    done
}

http.body.add(){
    [ -z "$O" ] && return 1
    dict.put "body.${1:?header key}" "${2:?value}"
}

http.body.add_by_name(){
    for i in "$@"; do
        http.body.add "$i" "${!i}"
    done
}

http.body.remove(){
    [ -z "$O" ] && return 1
    dict.remove "body.${1:?header key}"
}

http.body.dump(){
    [ -z "$O" ] && return 1
    DICT_PRINT_SEP=': ' dict.print
    # DICT_PRINT_SEP=': ' dict.print | while read -r l; do
    #     # [[ "$l" =~ ^body\.* ]] && echo "${l:5}"
    #     echo "1: $l"
    # done
}

# crud
http.post(){ X="post" http.request "$@"; }
http.get(){ X="get" http.request "$@"; }
http.put(){ X="put" http.request "$@"; }
http.delete(){ X="delete" http.request "$@"; }
