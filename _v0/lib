# shellcheck shell=sh disable=SC3043


# Section: scm-git

###
  # @description: set up folder info variables
###
## Set up help func
___x_cmd_theme_git_get_friendly_ref() {
    ___x_cmd_theme_git_get_branch || ___x_cmd_theme_git_get_tag || ___x_cmd_theme_git_get_short_sha
}

___x_cmd_theme_git_get_branch() {
    git symbolic-ref -q --short HEAD 2> /dev/null || return 1
}

___x_cmd_theme_git_get_tag() {
    git describe --tags --exact-match 2> /dev/null || return 1
}

___x_cmd_theme_git_get_short_sha() {
    git rev-parse --short HEAD 2> /dev/null
}

___x_cmd_theme_hg_get_friendly_ref() {
    hg branch 2>/dev/null
}

___x_cmd_theme_svn_get_friendly_ref() {
    #TODO: using awk
    svn info 2> /dev/null | grep '^URL:' | egrep -o '(tags|branches)/[^/]+|trunk'
}
# EndSection


# Section: scm-main
___x_cmd_theme_scm_git_bin(){
    printf "%s" "${___X_CMD_THEME_SCM_GIT_BIN:=$(command -v git)}"
}

___x_cmd_theme_scm_hg_bin(){
    printf "%s" "${___X_CMD_THEME_SCM_GIT_BIN:=$(command -v hg)}"
}

___x_cmd_theme_scm_svn_bin(){
    printf "%s" "${___X_CMD_THEME_SCM_GIT_BIN:=$(command -v svn)}"
}

## Set up common folder info variables
___x_cmd_theme_git_get_prompt_info_exe() {
    if [ -n "$___X_CMD_THEME_NO_CHECK_EXE" ] && [ "$___X_CMD_THEME_NO_CHECK_EXE" = true ]; then
        printf "NONE"
        return
    fi

    if [ -n "$(___x_cmd_theme_scm_git_bin)" ]; then
        if [ -f .git/HEAD ] || [ -n "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
            printf "git"
            return
        fi
    fi

    if [ -n "$(___x_cmd_theme_scm_svn_bin)" ]; then
        if [ -d .svn ] || [ -n "$(svn info --show-item wc-root 2>/dev/null)" ]; then
            printf "svn"
            return
        fi
    fi

    if [ -n "$(___x_cmd_theme_scm_hg_bin)" ]; then
        if [ -d .hg ] || [ -n "$(hg root 2>/dev/null)" ]; then
            printf "hg"
            return
        fi
    fi

    printf "NONE"
}

___x_cmd_theme_scm() {
    ___X_CMD_THEME_SCM_TYPE="$(___x_cmd_theme_git_get_prompt_info_exe 2>/dev/null)"

    case "$___X_CMD_THEME_SCM_TYPE" in
        git)        ___X_CMD_THEME_SCM_INFO="$(___x_cmd_theme_git_get_friendly_ref)";;
        hg)         ___X_CMD_THEME_SCM_INFO="$(___x_cmd_theme_hg_get_friendly_ref)" ;;
        svn)        ___X_CMD_THEME_SCM_INFO="$(___x_cmd_theme_svn_get_friendly_ref)" ;;
        *)          ___X_CMD_THEME_SCM_TYPE= ;;
    esac
}

___x_cmd_theme_get_git_repo_name() {
  local repo_path
  repo_path="$(git rev-parse --show-toplevel 2>/dev/null)"
  if [ -n "$repo_path" ]; then
    printf ${repo_path##*/}
  fi
}

___x_cmd_theme_is_git_dirty() {
    local _status
    _status="$(git status --porcelain --ignore-submodules=dirty 2> /dev/null | tail -1)"
    if [ -n "$_status" ]; then
        printf 'true'
    fi
}
# TODO:
___x_cmd_theme_is_hg_dirty() {
    local _status
    _status="$(hg status 2>/dev/null)"
    if [ -n "$_status" ]; then
        printf 'true'
    fi
}
# EndSection


# Section: loader main function
# shellcheck disable=SC2034
______x_cmd_theme_prompt_format_wrapper(){
    ___X_CMD_THEME_USER="$1"
    # Path
    ___X_CMD_THEME_PATH="$2"
    ___X_CMD_THEME_FULL_PATH="$3"

    # Date
    ___X_CMD_THEME_DATE="$4"
    ___X_CMD_THEME_TIME_H_M_S="$5"
    ___X_CMD_THEME_TIME_H12_M_S="$6"
    ___X_CMD_THEME_TIME_H_M="$7"
    ___X_CMD_THEME_TIME_H12_M="$8"

    # Host
    ___X_CMD_THEME_HOST="$9"
    ___X_CMD_THEME_FULL_HOST="${10}"

    ___x_cmd_theme_prompt_format
}

# load theme file
___x_cmd_theme_load_format() {
    if [ -z "${___X_CMD_THEME_NAME}" ]; then
        ___X_CMD_THEME_NAME='ys'
    fi

    . "${1:?Provide theme file}"
    # TODO: config which envrinonments to pass

    if [ -n "$ZSH_VERSION" ]; then
        setopt PROMPT_SUBST
        # PROMPT interprete %n... after evaluation.
        PROMPT='$(___X_CMD_THEME_EXIT_STATUS="$?" ___x_cmd_theme_prompt_format)'
    else
        # PS1 interprete \u before evaluation.
        PS1="\$(___X_CMD_THEME_EXIT_STATUS=\"\$?\" ______x_cmd_theme_prompt_format_wrapper \"\u\" \"\W\" \"\w\" \"\d\" \"\t\" \"\T\" \"\A\" \"\@\" \"\h\" \"\H\")"
    fi
}
# EndSection


