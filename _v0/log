# shellcheck shell=sh disable=SC3043

# Section: log
XRC_LOG_COLOR=1
XRC_LOG_TIMESTAMP=      # "+%H:%M:%S"      # Enable Timestamp.
___x_cmd_logger(){
    local logger="${O:-DEFAULT}"
    local IFS=
    local level="${1:?Please provide logger level}"
    local FLAG_NAME=${FLAG_NAME:?WRONG}

    local color="\e[32;2m"
    local level_code=0
    case "$level" in
        debug|DEBUG|verbose)    level="DBG";    shift ;;
        info|INFO)              level="INF";    level_code=1;   color="\e[36m";     shift ;;
        warn|WARN)              level="WRN";    level_code=2;   color="\e[33m";     shift ;;
        error|ERROR)            level="ERR";    level_code=3;   color="\e[31m";     shift ;;
        *)                      level="DBG"     ;;
    esac

    eval "[ $level_code -lt \"\${$FLAG_NAME:-1}\" ]" && return 0

    local timestamp=
    [ -n "$XRC_LOG_TIMESTAMP" ] && timestamp=" [$(date "${XRC_LOG_TIMESTAMP}")]"

    if [ -n "$XRC_LOG_COLOR" ]; then

        if [ $# -eq 0 ]; then
            printf "${color}%s[%s]${timestamp}: " "$logger" "$level"
            cat | awk 'NR==1{ print($0) }; NR>=2{ print("> " $0); }; END{ printf("%s", "\033[0m"); }'
        else
            printf "${color}%s[%s]${timestamp}: %s\e[0m\n" "$logger" "$level" "$*"
        fi
    else
        if [ $# -eq 0 ]; then
            printf "%s[%s]${timestamp}: " "$logger" "$level"
            cat | awk 'NR==1{ print($0) }; NR>=2{ print("> " $0); }; }'
        else
            printf "%s[%s]${timestamp}: %s\n" "$logger" "$level" "$*"
        fi
    fi >&2
}
# EndSection


# Section: logctl consider extracting it into individual repository
___x_cmd_log() {
    if [ $# -eq 0 ]; then
        cat >&2 <<A
xrc log     log control facility
    Usage:
        xrc log init [ module ]
        xrc log [... +module | -module | module/log-level ]
Subcommand:
    init <module>:                  Generate function '<module>_log'
    timestamp < on | off | <format> >:
                                    off, default setting. shutdown the timestamp output in log
                                    on, default format is +%H:%M:%S
                                    <format>, customized timestamp format like "+%H:%M:%S", "+%m/%d-%H:%M:%S"
Example:
    Enable debug log for module json:
            xrc log +json          or   xrc log json
            xrc log json/verbose   or   xrc log json/v
            xrc log json/debug     or   xrc log json/d
    Dsiable debug log for module json:
            xrc log -json
            xrc log json/info
A
                    return 1
    fi
    local var
    local level_code=0

    case "$1" in
        init)
            shift;
            for i in "$@"; do
                var="$(echo "XRC_LOG_LEVEL_${i}" | tr "[:lower:]" "[:upper:]")"
                eval "${i}_log(){     O=$i FLAG_NAME=$var    ___x_cmd_logger \"\$@\";   }"
            done
            return 0 ;;
        timestamp)
            case "$2" in
                on)     XRC_LOG_TIMESTAMP="+%H:%M:%S";      return 0   ;;
                off)    XRC_LOG_TIMESTAMP= ;                return 0   ;;
                *)      printf "Try customized timestamp format wit date command:\n"
                        if date "$2"; then
                            XRC_LOG_TIMESTAMP="$2"
                            return 0
                        fi
                        return 1    ;;
            esac
    esac

    local level
    while [ $# -ne 0 ]; do
        case "$1" in
            -*) var="$(echo "XRC_LOG_LEVEL_${1#-}" | tr "[:lower:]" "[:upper:]")"
                eval "$var=1"
                xrc_log info "Level of logger [${1#-} is set to [info]" ;;
            +*) var="$(echo "XRC_LOG_LEVEL_${1#+}" | tr "[:lower:]" "[:upper:]")"
                eval "$var=0"
                xrc_log info "Level of logger [${1#+}] is set to [debug]" ;;
            *)
                level="${1#*/}"
                var="${1%/*}"
                case "$level" in
                    debug|dbg|verbose|v)        level=debug;    level_code=0 ;;
                    info|INFO|i)                level=info;     level_code=1 ;;
                    warn|WARN|w)                level=warn;     level_code=2 ;;
                    error|ERROR|e)              level=error;    level_code=3 ;;
                    none|n|no)                  level=none;     level_code=4 ;;
                    *)                          level=debug;    level_code=0 ;;
                esac
                xrc_log info "Level of logger [$var] is set to [$level]"
                var="$(echo "XRC_LOG_LEVEL_${var}" | tr "[:lower:]" "[:upper:]")"
                eval "$var=$level_code" ;;
        esac
        shift
    done
}
# EndSection

# shellcheck disable=SC3010,SC2154
___x_cmd_log_completer(){
    if [ "$cur" = "" ]; then
        echo "+"
        echo "-"
        ls "$___X_CMD_ROOT" | grep -v BASE64  | awk '{ print $0 "/"; }'
        # echo "$___X_CMD_XRC_MODULE_IMPORTED"  | awk '{ print $0 "/"; }'
    elif [[ "$cur" = */* ]]; then
        echo "${cur%/*}/debug"
        echo "${cur%/*}/verbose"
        echo "${cur%/*}/warn"
        echo "${cur%/*}/error"
    elif [[ "$cur" =~ ^\+ ]]; then
        ls "$___X_CMD_ROOT" | grep -v BASE64 | awk '{ print "+" $0; }'
    elif [[ "$cur" =~ ^\- ]]; then
        ls "$___X_CMD_ROOT" | grep -v BASE64 | awk '{ print "-" $0; }'
    else
        ls "$___X_CMD_ROOT" | grep -v BASE64 | awk -v cur="$cur" '
            BEGIN { arr_len=0; }
            $0~"^"cur{
                arr_len += 1
                arr[arr_len] = $0;
                if ( $0 !~ /\/$/ ) arr[arr_len] = arr[arr_len] "/"
            }
            END {
                if (arr_len != 1) {
                    for (i=1; i<=arr_len; ++i) print arr[i]
                } else {
                    # It is useful! The completion seemed to pause before "/"
                    print arr[1] "verbose"
                    print arr[1] "debug"
                    print arr[1] "warn"
                    print arr[1] "error"
                }
            }
        '
    fi

}

