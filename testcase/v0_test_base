# shellcheck shell=sh disable=SC2039,SC2142,SC3043

___X_CMD_XRC_MODULE_IMPORTED=
x log param xrc dict
xrc param/v0
xrc assert

############################
# Section 1: define functions for param testcases
############################

param_type_unset    paramtest

# param_type    paramtest     mline_arg_type  "=~"  "[A-Za-z0-9_\\n]+"
param_type    paramtest     access          "="   "private"         "public"          "inner-public"
param_type    paramtest     url_type        "=~"  "https?://.+"
param_type    paramtest     atlist_type     "=~"  "[-0-9,]+"

paramtest(){
    param:plugin    "paramtest"
    param:scope     "paramtest/$O"
    param:dsl  <<A
subcommand:
    option|op-test  "Test option"
    subcmd          "Test subcommand"
    marg            "Test multiple argement"
    rarg            "Test rest argement"
    namelist        "Test name list"
    snl             "Test small name list"
    advise_null     "Test advise null"
options:
    --candi_null    "Test null option to use candidate"  <candi_null>:candis="abc"        =  abc  cde     def
A
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        echo "candi_null: $candi_null"
        echo "rest argument $1"
        return 0
    fi

    paramtest_"${PARAM_SUBCMD}" "$@"
}

test_advise_json(){
    assert_stdout "X_CMD_ADVISE_FUNC_NAME=paramtest paramtest _x_cmd_advise_json" <<A
{
  "--candi_null": [ "abc", "cde", "def" ],
  "option|op-test": {
    "--mul_line_arg|-m|r": [  ],
    "--regex_arg1": [  ],
    "--regex_arg2": [  ],
    "--repo|-r|r": [  ],
    "--repo2|-b|m|1": [ "abc", "cde", "def" ],
    "--repo2|-b|m|2": [  ],
    "--priviledge|-p": [ "private", "public" ],
    "--no_type_arg|-n": [  ],
    "--flag1|-f": null,
    "--flag1222|-g": null,
    "#222222": [  ],
    "#3": [  ],
    "repo": "list_repo all",
    "#1": "list_repo"
  },
  "subcmd": {
    "sscmd1|s1|s-s1|longlongsubcommand": {
      "--ss1_opt1|-s": null,
      "--ss1_opt2|-d": null,
      "--ss1_opt3|-f": null
    },
    "sscmd2": null
  },
  "marg": {
    "--card|-c|mr|1": [  ],
    "--card|-c|mr|2": [  ],
    "--card|-c|mr|3": [  ]
  },
  "rarg": {
    "#1": [  ],
    "#2": [  ],
    "#3": [  ],
    "#4": [  ],
    "#5": [  ]
  },
  "namelist": {
    "--repo|-r|r": [  ],
    "--repo2|-b|m|1": [ "abc", "cde", "def" ],
    "--repo2|-b|m|2": [  ],
    "--priviledge|-p": [ "private", "public" ],
    "--no_type_arg|-n": [  ],
    "--flag1|-f": null,
    "--flag1222|-g": null,
    "#3|--regex_arg2": [  ],
    "#2|--regex_arg1": [  ],
    "repo": "list_repo all",
    "#1|--mul_line_arg|-m": "list_repo"
  },
  "snl": {
    "#1|--org": [  ]
  },
  "advise_null": {
  }
}
A
}

test_help(){

    # TESTCASE: error help
    echo "======== test option wasn't expected ============="
    paramtest --not_exist_flag
    paramtest -acvP
    paramtest option --not_exist_flag
    paramtest --not_exist_option ccc
    paramtest option --not_exist_option ccc
    echo "======== test require argument help ============="
    paramtest option --mul_line_arg
    echo "============= test unmatch help ================="
    paramtest option --mul_line_arg dd -r abcdd
    paramtest option --mul_line_arg dd -r abc --repo2 abcdd

    # TESTCASE: common help
    echo "=========== paramtest --help =============="
    paramtest --help
    echo "======= paramtest option --help ============"
    paramtest option --help
    echo "======= test_long_option --help ============"
    test_long_option --help
    echo "======= paramtest name list --help ============"
    paramtest namelist --help
    echo "======== paramtest subcmd --help ==============="
    paramtest subcmd --help
    echo "======== paramtest rest arg --help ========="
    paramtest rarg --help
    echo "======================="
}

param_type    gitee     repo    "=~"   "[-A-Za-z0-9_]+"

gt_repo_info() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #1|--dddd     "Provide repo"      <>:repo3 =~ [-A-Za-z0-9_]+
'
    param:run

    echo "===== $1 ====="
}

gt(){
    param:dsl       '
subcommand:
    org                                     "manage org"
'
    param:run
    if [ -z "${PARAM_SUBCMD}" ]; then
        echo "Command Not Found. Show help." >&2
        return 0
    fi
    gt_${PARAM_SUBCMD}  "$@"
}

gt_org(){
    param:scope     "gitee/$O"
    param:dsl       '
subcommands:
    repo                    "List all repos"
'
    param:run
    echo "$1 ++++++++++ $PARAM_SUBCMD"
    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log error "Command Not Found. Show help."
        return 0
    fi

    "gt_org_${PARAM_SUBCMD}" "$@"
}

# FIXME: We should ask some questions to get the $1
# gt_repo_info

start_test() {
    < "$1" awk '$0~/^test_[^\(]+\(\)/{ gsub(/\(\)\{/, "", $0); print $0 }' | while read -r line; do
        echo "Testing Function: $line"
        if ! eval "$line"; then
            printf "\033[0;31m======= Fail at function: %s \033[0m" "$line" >&2
            break
        fi
    done
}

# test_ui

# FIXME: All char was merge when in regex ui.
# FIXME: The color was no close

. ./testcase/v0_test_option
. ./testcase/v0_test_long_option
. ./testcase/v0_test_namelist
. ./testcase/v0_test_subcmd
. ./testcase/v0_test_param_default
. ./testcase/v0_test_ui

start_test ./testcase/v0_test_option
start_test ./testcase/v0_test_namelist
start_test ./testcase/v0_test_subcmd
start_test ./testcase/v0_test_param_default
start_test ./testcase/v0_test_base