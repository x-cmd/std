# shellcheck shell=sh disable=SC3043

___x_cmd_readlink_recursive(){
    if [ -L "${1:?Provide link}" ]; then
        local next_link
        next_link="$(readlink "${1}")" || return
        if [ "${next_link#/}" = "$next_link" ]; then
            next_link="$(dirname "${1}")/$next_link"
        fi
        ___x_cmd_readlink_recursive "$next_link"
    else
        [ ! -e "${1}" ] && return 1        # File Not Exists
        printf "%s" "$1"
    fi
}

___x_cmd_list_resource(){
    :
}


# Section : Unfinished ___x_cmd_official_which

# TODO: optimization. Consider sharing the big binary in a common folder.
# But that will introduce risk.
# How?
# 1. Local user $HOME/.x-cmd
# 2. Global sharing folder.
# Consider using the sha512 to calculate the file hash for this purpose.

___x_cmd_official_which(){
    X_CMD_SRC_PATH="$HOME/.x-cmd"
    local target="${1:-Provide target path}"
    local cache="$X_CMD_SRC_PATH/$target"

    local target2="${target#@}"
    if [ "$target2" != "$target" ]; then
        target=target2
        cache="$X_CMD_SRC_PATH/___users/$target"
        echo "Not supported yet." >&2
        return 1
    fi

    if CACHE="$cache" ___x_cmd_curl_gitx "$target" <<A
$(___x_cmd_mirror)
A
    then
        :
    fi

}

# EndSection

# Section : run by file: get_engine_by_file* and run_by_file*

___xrc_run(){
    local ___xrc_run_filepath="${1:?filepath}";        shift
    xrc "$___xrc_run_filepath"
    local ___xrc_module_name="${___xrc_run_filepath##*/}"

    if command -v "___x_cmd_${___xrc_module_name}"; then
        "___x_cmd_${___xrc_module_name}" "$@"
    elif command -v "${___xrc_module_name}"; then
        "${___xrc_module_name}" "$@"
    else
        cat 2>/dev/null <<A
File not containing function: $___xrc_module_name
Exit without execute: $___xrc_module_name "$@"
A
        return 1
    fi
}

___x_cmd_xrc_run()(
    ___xrc_run "$@"
)

___x_cmd_run_with_engine(){
    local engine="${1:?Please provide engine}";
    local filepath="${2:?Please provide filepath}";        shift 2
    case "$engine" in
        x-bash)     ___x_cmd_xrc_run "$filepath" "$@";;
        7z)         ___x_cmd_main 7z x "$filepath" "$@"      ;;
        *)          ___x_cmd_main "$engine" "$filepath" "$@" ;;
    esac
}

___x_cmd_get_engine_by_file_header(){
    local filepath="${1:?Please provide filepath}"; shift
    case "$(head -n1 "$filepath")" in
        *python*)       printf "%s" python          ;;
        *perl*)         printf "%s" perl            ;;
        *ruby*)         printf "%s" ruby            ;;
        *node*)         printf "%s" node            ;;
        *ts*)           printf "%s" ts              ;;

        *bash*)         printf "%s" bash            ;;
        *zsh*)          printf "%s" zsh             ;;
        *fish*)         printf "%s" fish            ;;
        *ksh*)          printf "%s" ksh             ;;

        *sh*)           printf "%s" sh              ;;
        *)              return 127
    esac
}

___x_cmd_run_by_file_header(){
    local filepath="${1:?filepath}"; shift
    local engine
    if engine="$(___x_cmd_get_engine_by_file_header "$filepath")"; then
        ___x_cmd_run_with_engine "$engine" "$filepath" "$@"
    fi
}

___x_cmd_get_engine_by_file_ext(){
    local filepath="${1:?filepath}"; shift
    local ext="${filepath##*.}"
    case "$ext" in
        "$filepath")    return 126                  ;;
        py)             printf "%s" python          ;;
        pl)             printf "%s" perl            ;;
        rb)             printf "%s" ruby            ;;
        js)             printf "%s" node            ;;
        ts)             printf "%s" ts              ;;

        7z)             printf "%s" 7z              ;;

        bash)           printf "%s" bash            ;;
        zsh)            printf "%s" zsh             ;;
        fish)           printf "%s" fish            ;;
        ksh)            printf "%s" ksh             ;;
        sh)             printf "%s" sh              ;;

        *)              return 126                  ;;
    esac
}

___x_cmd_run_by_file_ext(){
    local filepath="${1:?filepath}"; shift
    local engine
    if engine="$(___x_cmd_get_engine_by_file_ext "$filepath")"; then
        ___x_cmd_run_with_engine "$engine" "$filepath" "$@"
    fi
}

___x_cmd_get_engine_by_file(){
    local filepath="${1:?filepath}"
    ___x_cmd_get_engine_by_file_ext "$filepath" || ___x_cmd_get_engine_by_file_header "$filepath"
}

___x_cmd_run_by_file(){
    local filepath="${1:?filepath}"; shift

    if [ -L "$filepath" ]; then
        filepath="$(___x_cmd_readlink_recursive "$filepath")"
        filepath="$(___x_cmd_abspath "$filepath")"
    fi

    if [ -x "$filepath" ]; then
        "$filepath" "$@"
        return
    fi

    local engine
    if engine="$(___x_cmd_get_engine_by_file "$filepath")"; then
        ___x_cmd_run_with_engine "$engine" "$filepath" "$@"
    else
        ___x_cmd_run_with_engine x-bash "$filepath" "$@"
    fi
}

# EndSection

# Section : utils

___x_cmd_abspath(){
    local target_path="${1:-Please provide path}"
    # $(dirname "$filepath")/
    if [ "${target_path#/}" = "${target_path}" ]; then
        printf "%s" "$(cd "$(dirname "$target_path")" && pwd)/$(basename "$target_path")"
    else
        printf "%s" "$target_path"
    fi
}

# EndSection

# Section : Find And Execute at .x-cmd folder

___x_cmd_exe_workspace(){
    local filepath="${1:?filepath}"
    if [ -L "$filepath" ]; then
        local target_path
        target_path="$(___x_cmd_readlink_recursive "$filepath")"
        target_path="$(___x_cmd_abspath "$target_path")"
    fi

    # TODO: notice. Filepath should be colorized and emphasized.
    # TODO: Hit enter twise will ignore this. But really, should we add this protection?
    if [ -z "$X_DISABLE_WORKSPACE_EXECUTION_CONFIRMATION" ]; then
        while true; do
            printf "%s" \
"=> Running file: $filepath ?
=> Enter or press y to continue, n to abort. default is y: "

            read -r action
            case $action in
                n|no|nein|ne)  cat >&2 <<A
=> You could run the file by yourself:
\033[32m    x \"$filepath\" \033[;0m
A
                    return 1
                    ;;
                ""|y)            printf "%s\n" "";     break ;;
            esac
        done
    fi

    shift
    if [ -x "$filepath" ]; then
        "$filepath" "$@"
        local code=$?
        # Bad interpreter
        if [ $code != 126 ] && [ $code != 127 ]; then
            ___x_cmd_run_by_file_ext "$filepath" "$@"
            return
        fi
    fi

    ___x_cmd_run_by_file "$filepath" "$@"
    if [ $? = 126 ]; then
        cat >&2 <<A
Cannot find out how to execute the file: "$filepath". Please specify the execution engine. For more information, consult 'x help'
A
    fi

}

# EndSection

# Section : utilties in static-build

# _x_xrc_static_run(){
#     local name=$1;  shift
#     xrc static-build
#     static_build_xrc "$name"
#     "_${name}_bin" "$@"
# }

___x_cmd_jq(){
    xrc static-build && static_build_init jq jq ___x_cmd_jq && ___x_cmd_jq          "$@"
}

___x_cmd_bw(){
    xrc static-build && static_build_init bandwhich bandwhich ___x_cmd_bw && ___x_cmd_bw          "$@"
}

___x_cmd_exa(){
    xrc static-build && static_build_init exa exa ___x_cmd_exa && ___x_cmd_exa      "$@"
}

___x_cmd_dust(){
    xrc static-build && static_build_init dust dust ___x_cmd_dust && ___x_cmd_dust  "$@"
}

___x_cmd_procs(){
    xrc static-build && static_build_init procs procs ___x_cmd_procs && ___x_cmd_procs  "$@"
}

___x_cmd_bat(){
    xrc static-build && static_build_init bat bat ___x_cmd_bat && ___x_cmd_bat      "$@"
}

# EndSection

# Section : Runtime, future using xenv module

# . _v0/node
# . _v0/python

# node: node v12 and above, x using v16
# python: v3.6 and above, python using v14

# EndSection

# Section : xaas

# queue
# cron

# EndSection

# Section : x main function

___x_cmd_var(){
    local _______variable_name="${1%=}"
    if [ "$#" -eq 1 ]; then
        eval printf "%s" "\"\$$_______variable_name\""
        return
    fi

    local result
    shift 1
    result="$("$@")"
    eval "$_______variable_name=\"\$result\""
}

___x_cmd_shell_exec(){
    local shell="${1:?Provide shell}"
    shift
    if [ -x "/bin/$shell" ]; then
        # "/bin/$shell" $X_CMD_SRC_PATH/boot && . "$@"
        "/bin/$shell" "$@"
    elif [ -x "/usr/bin/$shell" ]; then
        # "/usr/bin/$shell" $X_CMD_SRC_PATH/boot && . "$@"
        "/usr/bin/$shell" "$@"
    else
        command "$shell" "$@"
    fi
}

___x_cmd_ls(){
    case "$1" in
        @*|*@*/*)
            ___x_cmd_file_ls "$@"
            return
            ;;
    esac
    ___x_cmd_exa        "$@"
}


___x_cmd_main(){
    local subcmd=$1;    shift 2>/dev/null
    case "$subcmd" in
        ""|help)                                printf "%s" "Show help" >&2; return 1 ;;
        boot)                                   ( xrc x-cmd/_v0/boot && ___x_cmd_boot "$@"; ) ;;
        *=)                                     ___x_cmd_var "$subcmd" "$@" ;;
        i|install)                              xrc install/v0 && ___x_cmd_install "$@" ;;

        login)                                  ( xrc hub/v0 && ___x_cmd_hub login "$@" ) ;;
        register)                               ( xrc hub/v0 && ___x_cmd_hub register "$@" ) ;;
        token)                                  ( xrc hub/v0 && ___x_cmd_hub token "$@" ) ;;
        hub)                                    ( xrc hub/v0 && ___x_cmd_hub "$@" ) ;;

        log)                                    xrc x-cmd/_v0/log && ___x_cmd_log "$@" ;;

        upgrade)    eval "$(curl https://get.x-cmd.com/script)" ;;
        clear)      if ! grep "___x_cmd_http_get()" "$___X_CMD_ROOT/xrc/v0" >/dev/null 2>&1; then
                        xrc_log debug "'$___X_CMD_ROOT/xrc/v0' NOT found. Please manually clear cache folder: $___X_CMD_ROOT"
                        return 1
                    fi
                    rm -rf "$___X_CMD_ROOT" ;;
        reinstall)  xrc clear && RELOAD=1 xrc upgrade ;;

        z)                                      (   xrc zuz && zuz z "$@"   ) ;;
        uz)                                     (   xrc zuz && zuz uz "$@"  ) ;;

        ubu|alp|deb|cen|bus)                    (   xrc xdk && xdk "$subcmd" "$@" ) ;;
        docker|dk|xdk)                          (   xrc xdk && xdk "$@" )   ;;
        sh|bash|zsh|fish|ksh|dash|ash)          ___x_cmd_shell_exec "$subcmd" "$@" ;;

        jar)                                    java -jar "$@" ;;
        java)                                   java "$@" ;;

        pip|pip3)                               xrc x-cmd/_v0/python && ___x_cmd_pip3 "$@" ;;
        python|py|python3|py3)                  xrc x-cmd/_v0/python && ___x_cmd_python3 "$@" ;;

        nvm)                                    xrc nvm/v0;     nvm "$@" ;;
        javascript|js|node)                     xrc x-cmd/_v0/node && ___x_cmd_node "$@" ;;
        npm)                                    xrc x-cmd/_v0/node && ___x_cmd_npm "$@" ;;
        npx)                                    xrc x-cmd/_v0/node && ___x_cmd_npx "$@" ;;
        ts)         local arg
                    local argstr
                    while [ $# -ge 0 ]; do
                        case "$arg" in
                            -*)     argstr="$argstr $arg"   ;;
                            *)      break
                        esac
                    done
                    local script
                    # script="$(___x_cmd_official_which "$1")"
                    script="$1"
                    shift
                    x npx @typeshell/exec "$argstr" "$script" "$@"
                    ;;
        ruby|rb)                                ruby "$(___x_cmd_official_which "$2")" "$@"      ;;
        lua)            ;;

        7zr)                                    ( xrc p7zr/v0   &&  p7zr "$@" )     ;;
        7z)                                     ( xrc p7z/v0    &&  p7z "$@" )      ;;
        ls)                                     ___x_cmd_ls         "$@"             ;;
        ll)                                     ___x_cmd_exa  -l    "$@"             ;;
        ps)                                     ___x_cmd_procs      "$@"             ;;
        du)                                     ___x_cmd_dust       "$@"             ;;
        cat)                                    ___x_cmd_bat        "$@"             ;;
        bw)                                     ___x_cmd_bw         "$@"             ;;
        jq)                                     ___x_cmd_jq         "$@"             ;;

        run)                                    ___x_cmd_run_by_file "$@"            ;;
        search_path)                            ___x_cmd_search_path "$@"            ;;
        which|w)    local p
                    for p in "$@"; do
                        if ! p=$(___x_cmd_which_one "$p"); then
                            printf "%s\n" "Fail to find path for $p" >&2
                            return
                        else
                            printf "%s\n" "$p"
                        fi
                    done
                    ;;
        _x_cmd_advise_json)                     ___x_cmd_x_cmd_advise_json "$@" ;;
        *)
                    local p
                    if p="$(___x_cmd_which_one "$subcmd")"; then
                        ___x_cmd_run_by_file "$p" "$@" # 2>/dev/null
                        return
                    else
                        printf "%s" "Error" >&2
                    fi
                    printf "%s" "$p"
    esac
}

# EndSection

___x_cmd_x_cmd_advise_json(){
    cat <<A
{
    "update|u": {},
    "upgrade": {},
    "reinstall": {},

    "initrc": {
        "cat": null
        "which|w": null,
        "mod": {
            "add|+": null,
            "del|-": "x initrc mod ls",
            "ls": null
        }
    },

    "log": {
        "init": {},
        "timestamp": {
            "on": {},
            "off": {}
        },
        "#n": "___x_cmd_log_completer"
    },

    "z": null,
    "uz": null,
    "ubu|alp|deb|cen|bus": null,
    "docker|dk|xdk": null,
    "nvm": null,
    "pip|pip3": null,
    "python|py|python3|py3": null,
    "javascript|js|node": null,
    "npm":  null,
    "ts": null,
    "ruby|rb": null,
    "lua": null,
    "ruby|rb": null,
    "jq": null,
    "ls|ll": null,
    "ps|procs": null,
    "install": {
        "ls": null,
        "get": "x install ls",
        "#1": "x install ls"
    },
    "#1": "___x_cmd_list_resource",
    "#n": "___advise_get_result '' 1"
}
A
    return 126
}

x(){
    ___x_cmd_main "$@"
}

if [ -z "$XRC_NO_ADVISE" ] && [ -n "${BASH_VERSION}${ZSH_VERSION}" ] && [ "${-#*i}" != "$-" ]; then
    xrc advise/v0
    advise x
fi

