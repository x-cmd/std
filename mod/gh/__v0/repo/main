# shellcheck shell=sh
# shellcheck disable=SC2039,3043

# ___x_cmd_gh_xrc repo/member repo/page repo/pr repo/release repo/tag

___x_cmd_gh_repo(){
    param:scope     "github/$O"
    param:dsl       '
subcmd:
    create          "create repo"
    ls              "list repo of owner"
    info            "Show detailed information of repo"
    del             "Remove repo"
    clear           "clear repo"
    issue           "get repo issue"
    release         "release"
    review          "review repo"
'
    # new             "new repo client"
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        gh_log error "Command Not Found. Show help."
        return 0
    fi
    
    "___x_cmd_gh_repo_${PARAM_SUBCMD}" "$@" 
}

# arguments NAME
___x_cmd_gh_repo_create() {
    local O="${O:-GITHUB_DEFAULT}"

    param:scope     "github/$O"
    param:dsl       '
type:
    access  =   private public
option:
    --access                "private,public"                <>:RepoVisibility=private
    --description           "description"                   <>=""
    --homepage              "homepage"                      <>=""
    --no_issues             "Provide issue"
    --no_wiki               "Provide wiki"
    --no_comment            "Provide can_comment"
    --no_auto_init          "auto init README"
    --sw                    "Optional facility"             <>=""   =,  wiki    -wiki   comment  -comment   issue -issue
    --gitignore_template    "Git Ignore"                    <>:Ignore=" "
    --license_template      "license"                       <>:License=" "
    --paths                 "repo path"                     <>:URL=""
    #n                      "repo names"
'

    param:run

    local private
    case "$access" in
        public)     private=false ;;
        private)    private=true ;;
    esac

    local has_issues=true
    local has_wiki=true
    local can_comment=true
    local auto_init=true
    [ -n "$no_issues" ] &&      has_issues=false
    [ -n "$no_wiki" ] &&        has_wiki=false
    [ -n "$no_comment" ] &&     can_comment=false
    [ -n "$no_auto_init" ] &&   auto_init=false

    [ $# -eq 0 ] && gh_log info "repo create name is null" && return
    local name
    for name in "$@"; do
        {
            local data repo_id url repo_owner
            data=$(___x_cmd_gh_post_json "/v5/user/repos" name="${name##*/}" description homepage has_issues has_wiki can_comment \
            auto_init gitignore_template license_template path="$paths" private 2>/dev/null)
            ___json_awk_get repo_id=.id url=.html_url repo_owner=.owner.login <<A
            $data
A
            if [ -n "$repo_id" ];then
                ui tf "true" "Creating repo $name success" "repo_id:$repo_id" "url:$url" "repo_owner:$repo_owner" 
            else
                gh_log error "Creating repo failure: $name. Code is $code. " 
            fi
        }
    done
}

# ORGANIZATION NAME
# shellcheck disable=SC2154,SC2034

# https://github.com/api/v5/swagger#/postV5OrgsOrgRepos
___x_cmd_gh_org_repo_create() {
    # TODO: I don't know what does path means for an organization repo
    # path is null default repo name as path
    param:scope     "github/$O"
    param:dsl       '
type:
    access  =   private public innerSource
option:
    --org                   "organization create repo"      <>:name
    --description           "description"                   <>=""
    --access                "private,public,innerSource"    <>:RepoVisibility=private
    --homepage              "homepage"                      <>:URL=""
    --no_issues             "Provide issue"
    --no_wiki               "Provide wiki"
    --no_comment            "Provide can_comment"
    --no_auto_init          "auto init README"
    --gitignore_template    "Git Ignore"                    <>:Ignore=""
    --license_template      "license"                       <>:License=""
    --paths                  "repo path"                    <>:URL=""
    #n                      "repo names"
'
    param:run


    case "$access" in
        private)        private=0 ;;
        public)         private=1 ;;
        innerSource)    private=2 ;;
    esac

    local has_issues=true
    local has_wiki=true
    local can_comment=true
    local auto_init=true
    [ -n "$no_issues" ] && has_issues=false
    [ -n "$no_wiki" ] && has_wiki=false
    [ -n "$no_comment" ] && can_comment=false
    [ -n "$no_auto_init" ] && auto_init=false
    # TODO:owner may be personal
    local name
    for name in "$@"; do
        # name="$(___x_cmd_gh_param_normalize_repo "$name")"
        # owner="$(echo "$name" | cut -d / -f 1)"
        # name="$(echo "$name" | cut -d / -f 2)"
        local resp
        {
            ___x_cmd_gh_post_json "/v5/orgs/$org/repos" name description homepage has_issues has_wiki can_comment auto_init \
             gitignore_template license_template path="$paths" public
            code=$?
            if [ $code -ne 0 ]; then
                gh_log error "Creating repo failure: $name. Code is $code. "
                # ___x_cmd_gh_resp_header "" >&2
                return $code
            fi
        } 
    done
}

# https://github.com/api/v5/swagger#/postV5EnterprisesEnterpriseRepos
# shellcheck disable=SC2154
___x_cmd_gh_enterprise_repo_create() {
    param:scope     "github/$O"
    param:dsl       '
type:
    access  =               private public innerSource
option:
    --enterprise            "enterprise space address"          <>
    --access                "private,public,innerSource"        <>:RepoVisibility=private
    --description           "description"                       <>=""
    --homepage              "homepage"                          <>:URL=""
    --paths                 "repo path"                         <>:URL=""
    --no_issues             "Provide issue"
    --no_wiki               "Provide wiki"
    --no_comment            "Provide can_comment"
    --no_auto_init          "auto init README"
    --outsourced            "Provide outsourced"
    --gitignore_template    "Git Ignore"                        <>:Ignore=""
    --license_template      "license"                           <>:License=""
    --project_creator       "Provide project_creator"           <>:name=""
    --members               "Provide members(name or email)"    <>=""
'
    param:run

    case "$access" in
        private)        private=0 ;;
        public)         private=1 ;;
        innerSource)    private=2 ;;
    esac
    local has_issues=true
    local has_wiki=true
    local can_comment=true
    local auto_init=true
    [ -n "$no_issues" ] && has_issues=false
    [ -n "$no_wiki" ] && has_wiki=false
    [ -n "$no_comment" ] && can_comment=false
    [ -n "$no_auto_init" ] && auto_init=false

    outsourced=${outsourced:-false}

    # TODO
    local name
    for name in "$@"; do
    {
        ___x_cmd_gh_post_json "/v5/enterprises/${enterprise##*/}/repos" \
            name description homepage has_issues can_comment auto_init \
            gitignore_template license_template path="$paths" private enterprise outsourced project_creator members
            code=$?
            if [ $code -ne 0 ]; then
                gh_log error "Creating repo failure: $name. Code is $code. "
                return $code
            fi
        } | json_color
    done
    return 0
}


############################
# Section 5: List Repos TODO:
############################

# gh repo list --access inner-source <owner>
# gh enterprise repo list
___x_cmd_gh_repo_ls() {
    param:void
    local owner
    owner="$1"

    if [ -z "$owner" ]; then
        ___x_cmd_gh_user_repo "$@"
        return
    fi

    local owner_type
    owner_type="$(___x_cmd_gh_owner_type_query "$owner")"
    if [ -n "$owner_type" ] && [ -n "$owner" ]; then
        "___x_cmd_gh_${owner_type}_repo" ls "$@"
        return
    fi

    gh_log error "Please provide owner and owner_type\n"
    return 1
}

############################
# Section 7: Repo - Deletion & Info & Creation
############################
___x_cmd_gh_repo_info() {
    param:scope     "github/$O"
    param:dsl       '
options:
    #1|--repo          "Repo name"         <>:repo
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_get "/v5/repos/${owner_repo}"
    # ___x_cmd_gh_get "/v5/repos/${owner}/${repo}"
}

# https://github.com/api/v5/swagger#/deleteV5ReposOwnerRepo
___x_cmd_gh_repo_del() {
    param:scope     "github/$O"
    param:dsl       '
options:
    #n      "Provide repo list"    <>
'
    param:run
    local confirm
    confirm=$(ui select "text" "Are you sure you want to delete repo $*" "yes" "no")
    [ "$confirm" = "no" ] && return
    local i
    for i in "$@"; do
        ___x_cmd_gh_param_normalize_repo "$i"
        ___x_cmd_gh_delete "/v5/repos/$owner_repo" >/dev/null 
        if [ $? -eq 0 ]; then
            ui tf "true" "deleted repo $i"
        else
            gh_log error "Code is $?. Deleting repo failure: $i. Probably because it desn't exists."
        fi
    done
}

___x_cmd_gh_repo_clear() {
    param:scope     "github/$O"
    param:dsl       '
options:
    #1|--repo          "Repo name"             <>:repo
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    local confirm
    confirm=$(ui select "text" "Are you sure you want to clear repo ${owner_repo}" "yes" "no")
    [ "$confirm" = "no" ] && return
    ___x_cmd_gh_put_json "/v5/repos/${owner_repo}/clear" && ui tf "true" "Successfully clear ${owner_repo}" && return
    gh_log error "clear repo failure: $owner_repo"
}

___x_cmd_gh_repo_review(){
    param:scope     "github/$O"
    param:dsl       '
options:
    #1|--repo             "Repo name"                   <>:repo
    --assignees           "assignees username"          <>:name
    --testers             "testers usrename"            <>:name
    --assignees_number    "number of reviewers"         <>:number="1"
    --testers_number      "number of people tested"     <>:number="1"
'
    param:run
    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_put_json "/v5/repos/${owner_repo}/reviewer" assignees testers assignees_number testers_number
}