# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_git_config_get(){
    local data
    data="$(awk -v host="$2" -v tmp="$3" -v check="false" '
{
    gsub(":","")
    if($1==host){
        check="true"
    }else if($2=="") {
        check="false"
    }
    if(check=="true" && $1==tmp){
        print $2
        exit(0)
    }
}'<<A
$(cat "$1")
A
)"
    printf "%s\n" "$data"
}

___x_cmd_git_config_set(){
    local url="${1:?Provide config url}"
    local host="${2:?need to provide host}"
    local key="${3:?Provide parameters that need to be set}"
    local val="${4:?Provide the value that needs to be set}"

    local config
    config=$(cat "$url" 2>/dev/null)
    if [ -z "$config" ];then
        printf "%s\n" "$host:
    $key: $val">"$url"
    return 0
    fi

    local data
    data="$(awk -v host="$host" -v key="$key" -v val="$val" -v check="false" '
{
    gsub(":","")

    if($1==host){
        check="true"
    }else if($2=="" && check=="true") {
        check="false"
        print key,":",val
    }

    if(check=="true" && $1==key){
        $2=val
        check="false"
    }
    print $1,":",$2
}
END {
    if(check=="true")
        print key,":",val
}
'<<A
$config
A
)"
    printf "%s\n" "$data">"$url"
}

___x_cmd_git_json_query(){
    local awkfile
    awkfile="$(xrc cat awk/lib/default.awk awk/lib/json.awk awk/lib/jiter.awk )"
    while [ $# -gt 0 ];do
    awk "$awkfile""
{
    jiter_print_eqarr_after_tokenize(\$0,\"$1\", \"\n\")
}"
    shift
    done
}


___x_cmd_git_json_query_rename(){
    local data
    data="$(cat)"
    while [ $# -gt 0 ];do
        eval "${1%%=*}"="$(printf "%s" "$data" | ___x_cmd_git_json_query "${1##*=}")"
        shift
    done
}
