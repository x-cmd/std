# shellcheck shell=sh
# shellcheck disable=SC2039,3043
___x_cmd_gh_org_repo(){
    param:dsl       '
subcmd:
    ls          "list repo"
    create      "org repo create"
'
    param:run
    if [ -z "$PARAM_SUBCMD" ]; then
        gh_log error "Command Not Found. Show help."
        return 0
    fi
    "___x_cmd_gh_org_repo_${PARAM_SUBCMD}" "$@"
}

___x_cmd_gh_org_repo_ls() {
    param:scope     "github/$O"
    param:dsl       '
options:
    --type     "type"                   <>="all"    = all private public
    #1|--org   "org space address"      <>:address
'
    param:run
    if [ -t 1 ] && ___ui_table_json Id=.id Name=.name OwnerName=.owner.login IsPrivate=.private \
        -- "___x_cmd_gh_get_multi" "/orgs/$org/repos" type ; then
        return 0
    fi
    ___x_cmd_gh_get_multi "/orgs/$org/repos" type && return 0

    ___x_cmd_ui_tf false "Please provide owner and owner_type"
    return 1
}

___x_cmd_gh_org_repo_create() {
    param:scope     "github/$O"
    param:dsl       '
type:
    Access  =   private public internal
option:
    --org                       "organization create repo"                                             <>:name
    --description               "A short description of the repository."                               <>=""
    --homepage                  "A URL with more information about the repository."                    <>:URL=""
    --team_id                   "the id of the team that will be granted access to this repository"    <>=""
    --gitignore_template        "Desired language or platform"                                         <>:Ignore=""
    --license_template          "The license keyword of the open source license for this repository."  <>:License=""
    --access                    "Can be public or private."                                            <>:Access=private
    --no_issues                 "Whether to disable issue"
    --no_projects               "Whether to disable has_projects"
    --no_wiki                   "Whether to disable wiki"
    --no_auto_init              "Disable auto init README"
    --is_template               "make this repo available as a template,Default:false"
    --no_squash_merge           "Whether to allow squash merges for pull requests."
    --no_merge_commit           "Whether to allow merge commits for pull requests."
    --no_rebase_merge           "Whether to allow rebase merges for pull requests."
    --allow_auto_merge          "Whether to allow Auto-merge to be used on pull requests,Default:false"
    --delete_branch_on_merge    "Either to allow automatically deleting head branches when pull requests are merged,Default:false"
    #n                          "repo names"
'
    param:run

    local private=true
    [ "$access" = "public" ] && private=false

    local name="%%name%%"

    local gen_gh_json
    gen_gh_json="$(param:option2json +name +private -access -org \
        has_issues=^no_issues                   auto_init=^no_auto_init                 has_projects=^no_projects \
        allow_rebase_merge=^no_rebase_merge     allow_squash_merge=^no_squash_merge     allow_merge_commit=^no_merge_commit \
        has_wiki=^no_wiki)"
    # TODO:owner may be personal
    local name
    for name in "$@"; do
        printf "%s" "${gen_gh_json}" | sed s/%%name%%/"${name##%/}"/g | \
            ___x_cmd_gh_http post "/orgs/$org/repos" - | \
            ___x_cmd_gh_org_repo_create_json_status_handler
    done
}
___x_cmd_gh_org_repo_create_json_status_handler(){
    if [ ! -t 1 ] || [ -n "$ENFORCE_JSON" ]; then
        cat
        return
    fi

    ___x_cmd_git_json_query_rename repo_id=.id url=.html_url repo_owner=.owner.login
    if [ -n "$repo_id" ]; then
        ___x_cmd_ui_tf true "Creating repo $name success" "repo_id: $repo_id" "repo_owner: $repo_owner" "url: $url"
    else
        ___x_cmd_ui_tf false "Creating repo failure: $name."
        return 1
    fi
}