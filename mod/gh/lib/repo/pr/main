# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gh_repo_pr(){
    param:dsl       '
subcmd:
    ls              "list pull requests"
    info            "pull request info"
    add             "create pull request"
    update          "update pull requests"
    merge           "merge pull requests"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        gh_log error "Command Not Found. Show help."
        ___x_cmd_gh_repo_pr _param_help_doc
        return 1
    fi

    "___x_cmd_gh_repo_pr_${PARAM_SUBCMD}" "$@"
}


# Section: ls info log comments view

___x_cmd_gh_repo_pr_ls() {

    param:scope     "github/$O"
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --head          "source branch. Format: [username:]<branch>"                        <>=""
    --base          "target branch. Format: [username:]<branch>"                        <>=""
    --state         "state"                                                             <>:PrState="all"
    --sort          "sort"                                                              <>:PrSort="created"
    --direction     "direction"                                                         <>:Direction="desc"
'
    param:run

    ___x_cmd_gh_param_init_owner_repo

    if [ -t 1 ] && ___ui_table_json number=.number state=.state title=.title url=.html_url \
         -- "___x_cmd_gh_http" "get" "/repos/$owner_repo/pulls" state head base sort direction; then
        return 0
    fi

    ___x_cmd_gh_http get "/repos/$owner_repo/pulls" state head base sort direction && return 0

    ___x_cmd_ui_tf false "get $owner_repo pull request list fail"
    return 1
}

___x_cmd_gh_repo_pr_info() {
    param:scope     "github/$O"
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    #1|--number     "pr number"     <>:NatureNumber
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_http get "/repos/${owner_repo}/pulls/$number" | (
        ___x_cmd_git_json_query_rename url=.html_url state=.state title=.title body=.body
        if [ -n "$state" ];then
            ___x_cmd_ui_tf true "get number $number pr success" "Url:$url" "State:$state" "Title:$title" "Body:$body"
        else
            ___x_cmd_ui_tf false "get number $number pr fail"
            return 1
        fi
    )
}
# EndSection

# Section: create update merge

___x_cmd_gh_repo_pr_create() {
    local O="${O:-GITHUB_DEFAULT}"
    param:scope     "github/$O"
    param:dsl       '
type:
    bool = true false
options:
    --repo                  "Provide owner name and repo name.(default:the current user repo)"  <>:RepName
    --title                 "pr title"                                                          <>
    --head                  "source branch. Format: [username:]<branch>"                        <>:name
    --base                  "target branch. Format: [username:]<branch>"                        <>:name
    --body                  "pull request content"                                              <>=""
    --maintainer_can_modify "Indicates whether maintainers can modify the pull request."        <>:Bool=true
    --draft                 "Indicates whether the pull request is a draft"                     <>=""
    --issue                 "association issue"                                                 <>=""
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    local gen_gh_json
    gen_gh_json="$(param:option2json -repo)"

    ___x_cmd_gh_http post "/repos/$owner_repo/pulls" "$gen_gh_json"
}

___x_cmd_gh_repo_pr_update() {
    local O="${O:-GITHUB_DEFAULT}"
    param:scope     "github/$O"
##TODO:state
    param:dsl       '
type:
    state = closed
options:
    #1|--pr                 "pr number"                                 <>:number
    --repo                  "Provide owner name and repo name.(default:the current user repo)"  <>:RepName
    --title                 "pr title"                                  <>
    --body                  "pull request content"                      <>=""
    --milestone_number      "milestone number"                          <>:numbers=""
    --labels                "labels"                                    <>=""
    --assignees_number      "minimum number of reviewers"               <>:numbers=""
    --testers_number        "minimum test number"                       <>:numbers=""
    --state                 "state"                                     <>:state="closed"
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    local gen_gh_json
    gen_gh_json="$(param:option2json -repo)"

    ___x_cmd_gh_http patch "/repos/${owner_repo}/pulls/$pr" "$gen_gh_json"
}

___x_cmd_gh_repo_pr_merge() {
    param:scope     "github/$O"
    param:dsl       '
type:
    merge = squash  merge
options:
    #1|--pr                 "pr id"                                     <>
    --repo                  "Provide owner name and repo name.(default:the current user repo)"  <>:RepName
    --merge_method          "merge method(squash,merge)"                <>:merge="merge"
    --prune_source_branch   "prune source branch"                       <>:bool="false"
    --title                 "title"                                     <>=""
    --description           "description"                               <>=""
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    local gen_gh_json
    gen_gh_json="$(param:option2json -repo)"
    ___x_cmd_gh_http put "/repos/${owner_repo}/pulls/$pr/merge" "$gen_gh_json"
}

# EndSection

___x_cmd_gh_repo_pr_view() {
    param:scope     "github/$O"
    param:dsl       '
options:
    #1|--pr             "pr id"         <>:number
'
    param:run

    ___x_cmd_gh_param_init_owner_repo

    http browse "https://github.com/${owner_repo}/pulls/$pr"
}

___x_cmd_gh_repo_pr_comments(){
    param:dsl       '
subcmd:
    ls              "list pull requests comments"
    info            "pull request comments info"
    add             "create pull request comments"
    update          "update pull requests comments"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        gh_log error "Command Not Found. Show help."
        ___x_cmd_gh_repo_pr_comments _param_help_doc
        return 1
    fi

    "___x_cmd_gh_repo_pr_comments_${PARAM_SUBCMD}" "$@"
}
# TODO:github API error
# Section:fail
___x_cmd_gh_repo_pr_comments_ls() {
    param:scope     "github/$O"
    param:dsl       '
options:
    --repo      "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    #1|--number "pr number"                                                         <>
'
    param:run
    ___x_cmd_gh_param_init_owner_repo
    if [ -t 1 ] && ___ui_table_json id=.id body=.body url=.url \
            -- "___x_cmd_gh_http" "get" "/repos/${owner_repo}/pulls/$number/comments"; then
            return 0
    fi
    ___x_cmd_gh_http get "/repos/${owner_repo}/pulls/$number/comments" && return 0

    ___x_cmd_ui_tf false "get $owner_repo pull request comments list fail"
    return 1
}

___x_cmd_gh_repo_pr_comments_add(){
    param:scope     "github/$O"
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --number        "pr number"                                                         <>
    --body          "The text of the review comment."                                   <>
    --commit_id     "The SHA of the commit needing a comment"                           <>=""
    -p|--path       "The relative path to the file"                                     <>=""
    --position      "The position in the diff where you want to add a review comment"   <>=""
    --side          ""                                                                  <>=""
    --line          ""                                                                  <>=""
    --start_line    ""                                                                  <>=""
    --start_side    ""                                                                  <>=""
    --in_reply_to   ""                                                                  <>=""
'
    param:run
    ___x_cmd_gh_param_init_owner_repo
    local gen_gh_json
    gen_gh_json="$(param:option2json -repo)"
    ___x_cmd_gh_http post "/repos/${owner_repo}/pulls/$number/comments" "$gen_gh_json"
}

___x_cmd_gh_repo_pr_comments_rm(){
    param:scope     "github/$O"
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --comment_id    "comment id"                                                         <>
'
    param:run
    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_http delete "/repos/${owner_repo}/pulls/comments/${comment_id}"
}

# EndSection