# [^"\\\001-\037]                                      匹配 双引号 反斜杠 以及 特殊字符 以外的字符
# \\[^u\001-\037]                                      匹配一个反斜杠 以及 一个除“u”和特殊字符以外的字符
# \\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]      匹配十六进制数
# -?                                                   0或1个 “-” 字符
# (0|[1-9][0-9]*)                                      0 或 纯数字字符串
# ([.][0-9]+)?                                         若有 “.” 则匹配后面接有一个以上的数字
# ([eE][+-]?[0-9]+)?                                   匹配科学记数法
# .                                                    任意字符 json 中主要用来匹配 “：” 括号以及 ","


# "\n&"                                                表示在匹配道德字符串的前面添加 “\n” 字符

# "[^"\\\001-\037]*((\\[^u\001-\037]|\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])[^"\\\001-\037]*)*"
# 匹配 带有双引号的字符串，
# 该字符串开头的字符 不能是：双引号、反斜杠、特殊字符；
# 中间的字符只有三种情况：1. 带有反斜杠的特殊字符
#                     2. \u 的十六进制数
#                     3. 除了 双引号 反斜杠 以及特殊字符以外的字符


# -?(0|[1-9][0-9]*)([.][0-9]+)?([eE][+-]?[0-9]+)?        匹配数字字符串，可以带有负号、小数点以及科学记数法
# null|false|true                                        匹配没有带有双引号的 null|false|true，没有双引号包裹住
# [ \t\n\r]+                                             匹配一个或一个以上的 空格 横向制表符 换行符 回车符


a="$(printf "a\\")"
f(){
{\\
    awk '
function json_to_machine_friendly(text){
    gsub(/"[^"\\\001-\037]*((\\[^u\001-\037])[^"\\\001-\037]*)*"/, "\n&", text)
    # 以 [^"\\\001-\037]* 开始，((\\[^u\001-\037])[^"\\\001-\037]*)* 递归匹配 反斜杠
    
    # gsub(/"[^"\\\001-\037]*                    (   (\\[^u\001-\037])  [^"\\\001-\037] *  )*"/, "zz", text)

    # gsub(/"[^"\\\001-\037]*((\\[^u\001-\037]|\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])[^"\\\001-\037]*)*"|-?(0|[1-9][0-9]*)([.][0-9]+)?([eE][+-]?[0-9]+)?|null|false|true|[ \t\n\r]+|./, "\n&", text)
    # gsub(/^\357\273\277|^\377\376|^\376\377|"[^"\\\000-\037]*((\\[^u\000-\037]|\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])[^"\\\000-\037]*)*"|-?(0|[1-9][0-9]*)([.][0-9]+)?([eE][+-]?[0-9]+)?|null|false|true|[ \t\n\r]+|./, "\n&", text)
    # gsub("\n" "[ \t\n\r]+", "\n", text)
    return text
}
{
    printf("%s", json_to_machine_friendly($0))
}
'
} <<A
{
    "a\\"a": {
        "a1": {
            "1": 3
        }
    }
}
A

cat <<A

{
    "a\\"": {
        "a1": {
            "1": 3
        }
    }
}
A

# A
# {
#     "\\": {
#         "a1": {
#             "1": 3
#         },
#         "a2": [1,2],
#         "a": {
#             "a11": "aaa"
#         }
#     },
#     "c": {
#         "c1": "12",
#         "aa": [1,2,3],
#         "c2": {
#             "c21": 12,
#             "c22": [
#                 3,
#                 4
#             ]
#         }
#     }
# }
# A

}

time f