# shellcheck shell=bash disable=SC2039,3043,1072,1073,1123

# author:       Li Junhao           l@x-cmd.com    edwinjhlee.github.io
# maintainer:   Li Junhao

if [ -n "$BASH_VERSION" ]; then

xrc json

dbg(){
    # echo "$@" >&2
    :
}

str_trim_right () 
{ 
    local var="$*";
    var="${var%"${var##*[![:space:]]}"}";
    echo -n "$var"
}

_advise_handle(){
    local i
    local IFS
    local j
    for i in "$@"; do
        IFS=":"
        for j in $i; do
            printf "%s\n" "$j"
        done
    done
}

# Must be using bash
_advise(){
    local data="$1"; shift

    local IFS="
"

    local whole=""
    local i
    local key
    local used_keys=()
    for ((i=1; i<COMP_CWORD; ++i)); do
        key=${COMP_WORDS[i]}
        if [[ "$key" != -* ]]; then
            whole="$whole.*:$key:*"
            used_keys=()
        else
            local opts
            opts="$(json query "$whole.*:$key:*" <"$data")"

            # No matter accept value or not. It already has value.
            if [[ "$key" == -*=* ]]; then
                key="${key%%=*}="
            elif [ "$opts" != null ]; then
                # Means accept value. Next argument is value, skip it.
                i=$((i+1))
            fi
            used_keys+=("$key")
        fi
    done

    local prev="${COMP_WORDS[$((COMP_CWORD-1))]}"
    local cur="${COMP_WORDS[COMP_CWORD]}"

    if [[ "$prev" == -* ]]; then

        if [[ "$prev" == -*=* ]]; then
            prev="${prev%%=*}=?"    # Question mark.
        fi

        local opts
        opts="$(json query "$whole.*:$prev:*"  <"$data" | json_unescape)"
        if [ "$opts" != "null" ]; then
            whole="$whole.*:$prev:*"
            opts="$(json values "${whole:-.}"  <"$data" | json_unescape | grep -v "\#")"            
        else
            opts="$(json keys "${whole:-.}"  <"$data" | json_unescape | grep -v "\#")"
            local used
            for used in "${used_keys[@]}"; do
                opts="$(printf "%s" "$opts" | grep -v ":$used:")"
            done
        fi

        if [[ "$opts" == "#> "* ]]; then
            opts="$(eval "${opts:2}")"
        fi

        if [ -z "$cur" ]; then
            local opts2
            opts2=( $(_advise_handle "${opts[@]}") )
            opts=()
            
            for i in ${opts2[@]}; do
                if [[ ! "$i" =~ ^\- ]]; then
                    opts+=( "$i" )
                fi
            done
        else
            opts=( $(_advise_handle "${opts[@]}") )
        fi
    else
        local opts
        opts="$(json keys "${whole:-.}"  <"$data" | json_unescape | grep -v "\#")"
        [ "$opts" == "null" ] && return

        if [[ "$opts" == "#> "* ]]; then
            opts="$(eval "${opts:2}")"
        fi

        local used
        for used in "${used_keys[@]}"; do
            opts="$(printf "%s" "$opts" | grep -v ":$used:")"
        done

        if [ -z "$cur" ]; then
            local opts2
            opts2=( $(_advise_handle "${opts[@]}") )
            opts=()
            
            for i in ${opts2[@]}; do
                if [[ ! "$i" =~ ^\- ]]; then
                    opts+=( "$i" )
                fi
            done
        else
            opts=( $(_advise_handle "${opts[@]}") )
        fi
    fi

    COMPREPLY=($(compgen -W "${opts[*]}" -- "${cur}"))
}

advise(){
    local func="${1:?Provide function name}"
    local filepath="${2:?Provide data paths}"
    eval "_adviser_of_${func}(){
        _advise \"$filepath\"    
    }"
    complete -F "_adviser_of_${func}" "$func"
}

# xrc advise
advise compt "test-data2.json"

# shellcheck disable=SC3044
# complete -F compt_comp_function compt

elif [ -n "$ZSH_VERSION" ]; then

complete(){
    :
}

fi

# _gt_request_complete() {
#     local cur opts prev
#     COMPREPLY=()

#     if [ -n "${BASH_VERSION}" ]; then
#         cur="${COMP_WORDS[COMP_CWORD]}"
#         prev="${COMP_WORDS[COMP_CWORD - 1]}"
#         case "$prev" in
#         gt_request)
#             opts="get post put patch delete"
#             COMPREPLY=($(compgen -W "${opts}" -- "${cur}"))
#             return 0
#             ;;
#         get)
#             opts="multi"
#             COMPREPLY=($(compgen -W "${opts}" -- "${cur}"))
#             return 0
#             ;;
#         post | put)
#             opts="json form text bin"
#             COMPREPLY=($(compgen -W "${opts}" -- "${cur}"))
#             return 0
#             ;;
#         patch | delete | *)
#             return 0
#             ;;
#         esac

#     elif [ -n "${ZSH_VERSION}" ]; then
#         prev="${words[CURRENT - 1]}"
#         _arguments -C \
#             '1: :(get post put patch delete)' \
#             '*::arg:->args'
#         case "$prev" in
#         get)
#             _arguments -C \
#                 "1: :(multi)"
#             return 0
#             ;;
#         post | put)
#             _arguments -C \
#                 "1: :(json form text bin)"
#             return 0
#             ;;
#         patch | delete | *)
#             return 0
#             ;;
#         esac
#         return 0
#     fi
# }

# if [ -n "${BASH_VERSION}" ]; then
#     complete -F _gt_request_complete gt_request
# else
#     compdef _gt_request_complete gt_request
# fi