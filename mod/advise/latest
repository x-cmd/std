# Author:       Li Junhao           l@x-cmd.com             # xrc
# shellcheck    shell=bash          disable=SC2039,3043


if [ -z "${ZSH_VERSION}${BASH_VERSION}" ]; then
    x:info "advise is only available in 'bash' or 'zsh'."
else

___X_CMD_ADVISE_TMPDIR="${TMPDIR%/}/.x-cmd/advise_auto_json"

# Section : advise entrance
___x_cmd_advise(){
    local op="${1}"; [ $# -gt 0 ] && shift
    case "$op" in
        ls)
            ls "$@" "$___X_CMD_ADVISE_TMPDIR" ;;
        rm)
            if [ "$#" -eq 0 ]; then
                x rmrf "$___X_CMD_ADVISE_TMPDIR"/*
            else
                x rmrf "$___X_CMD_ADVISE_TMPDIR/$1"
            fi
            ;;
        which)
            if [ "$#" -eq 0 ]; then
                printf "%s" "$___X_CMD_ADVISE_TMPDIR"
            else
                printf "%s/%s" "$___X_CMD_ADVISE_TMPDIR" "$1"
            fi
            ;;
        cat)
            local mod
            for mod in "$@"; do
                cat "$___X_CMD_ADVISE_TMPDIR/$mod"
            done
            ;;
        load) ___advise_load;;
        man)
            ___x_cmd_advise_man "$@" ;;
        init|new)
            ___advise_main "$@" ;;
        del)
            complete -r "${1:?Provide function name}"
            ;;
        obj-new)
            local aliasname="${2:?Provide alias name}"
            local filepath="$___X_CMD_ADVISE_TMPDIR/$op"

            # TODO: There is one more solution. But it is not not worked in ZSH. Please figure it out.
            # complete -C "___advise_completer \"$filepath\"" "$aliasname"

            eval "
            function ______adviser_of_$op(){
                ___advise_completer \"$filepath\"
            }
            "
            if [[ ! "$BASH_VERSION" =~ (^3.*|^4.[0-3]) ]]; then
                complete -o nosort -F "______adviser_of_$op" "$aliasname"
            else
                complete -F "______adviser_of_$op" "$aliasname"
            fi
            ;;
        obj-del)
            local aliasname="${2:?Provide alias name}"

            complete -r "$aliasname"
            if ! complete | grep "______adviser_of_$op" 1>/dev/null 2>&1; then
                unset -f "______adviser_of_$op"
            fi
            ;;
         _x_cmd_advise_json)
            cat "$___X_CMD_ROOT_MOD/advise/lib/advise.advise.json"
            return 126
            ;;
        ""|help)
            cat "$___X_CMD_ROOT_MOD/advise/lib/help.txt" >&2; return 1
            ;;
        *)
            ___advise_main "$op" "$@" ;;
    esac
}

# EndSection

# Section : adviser helper function: ls lsd seq get_result

___advise_lsd(){
    local l
    local localdir="${1:-${cur:-""}}"
    compgen -d "${localdir}" 2>/dev/null | while read -r l; do
        printf "%s/\n" "${l%/}"
    done
}

___advise_ls_grep(){
    local localopt="${1:-${cur:-""}}"
    ls | grep -E "${localopt}" 2>/dev/null
}

___advise_ls(){
    local localdir="${1:-${cur:-""}}"

    if [ -z "$localdir" ]; then
        ls
        return
    fi

    if [ "${localdir%/*}" = "${localdir}" ]; then
        folder=""
        pattern="${localdir}"

    else
        folder="${localdir%/*}"
        pattern="${localdir##*/}"
    fi

    ls "${folder:-.}" | awk -v folder="$folder" -v pattern="$pattern" 'match($0, "^" pattern){
        if (folder == "") {
            print $0
        } else {
            print folder "/" $0
        }
    }' 2>/dev/null
}

# 1-10
___advise_seq(){
    local cur="${cur:-""}"
    awk -v range="$1" -v cur="$cur" '
function inside(num, start, end, step){
    if ( (num < start) || (num > end) ) return 0
    if ( ( num - start ) % step == 0 ) return 1
    return 0
}

BEGIN{

    arr_len = split(range, arr, /\//)
    start = arr[1]
    end = arr[2]
    step = arr[3]
    if (step == "") step = 1

    num = (end - start + 1) / step
    if (num < 16) {
        for (i=start; i<=end; i=i+step) print i
        exit(0)
    }

    if (cur !~ /[0-9]+/) {
        exit(0)
    }

    if (inside(cur, start, end, step) == 1) print cur

    cur = cur * 10
    for (i=0; i<=9; ++i) {
        newnum = cur + i
        if (inside(newnum, start, end, step) == 1) print newnum
    }
}
' <<A
A

}

___x_cmd_advise_get_result(){
    local offset="${1:-1}"
    local remain_len=$((COMP_CWORD-offset))
    [ -n "$ZSH_VERSION" ] && offset=$((offset+1)) && setopt aliases

    local module="${COMP_WORDS[offset]}"
    local which_one_result
    which_one_result="$(xrc which "$module")"
    [ -n "$which_one_result" ] || return

    local main_func
    main_func="$(___x_cmd_ldict_get ___X_CMD_XRC_SET_MAIN_DICT "$which_one_result")"

    # Generate the advise json file.
    if [ -z "$main_func" ]; then
        ___x_cmd_xrc_source_file_main "$which_one_result"
        main_func="$(___x_cmd_ldict_get ___X_CMD_XRC_SET_MAIN_DICT "$which_one_result")"
    fi

    ___advise_main "$main_func"
    local filepath="${TMPDIR%/}/.x-cmd/advise_auto_json/$main_func"
    [ -f "$filepath" ] || return

    # Delete $offset numbers from the COMP_WORDS
    local i tmp=()
    for ((i=0; i<=remain_len; ++i)); do
        tmp+=( "${COMP_WORDS[i+offset]}" )
    done
    COMP_WORDS=("${tmp[@]}")
    COMP_CWORD="$(( ${#tmp[@]}-1 ))"
    ___advise_get_result_from_awk
}

# EndSection

# Section : main

___advise_main(){
    local func="${1:?Provide function name}"
    local filepath="${2}"
    local alias_name="${3}"
    local advise_json_dir="$___X_CMD_ADVISE_TMPDIR"
    local tmp_filepath
    tmp_filepath=${advise_json_dir}/$func

    [ ! -d "$advise_json_dir" ] && mkdir -p "$advise_json_dir"

    if [ "-" = "$filepath" ]; then
        filepath=$tmp_filepath
        cat >"$filepath"
    elif [ -z "$filepath" ]; then
        # ___advise_update "$func"
        local filepath=$tmp_filepath
        if [ ! -f "$filepath" ]; then
            local content
            x:debug "Start gen advise for $func"
            content="$(X_CMD_ADVISE_FUNC_NAME=$func "$func" _x_cmd_advise_json)"
            if [ $? -eq 126 ]; then
                printf "%s" "$content" >"$filepath"
                x:debug "Finished gen advise for $func"
            else
                x:error "Failed gen advise $func : you should define _x_cmd_advise_json correctly in your function."
                return 0
            fi
        fi
    else
        cp "$filepath" "$tmp_filepath"
        filepath="$tmp_filepath"
    fi

    local comp_word
    if [ -z "$alias_name" ]; then
        comp_word="$func"
    else
        eval "
            ___advise_completer_$alias_name(){
                ___ADVISE_RUN_CMD_FOLDER= ___advise_run $func
            }"
        comp_word="$alias_name"
        alias_name="_$alias_name"
    fi

    if [ -z "$ZSH_VERSION" ];then
        if [[ ! "$BASH_VERSION" =~ (^3.*|^4.[0-3]) ]]; then
            complete -o nosort -F "___advise_completer$alias_name" "$comp_word"
        else
            complete -F "___advise_completer$alias_name" "$comp_word"
        fi
    else
        compdef "___advise_completer$alias_name" "$comp_word"
    fi
}

___advise_get_result_from_awk(){
    local result cmd_result
    local IFS=$'\002'
    local s="${COMP_WORDS[*]}"
    s="${s#*"$IFS"}"

    # Handle the case that the last word has "@" or ":" in bash.
    COMP_LINE="${COMP_WORDS[*]}"
    local cur_1="${COMP_WORDS[COMP_CWORD-1]}"
    case "$cur_1" in
        *@|*:)
            if [ "${COMP_LINE% }" != "${COMP_LINE}" ]; then
                s="${s%$cur_1$IFS$cur}"
                s="${s}${cur_1}$cur"
            fi
            ;;
        *)
    esac

    IFS=$'\n'
    result="$(
        {
            cat "$filepath"
            printf "\034%s\034" "$s"
        } | awk -f "$___X_CMD_ROOT_MOD/advise/lib/advise.awk" 2>/dev/null
    )"
    local cmd="${result##*\#> }"
    cmd_result=""

    if [ "$cmd" != "$result" ]; then
        cmd_result="$(eval "$cmd" 2>/dev/null)"
        result="${result%%\#> *}"
    fi

    printf "%s" "$result
$cmd_result"
}

___advise_update(){
    local func="${1:?Provide function name}"
    local tmp_filepath=${TMPDIR%/}/.x-cmd/advise_auto_json/$func

    if [ -f "$tmp_filepath" ] && [ -z "$(find "$tmp_filepath" -mtime -1)" ]; then
        rm -rf "$tmp_filepath"
        ___advise_main "$func"
    fi
}

___advise_run(){
    local resname cur
    if [ -n "$ZSH_VERSION" ];then
        local COMP_WORDS=("${words[@]}")
        local COMP_CWORD="$(( ${#words[@]}-1 ))"
        cur="${COMP_WORDS[COMP_CWORD+1]}"
        resname="${1:-${COMP_WORDS[1]}}"
    else
        cur="${COMP_WORDS[COMP_CWORD]}"
        resname="${1:-${COMP_WORDS[0]}}"
    fi

    local filepath
    [ -z "$___ADVISE_RUN_CMD_FOLDER" ] && ___ADVISE_RUN_CMD_FOLDER="$___X_CMD_ADVISE_TMPDIR"
    case "$resname" in
        /*) filepath="$resname" ;;
        -)  filepath=/dev/stdin ;;
        *)
            if [ -d "$___ADVISE_RUN_CMD_FOLDER/$resname" ]; then
                filepath="$___ADVISE_RUN_CMD_FOLDER/$resname/advise.json"
            else
                filepath="$___ADVISE_RUN_CMD_FOLDER/$resname"
            fi
            ;;
    esac
    [ -f "$filepath" ] || return

    if [ -n "$BASH_VERSION" ] && [ "${BASH_VERSION#3}" = "${BASH_VERSION}" ]; then
        local last="${COMP_WORDS[COMP_CWORD]}"
        case "$last" in
            \"*|\'*)
                COMP_LINE="${COMP_LINE%"$last"}"
                tmp=( $COMP_LINE )
                tmp+=("$last")
                ;;
            *)
                tmp=( $COMP_LINE )
                ;;
        esac

        # Ends with space
        if [ "${COMP_LINE% }" != "${COMP_LINE}" ]; then
            tmp+=( "" )
        fi

        COMP_WORDS=("${tmp[@]}")
        COMP_CWORD="$(( ${#tmp[@]}-1 ))"
    fi

    local OLDIFS="$IFS"
    local IFS=$'\n'
    local cmds
    cmds="$(___advise_get_result_from_awk)"
    local commands=($(printf "%s" "$cmds"))
    desc=()
    cmds=()
    for i in "${commands[@]}"; do
        if [ ! "$i" = "${i%%---*}" ] && [ -n "$ZSH_VERSION" ];then
            desc+=("\"${i%% *}:${i#*--- }\"")
            continue
        fi
        cmds+=("${i%% *}")
    done

    if [ -n "$ZSH_VERSION" ];then
        eval "desc=(${desc[*]})"
        _describe 'commands' desc
        compadd -a cmds
    else
        if [[ ! "$BASH_VERSION" =~ ^3.* ]];then
            if [[ "$result" =~ [:=\/]$ ]];then
                compopt -o nospace
            else
                compopt +o nospace
            fi
        fi

        # shellcheck disable=SC2207
        COMPREPLY=(
            $(
                compgen -W "${cmds[*]}" -- "$cur"
            )
        )

        __ltrim_completions "$cur" "@"
        __ltrim_completions "$cur" ":"
        __ltrim_completions "$cur" "="
    fi
    IFS="$OLDIFS"
}

__ltrim_completions()
{
    local i=${#COMPREPLY[*]}
    ((i == 0)) && return 0
    if [[ $1 == *$2* && $COMP_WORDBREAKS == *$2* ]]; then
        # Remove colon-word prefix from COMPREPLY items
        local colon_word=${1%"${1##*"$2"}"}
        COMPREPLY=("${COMPREPLY[@]}")
        while ((i-- > 0)); do
            COMPREPLY[i]=${COMPREPLY[i]#"$colon_word"}
        done
    fi
}

___advise_completer() {
    # Interesting ... Passing
    ___ADVISE_RUN_CMD_FOLDER= ___advise_run ""
}

# EndSection

if [ -n "$ZSH_VERSION" ] && [ -z "$___X_CMD_ADVISE_ZSH_COMPLETE_LOADED" ] ; then
    ___X_CMD_ADVISE_ZSH_COMPLETE_LOADED=1
    zstyle ':completion:*:*:*:*:*' menu select
    zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|=*' 'l:|=* r:|=*'
    zstyle ':completion:*' sort false
    if ! command -v compinit > /dev/null; then
        autoload -Uz compinit && compinit
    fi
fi

# consider init in the + .
# ___x_cmd_advise init advise

# xrc:mod advise/lib/man

___x_cmd_advise_man(){
    xrc:mod advise/lib/man && ___x_cmd_advise_man "$@"
}

# EndSection
fi

xrc setmain ___x_cmd_advise
