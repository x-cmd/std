# shellcheck shell=bash disable=SC2039,3043

# author:       Li Junhao           l@x-cmd.com    edwinjhlee.github.io

if [ -z "${ZSH_VERSION}${BASH_VERSION}" ]; then
    x log info "advise is only available in 'bash' or 'zsh'."
else

# It is a nice idea to avoid using the 'xrc which' command multiple times.
___ADVISE_AWK_PATH=${___ADVISE_AWK_PATH:-$(xrc which advise/v0.awk)}

# Section : advise entrance
advise(){
    local op="${1}"; shift 2>/dev/null
    case "$op" in
        ls)
            ls "$@" "${TMPDIR%/}/.x-cmd/advise_auto_json" ;;
        rm)
            if [ "$#" -eq 0 ]; then
                rm -rf "${TMPDIR%/}/.x-cmd/advise_auto_json"/*
            else
                rm -rf "${TMPDIR%/}/.x-cmd/advise_auto_json"/"$1"
            fi
            ;;
        which)
            if [ "$#" -eq 0 ]; then
                printf "%s" "${TMPDIR%/}/.x-cmd/advise_auto_json"
            else
                printf "%s/%s" "${TMPDIR%/}/.x-cmd/advise_auto_json" "$1"
            fi
            ;;
        cat)
            local mod
            for mod in "$@"; do
                cat "${TMPDIR%/}/.x-cmd/advise_auto_json/$mod"
            done
            ;;
        load) ___advise_load;;
        man)
            ___advise_man "$@" ;;
        init|new)
            ___advise_main "$@" ;;
        del)
            complete -r "${1:?Provide function name}"
            ;;
        obj-new)
            local aliasname="${2:?Provide alias name}"
            local filepath="${TMPDIR%/}/.x-cmd/advise_auto_json/$op"

            # TODO: There is one more solution. But it is not not worked in ZSH. Please figure it out.
            # complete -C "___advise_completer \"$filepath\"" "$aliasname"

            eval "
            function ______adviser_of_$op(){
                ___advise_completer \"$filepath\"
            }
            "
            complete -F "______adviser_of_$op" "$aliasname"
            ;;
        obj-del)
            local aliasname="${2:?Provide alias name}"

            complete -r "$aliasname"
            if ! complete | grep "______adviser_of_$op" 1>/dev/null 2>&1; then
                unset -f "______adviser_of_$op"
            fi
            ;;
         _x_cmd_advise_json)
            cat <<A
{
      "ls": "--- Show all available advise json obj",
      "rm": {
          "#1": "ls \${TMPDIR%/}/.x-cmd/advise_auto_json",
          "#desc": "Remove one obj, if no obj is given, remove all obj"
      },
      "which": {
          "#1": "ls \${TMPDIR%/}/.x-cmd/advise_auto_json",
          "#desc": "Show the path of the obj"
      },
      "cat": {
          "#n": "ls \${TMPDIR%/}/.x-cmd/advise_auto_json",
          "#desc": "Show the content of the obj"
      },
      "init|new": "--- Create a new obj",
      "man": {
          "ls": null,
          "update": null,
          "rm": "___advise_man_ls",
          "which": "___advise_man_ls",
          "load": "___advise_man_ls",
          "#desc": "Manager for x-cmd/advise"
      },
      "del": null,
      "obj-new": null,
      "obj-del": null
}
A
            return 126
            ;;
        ""|help)
            printf "advise    x-bash complete function.
    Uasge:  advise <subcmd> [<obj>...]
    Please visit our homepage for more information: https://x-cmd.com
SUBCOMMAND:
    ls             Show all available advise json obj.
    rm [<obj>]     Remove one obj, if no obj is given, remove all obj.
    which <obj>    Show the path of the obj.
    cat <obj>      Show the content of the obj.
    init <obj>     Create a new obj.
    man            Manager for x-cmd/advise.
" >&2; return 1
            ;;
        *)
            ___advise_main "$op" "$@" ;;
    esac
}

# EndSection

# Section : adviser helper function: ls lsd seq

___advise_lsd(){
    local l
    local localdir="${1:-${cur:-""}}"
    compgen -d "${localdir}" 2>/dev/null | while read -r l; do
        printf "%s/\n" "${l%/}"
    done
}

___advise_ls_grep(){
    local localopt="${1:-${cur:-""}}"
    ls | grep -E "${localopt}" 2>/dev/null
}

___advise_ls(){
    local localdir="${1:-${cur:-""}}"

    if [ -z "$localdir" ]; then
        ls
        return
    fi

    if [ "${localdir%/*}" = "${localdir}" ]; then
        folder=""
        pattern="${localdir}"

    else
        folder="${localdir%/*}"
        pattern="${localdir##*/}"
    fi

    ls "${folder:-.}" | awk -v folder="$folder" -v pattern="$pattern" 'match($0, "^" pattern){
        if (folder == "") {
            print $0
        } else {
            print folder "/" $0
        }
    }' 2>/dev/null
}

# 1-10
___advise_seq(){
    local cur="${cur:-""}"
    awk -v range="$1" -v cur="$cur" '
function inside(num, start, end, step){
    if ( (num < start) || (num > end) ) return 0
    if ( ( num - start ) % step == 0 ) return 1
    return 0
}

BEGIN{

    arr_len = split(range, arr, /\//)
    start = arr[1]
    end = arr[2]
    step = arr[3]
    if (step == "") step = 1

    num = (end - start + 1) / step
    if (num < 16) {
        for (i=start; i<=end; i=i+step) print i
        exit(0)
    }

    if (cur !~ /[0-9]+/) {
        exit(0)
    }

    if (inside(cur, start, end, step) == 1) print cur

    cur = cur * 10
    for (i=0; i<=9; ++i) {
        newnum = cur + i
        if (inside(newnum, start, end, step) == 1) print newnum
    }
}
' <<A
A

}

___advise_get_result_from_awk(){
    local result cmd_result
    local IFS=$'\002'
    local s="${COMP_WORDS[*]}"
    s="${s#*"$IFS"}"

    # Handle the case that the last word has "@" or ":" in bash.
    COMP_LINE="${COMP_WORDS[*]}"
    local cur_1="${COMP_WORDS[COMP_CWORD-1]}"
    case "$cur_1" in
        *@|*:)
            if [ "${COMP_LINE% }" != "${COMP_LINE}" ]; then
                s="${s%$cur_1$IFS$cur}"
                s="${s}${cur_1}$cur"
            fi
            ;;
        *)
    esac

    IFS=$'\n'
    result="$(
        {
            cat "$filepath"
            printf "\034%s\034" "$s"
        } | awk -f "$___ADVISE_AWK_PATH" 2>/dev/null
    )"
    local cmd="${result##*\#> }"
    cmd_result=""
    if [ "$cmd" != "$result" ]; then
        cmd_result="$(eval "$cmd")"
        result="${result%%\#> *}"
    fi

    if [ "$cmd" != "$result" ]; then
        cmd_result="$(eval "$cmd" 2>/dev/null)"
        result="${result%%\#> *}"
    fi

    printf "%s" "$result
$cmd_result"
}

___advise_get_result(){

    # If there are two parameters, take the second one.
    local offset="${2:-${1:-0}}"
    local remain_len=$((COMP_CWORD-offset))

    [ -n "$ZSH_VERSION" ] && offset=$((offset+1))
    local filepath="${TMPDIR%/}/.x-cmd/advise_auto_json/${COMP_WORDS[offset]}"
    [ -f "$filepath" ] || return

    # Delete $offset numbers from the COMP_WORDS
    local i tmp=()
    for ((i=0; i<=remain_len; ++i)); do
        tmp+=( "${COMP_WORDS[i+offset]}" )
    done
    COMP_WORDS=("${tmp[@]}")
    COMP_CWORD="$(( ${#tmp[@]}-1 ))"
    ___advise_get_result_from_awk
}

# EndSection

# Section : main

___advise_main(){
    local func="${1:?Provide function name}"
    local filepath="${2}"
    local advise_json_dir="${TMPDIR%/}/.x-cmd/advise_auto_json"
    local tmp_filepath=${advise_json_dir}/$func
    [ ! -d "$advise_json_dir" ] && mkdir -p "$advise_json_dir"

    if [ "-" = "$filepath" ]; then
        filepath=$tmp_filepath
        cat >"$filepath"
    elif [ -z "$filepath" ]; then
        ___advise_update "$func"
        local filepath=$tmp_filepath
        if [ -n "$___XRC_UDPATE" ] || [ ! -f "$filepath" ]; then
            local content
            content="$(X_CMD_ADVISE_FUNC_NAME=$func eval "$func" _x_cmd_advise_json)"
            if [ $? = 126 ]; then
                printf "%s" "$content" >"$filepath"
            else
                return 0
            fi
        fi
    else
        cp "$filepath" "$tmp_filepath"
        filepath="$tmp_filepath"
    fi

    if [ -z "$ZSH_VERSION" ];then
        complete -F "___advise_completer" "$func"
    else
        compdef "___advise_completer" "$func"
    fi
}

___advise_load(){
    for i in "${TMPDIR%/}"/.x-cmd/advise_auto_json/* ; do
        if [ -z "$ZSH_VERSION" ];then
            complete -F "___advise_completer" "${i##*/}"
        else
            compdef "___advise_completer" "${i##*/}"
        fi
    done
}

___advise_update(){
    local func="${1:?Provide function name}"
    local tmp_filepath=${TMPDIR%/}/.x-cmd/advise_auto_json/$func

    if [ -f "$tmp_filepath" ] && [ -z "$(find "$tmp_filepath" -mtime -1)" ]; then
        rm -rf "$tmp_filepath"
        ___advise_main "$func"
    fi
}

___advise_run(){
    local resname cur
    if [ -n "$ZSH_VERSION" ];then
        local COMP_WORDS=("${words[@]}")
        local COMP_CWORD="$(( ${#words[@]}-1 ))"
        cur="${COMP_WORDS[COMP_CWORD+1]}"
        resname="${1:-${COMP_WORDS[1]}}"
    else
        cur="${COMP_WORDS[COMP_CWORD]}"
        resname="${1:-${COMP_WORDS[0]}}"
    fi

    local filepath
    [ -z "$___ADVISE_RUN_CMD_FOLDER" ] && ___ADVISE_RUN_CMD_FOLDER="${TMPDIR%/}/.x-cmd/advise_auto_json"
    case "$resname" in
        /*) filepath="$resname" ;;
        -)  filepath=/dev/stdin ;;
        *)
            if [ -d "$___ADVISE_RUN_CMD_FOLDER/$resname" ]; then
                filepath="$___ADVISE_RUN_CMD_FOLDER/$resname/advise.json"
            else
                filepath="$___ADVISE_RUN_CMD_FOLDER/$resname"
            fi
            ;;
    esac
    [ -f "$filepath" ] || return

    if [ -n "$BASH_VERSION" ] && [ "${BASH_VERSION#3}" = "${BASH_VERSION}" ]; then
        local last="${COMP_WORDS[COMP_CWORD]}"
        case "$last" in
            \"*|\'*)
                COMP_LINE="${COMP_LINE%"$last"}"
                tmp=( $COMP_LINE )
                tmp+=("$last")
                ;;
            *)
                tmp=( $COMP_LINE )
                ;;
        esac

        # Ends with space
        if [ "${COMP_LINE% }" != "${COMP_LINE}" ]; then
            tmp+=( "" )
        fi

        COMP_WORDS=("${tmp[@]}")
        COMP_CWORD="$(( ${#tmp[@]}-1 ))"
    fi

    local OLDIFS="$IFS"
    local IFS=$'\n'
    local cmds
    cmds="$(___advise_get_result_from_awk)"
    local commands=($(printf "%s" "$cmds"))
    desc=()
    cmds=()
    for i in "${commands[@]}"; do
        if [ ! "$i" = "${i%%---*}" ] && [ -n "$ZSH_VERSION" ];then
            desc+=("\"${i%% *}:${i#*--- }\"")
            continue
        fi
        cmds+=("${i%% *}")
    done

    if [ -n "$ZSH_VERSION" ];then
        eval "desc=(${desc[*]})"
        _describe 'commands' desc
        compadd -a cmds
    else
        if [[ ! "$BASH_VERSION" =~ ^3.* ]];then
            if [[ "$result" =~ [:=\/]$ ]];then
                compopt -o nospace
            else
                compopt +o nospace
            fi
        fi

        # shellcheck disable=SC2207
        COMPREPLY=(
            $(
                compgen -W "${cmds[*]}" -- "$cur"
            )
        )

        __ltrim_completions "$cur" "@"
        __ltrim_completions "$cur" ":"
        __ltrim_completions "$cur" "="
    fi
    IFS="$OLDIFS"
}

__ltrim_completions()
{
    local i=${#COMPREPLY[*]}
    ((i == 0)) && return 0
    if [[ $1 == *$2* && $COMP_WORDBREAKS == *$2* ]]; then
        # Remove colon-word prefix from COMPREPLY items
        local colon_word=${1%"${1##*"$2"}"}
        COMPREPLY=("${COMPREPLY[@]}")
        while ((i-- > 0)); do
            COMPREPLY[i]=${COMPREPLY[i]#"$colon_word"}
        done
    fi
}

___advise_completer() {
    # Interesting ... Passing
    ___ADVISE_RUN_CMD_FOLDER= ___advise_run ""
}

# EndSection

if [ -n "$ZSH_VERSION" ] && [ -z "$___X_CMD_ADVISE_ZSH_COMPLETE_LOADED" ] ; then
    ___X_CMD_ADVISE_ZSH_COMPLETE_LOADED=1
    zstyle ':completion:*:*:*:*:*' menu select
    zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|=*' 'l:|=* r:|=*'
    [ "$(autoload | grep compinit)" = "" ] && autoload -Uz compinit && compinit
fi

advise init advise

# Section: man

___advise_man_exists(){
    [ -d "$___X_CMD_ROOT/.tmp/advise/src" ]
}

___advise_man_update(){
    local CACHE="$___X_CMD_ROOT/.tmp/advise/all.tar.gz"
    local srcfolder="$___X_CMD_ROOT/.tmp/advise/src"

    local url="https://gitee.com/x-cmd/advise/raw/main/dist/all.tgz"
    if [ "$___X_CMD_IN_CHINA_NET" != 1 ]; then
        url="https://raw.githubusercontent.com/x-cmd/advise/main/dist/all.tgz"
    fi

    if ___x_cmd_curl "$url"; then
        [ -d "$srcfolder" ] && rm -rf "$srcfolder"
        mkdir -p "$srcfolder"
        tar xvf "$CACHE" -C "$srcfolder"
    fi
}

___advise_man_ls(){
    if ___advise_man_exists || ___advise_man_update; then
        ls "$___X_CMD_ROOT/.tmp/advise/src"
    fi
}

___advise_man_which(){
    local name="${1:?Provide name}"
    if ___advise_man_exists || ___advise_man_update; then
        local p="$___X_CMD_ROOT/.tmp/advise/src/$name/advise.json"
        [ -f "$p" ] && printf "%s" "$p"
    fi

    return 1
}

___advise_man_load(){
    if [[ ! "${1:-""}" == "" ]]; then
        if [ -z "$ZSH_VERSION" ];then
            complete -F "___advise_man_completer" "$1" && return 1
        else
            compdef "___advise_man_completer" "$1" && return 1
        fi
    fi
    local i
    for i in $(___advise_man_ls); do
        if [ -z "$ZSH_VERSION" ];then
            if s=$(complete -p "$i" 1>/dev/null 2>&1); then
                [[ "$s" == *___advise_completer* ]] && continue
            fi
            complete -F "___advise_man_completer" "$i"
        else
            compdef "___advise_man_completer" "$i"
        fi
    done
}

___advise_man_rm(){
    local name="${1:-}"
    local srcfolder="$___X_CMD_ROOT/.tmp/advise/src/$name"
    if ___advise_man_exists; then
        rm -rf "$srcfolder"
    fi
}

___advise_man_completer() {
    # Interesting ... Passing
    ___ADVISE_RUN_CMD_FOLDER="$___X_CMD_ROOT/.tmp/advise/src/" ___advise_run ""
}

___advise_man(){
    local op="${1:?Provide subcommand}"; shift
    case "$op" in
        ls)         ___advise_man_ls              ;;
        update)     ___advise_man_update          ;;
        which)      ___advise_man_which "$@"      ;;
        load)       ___advise_man_load "$@"      ;;
        rm)         ___advise_man_rm "$@"         ;;
        *)          ___advise_man_load "$@"       ;;
    esac
}

# EndSection
fi