# shellcheck shell=bash # xrc

# author:       Li Junhao           l@x-cmd.com
# maintainer:   Li Junhao

xrc str
x log init ccmd

# Check it again.
TMPDIR=${TMPDIR:-$(dirname "$(mktemp -u)")}

ccmd(){
    local op="${1}"
    shift
    case "$op" in
        ""|help)                ___ccmd_help "$@" ;;
        clear)                  ___ccmd_clear "$@" ;;
        setup)                  ___ccmd_setup "$@" ;;
        teardown)               ___ccmd_teardown "$@" ;;
        invalidate|-)           ___ccmd_invalidate "$@" ;;
        _x_cmd_advise_json)     ___ccmd_x_cmd_advise_json "$@" ;;
        *)                      ___ccmd_main "$op" "$@" ;;
    esac
}

___ccmd_main(){
    if [ "$#" -eq 0 ]; then
        ___ccmd_help
        return 0
    fi

    local IFS
    local expiration
    local filepath

    while [ ! "$1" == "--" ]; do
        if [ "$#" -eq 0 ]; then
            ___ccmd_help "PANIC: Expect -- and its following command\n" >&2
            return 64
        fi
        if [ -z "$expiration" ]; then
            expiration="$1"
        elif [ -z "$filepath" ]; then
            filepath="$1"
        else
            ___ccmd_help "More than 3 arguments before --."
            return 64 # EX_USAGE=64         # The command was used incorrectly, e.g., with the wrong number of arguments, a bad flag, a bad syntax in a parameter, or whatever.
        fi
        shift
    done

    shift

    expiration=${expiration:-1d}
    # if [[ ! "$expiration" =~ ^[0-9]+[dmwsh]?$ ]]; then
    if ! str regex "$expiration" "^[0-9]+[dmwsh]?$"; then
        ___ccmd_help "PANIC: Expiration should match pattern n[dmwsh]." >&2
        return 65 # EX_DATAERR=65       # The input data was incorrect in some way. This should only be used for user's data and not system files.
    fi

    if [ -z "$filepath" ]; then
        filepath="${X_CMD_X_BASH_CACHE_CMD_FOLDER:-${TMPDIR}x-cmd-path}"
        mkdir -p "$filepath"
        filepath="$filepath/$(str md5 "$*")"
    fi

    if find "$filepath" -mtime "-${expiration}" 2>/dev/null | grep -q ^; then
        ccmd_log debug "Using cache in Cache Path: $filepath"
        cat "$filepath"
    else
        ccmd_log debug "FILEPATH does't exists or older than ${expiration} second. Update"
        ccmd_log debug "Caching command: $*"

        local TEMP_PATH="$filepath.x-bash.origin.ed15841d4fba5c1dba9045bcbfa0819a"
        if eval "$@" | tee "$TEMP_PATH"; then
            mv "$TEMP_PATH" "$filepath"
            return 0
        else
            local code=$?
            rm "$TEMP_PATH"
            return "$code"
        fi
    fi
}

___ccmd_invalidate(){
    local IFS

    local filepath="${X_CMD_X_BASH_CACHE_CMD_FOLDER:-${TMPDIR}x-cmd-path}"
    filepath="$filepath/$(str_md5 "$*")"

    ccmd_log debug "$*"
    printf "%s\n" "$filepath"

    if [ -f "$filepath" ]; then
        rm "$filepath"
    fi
}

___ccmd_clear(){
    local FILEPATH="${X_CMD_X_BASH_CACHE_CMD_FOLDER:-${TMPDIR}x-cmd-path}"
    rm -f "$FILEPATH/*"
}

# If you want a new environment for script
___ccmd_setup(){
    X_CMD_X_BASH_CACHE_CMD_FOLDER="${1:-"$(mktemp)"}"
    export X_CMD_X_BASH_CACHE_CMD_FOLDER
    mkdir -p "$X_CMD_X_BASH_CACHE_CMD_FOLDER"
}

# Remember teardown if you have setup
___ccmd_teardown(){
    xrc path
    path_rmrf_safe "$X_CMD_X_BASH_CACHE_CMD_FOLDER"
    unset X_CMD_X_BASH_CACHE_CMD_FOLDER
}

___ccmd_x_cmd_advise_json(){
    cat <<A
{
    "help": null,
    "clear": null,
    "setup": null,
    "teardown": null,
    "invalidate": null
}
A
    return 126
}


___ccmd_help(){
    local IFS=

    if [ $# -ne 0 ]; then
        printf "%s
------------------\n" "$@"
    fi

    printf '
ccmd -- cache the command result.

Please visit following websites for more information:
    https://gitee.com/x-bash/cache
    https://github.com/x-bash/cache

SYNOPSIS
    ccmd [expiration, n[smhdw] ] [cache-filepath] -- <command> [...arguments]

DESCRIPTION
    About expiration, pattern like "n[smhdw]"
        n is number, "smhdw" is unit.
        s       second
        m       minute (60 seconds)
        h       hour (60 minutes)
        d       day (24 hours)
        w       week (7 days)

    If no unit provided, the default unit is "d"

    Example:
        Do NOT use cache. Update the command result NOW
            > ccmd 0 -- curl https://x-bash.gitee.io/boot
        Use cache if updated within 1 day. (default)
            > ccmd -- curl https://x-bash.gitee.io/boot
        Use cache if updated within 3 day.
        Cache the command result in future 3 days
            > ccmd 3 -- curl https://x-bash.gitee.io/boot
        Use cache if updated within 3 minutes.
            > ccmd 3m -- curl https://x-bash.gitee.io/boot
        Use cache if updated within 3 hours.
            > ccmd 3h ~/cache -- curl https://x-bash.gitee.io/boot
        Cache the command result in the file "~/cache" regardless whether the command fails
            > ccmd -- curl https://x-bash.gitee.io/boot || true
'
}

if [ -z "$XRC_NO_ADVISE" ] && [ -n "${BASH_VERSION}${ZSH_VERSION}" ] && [ "${-#*i}" != "$-" ]; then
    # xrc_log debug "Using module advise for completion."
    xrc advise/latest
    advise ccmd
fi

xrc setmain ccmd
