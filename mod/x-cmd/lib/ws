

___x_cmd_wsroot(){
    local cur="${1:-.}"

    cur="$(cd "$cur" 1>/dev/null 2>&1 && pwd)"

    while [ ! "$cur" = "" ]; do
        if [ -d "$cur/.x-cmd" ]; then
            printf "%s" "$cur"
            return 0
        fi
        cur=${cur%/*}
    done
    return 1
}

___x_cmd_ws(){
    local X_DISABLE_WORKSPACE_EXECUTION_CONFIRMATION=1

    local TGT

    if [ -z "$1" ]; then
        if TGT="$(___x_cmd_search_path . ".x-cmd/ws")"; then
            ___x_cmd_exe_workspace "$TGT/.x-cmd/ws"
            return
        else
            printf "%s\n" "Cannot find .x-cmd/ws" >&2
            return 1
        fi
    fi

    local RESOURCE_NAME="$1"; shift
    if TGT="$(___x_cmd_search_path . ".x-cmd/ws")"; then
        ___x_cmd_exe_workspace "$TGT/.x-cmd/ws" "$RESOURCE_NAME" "$@"
        return
    elif TGT="$(___x_cmd_search_path . ".x-cmd/$RESOURCE_NAME")"; then
        ___x_cmd_exe_workspace "$TGT/.x-cmd/$RESOURCE_NAME" "$@"
        return
    else
        printf "Workspace Resource Not found: %s\n" "$RESOURCE_NAME" >&2
        return 1
    fi
}

___x_cmd__ws(){
    local X_DISABLE_WORKSPACE_EXECUTION_CONFIRMATION=1

    local RESOURCE_NAME="$1"; shift

    local TGT
    if TGT="$(___x_cmd_search_path . ".x-cmd/$RESOURCE_NAME")"; then
        ___x_cmd_exe_workspace "$TGT/.x-cmd/$RESOURCE_NAME" "$@"
        return
    else
        printf "Workspace Resource Not found: %s\n" "$RESOURCE_NAME" >&2
        return 1
    fi
}


# Section : Find And Execute at .x-cmd folder

___x_cmd_exe_workspace(){
    local filepath="${1:?filepath}"
    if [ -L "$filepath" ]; then
        filepath="$(___x_cmd_readlink_recursive "$filepath")"
        filepath="$(___x_cmd_abspath "$filepath")"
    fi

    # TODO: notice. Filepath should be colorized and emphasized.
    # TODO: Hit enter twise will ignore this. But really, should we add this protection?
    if [ -z "$X_DISABLE_WORKSPACE_EXECUTION_CONFIRMATION" ]; then
        while true; do
            printf "%s" \
"=> Running file: $filepath ?
=> Enter or press y to continue, n to abort. default is y: " >&2

            read -r action
            case $action in
                n|no|nein|ne)  cat >&2 <<A
=> You could run the file by yourself:
\033[32m    x \"$filepath\" \033[;0m
A
                    return 1
                    ;;
                ""|y)            printf "%s\n" "";     break ;;
            esac
        done
    fi

    shift
    if [ -x "$filepath" ]; then
        exec 3>&1
        local err
        if err="$("$filepath" "$@" 2>/dev/stdout 1>&3)"; then
            exec 3<&-
            printf "%s\n" "$err" >&2
            return
        else
            local code=$?
            # Bad interpreter
            if [ $code != 126 ] && [ $code != 127 ] && [ "${err%Permission denied}" = "$err" ]; then
                ___x_cmd_run_by_file_ext "$filepath" "$@"
                return
            fi
        fi
    fi

     # workspace
    ___X_CMD_WSROOT="$filepath"
    ___X_CMD_WSROOT="$(dirname "$___X_CMD_WSROOT")"
    ___X_CMD_WSROOT="$(cd "$___X_CMD_WSROOT" && pwd)/"
    ___X_CMD_WSROOT="${___X_CMD_WSROOT%/.x-cmd/*}"

    export ___X_CMD_WSROOT

    ___x_cmd_run_by_file "$filepath" "$@"
    if [ $? = 126 ]; then
        cat >&2 <<A
Cannot find out how to execute the file: "$filepath". Please specify the execution engine. For more information, consult 'x help'
A
    fi

}

# EndSection


