# shellcheck    shell=sh    disable=SC3043  # xrc

# Section: uname
___x_cmd_os_lsuname(){
    printf "%s" "linux
darwin
sunos
freebsd
openbsd
aix
cygwin
msys
mingw
"
}

___x_cmd_os_uname_(){
    [ -z "$___X_CMD_OS_UNAME_" ] || return 0

    case "$(command uname -a)" in
        Linux\ *)                   ___X_CMD_OS_UNAME_=linux ;;
        Darwin\ *)                  ___X_CMD_OS_UNAME_=darwin ;;
        SunOS\ *)                   ___X_CMD_OS_UNAME_=sunos ;;
        FreeBSD\ *)                 ___X_CMD_OS_UNAME_=freebsd ;;
        OpenBSD\ *)                 ___X_CMD_OS_UNAME_=openbsd ;;         # TODO: Netbsd?
        AIX\ *)                     ___X_CMD_OS_UNAME_=aix ;;
        CYGWIN* | MSYS* | MINGW*)   ___X_CMD_OS_UNAME_=win ;;
    esac

}

___x_cmd_os_uname() {
    ___x_cmd_os_uname_ || return
    if [ "$#" -eq 0 ]; then
        printf "%s\n" "$___X_CMD_OS_UNAME_"
    else
        x case "$___X_CMD_OS_UNAME_" "$@"
    fi
}

# EndSection


# Section: name
___x_cmd_os_lsname(){
    printf "%s" "linux
darwin
sunos
freebsd
openbsd
aix
win"
}

___x_cmd_os_name_(){
    [ -z "$___X_CMD_OS_NAME_" ] || return 0

    case "$(command uname -a)" in
        Linux\ *)                   ___X_CMD_OS_NAME_=linux ;;
        Darwin\ *)                  ___X_CMD_OS_NAME_=darwin ;;
        SunOS\ *)                   ___X_CMD_OS_NAME_=sunos ;;
        FreeBSD\ *)                 ___X_CMD_OS_NAME_=freebsd ;;
        OpenBSD\ *)                 ___X_CMD_OS_NAME_=openbsd ;;         # TODO: Netbsd?
        AIX\ *)                     ___X_CMD_OS_NAME_=aix ;;
        CYGWIN* | MSYS* | MINGW*)   ___X_CMD_OS_NAME_=win ;;
    esac

}

___x_cmd_os_name() {
    ___x_cmd_os_name_ || return
    if [ "$#" -eq 0 ]; then
        printf "%s\n" "$___X_CMD_OS_NAME_"
    else
        x case "$___X_CMD_OS_NAME_" "$@"
    fi
}

# EndSection


# Section: arch
___x_cmd_os_lsarch(){
    printf "%s" "linux
x64
x64
arm64
armv7l"
}

___x_cmd_os_arch_() {
    [ -z "$___X_CMD_OS_ARCH_" ] || return 0

    local HOST_ARCH

    ___x_cmd_os_name_

    if [ "${___X_CMD_OS_NAME_}" = "sunos" ]; then
        # first try to use pkgsrc to guess the most appropriate arch.
        if HOST_ARCH=$(pkg_info -Q MACHINE_ARCH pkg_install 2>/dev/null); then
            HOST_ARCH=$(echo "${HOST_ARCH}" | command tail -1)
        else
            # If it's not available, use isainfo to get the instruction set supported by the kernel.
            HOST_ARCH=$(isainfo -n)
        fi
    elif [ "${___X_CMD_OS_NAME_}" = "aix" ]; then
        HOST_ARCH=ppc64
    else
        HOST_ARCH="$(command uname -m)"
    fi

    case "${HOST_ARCH}" in
        x86_64 | amd64)     ___X_CMD_OS_ARCH_="x64" ;;
        i*86)               ___X_CMD_OS_ARCH_="x86" ;;
        aarch64)            ___X_CMD_OS_ARCH_="arm64" ;;
        *)                  ___X_CMD_OS_ARCH_="${HOST_ARCH}" ;;     # TODO: Consider 32bit arm? For router or raspberry pi 3?
    esac

    # If running a 64bit ARM kernel but a 32bit ARM userland, change ARCH to 32bit ARM (armv7l)
    if [ "$___X_CMD_OS_NAME_" = "Linux" ] && [ "${___X_CMD_OS_ARCH_}" = arm64 ]; then
        local L
        L=$(ls -dl /sbin/init 2>/dev/null) #                                         if /sbin/init is 32bit executable
        if [ "$(od -An -t x1 -j 4 -N 1 "${L#*-> }")" = ' 01' ]; then
            ___X_CMD_OS_ARCH_=armv7l
        fi
    fi
}

___x_cmd_os_arch(){
    ___x_cmd_os_arch_ "$@" || return

    if [ "$#" -eq 0 ]; then
        printf "%s\n" "$___X_CMD_OS_ARCH_"
    else
        x case "$___X_CMD_OS_ARCH_" "$@"
    fi

}
# EndSection
