

# Section: op: shift/unshift, push/pop, uniq
___x_cmd_path_shift(){
    PATH="${PATH#*:}"
}

___x_cmd_path_add(){
    ___x_cmd_path_unshift "$*"
}

___x_cmd_path_unshift(){
    [ "$#" -ne 0 ] || return 1
    local IFS=":"
    if [ -z "$PATH" ]; then         PATH="$*"
    else                            PATH="$*:${PATH}"
    fi

}

___x_cmd_path_push(){
    [ "$#" -ne 0 ] || return 1
    local IFS=":"
    if [ -z "$PATH" ]; then         PATH="$*"
    else                            PATH="${PATH}:$*"
    fi
}

___x_cmd_path_pop(){
    PATH="${PATH%:*}"
}

# EndSection

# Section: rm and op
___x_cmd_path_rm_(){
    local dir="${1:?Provide a directory}"
    if [ -z "$PATH" ] ; then
        _1=":"
        return
    fi
    _1=":$PATH:"
    local p="${_1#*:"$dir":}"
    while [ "$_1" != "$p" ]; do
        _1="${_1%%:"$dir":*}:$p"
        p="${_1#*:"$dir":}"
    done
}

___x_cmd_path_rm(){
    local _1
    ___x_cmd_path_rm_ "$@"
    PATH="${_1#:}"
    PATH="${PATH%:}"
}

___x_cmd_path_rm_by_prefix___(){
    local prefix="${1:?Provide a directory}"
    if [ -z "$PATH" ] ; then
        _1=":"
        return
    fi
    _1=":$PATH:"
    local p="${_1#*:"$prefix"*:}"
    while [ "$_1" != "$p" ]; do
        _1="${_1%%:"$prefix"*:*}:$p"
        p="${_1#*:"$prefix"*:}"
    done
}

___x_cmd_path_rm_by_prefix(){
    local _1
    ___x_cmd_path_rm_by_prefix___ "$@"
    PATH="${_1#:}"
    PATH="${PATH%:}"
}

___x_cmd_path_rm_by_suffix___(){
    local suffix="${1:?Provide a directory}"
    if [ -z "$PATH" ] ; then
        _1=":"
        return
    fi
    _1=":$PATH:"
    local p="${_1#*:*"$suffix":}"
    while [ "$_1" != "$p" ]; do
        _1="${_1%%:*"$suffix":*}:$p"
        p="${_1#*:*"$suffix":}"
    done
}

___x_cmd_path_rm_by_suffix(){
    local _1
    ___x_cmd_path_rm_by_suffix___ "$@"
    PATH="${_1#:}"
    PATH="${PATH%:}"
}

___x_cmd_path_down_or_push(){
    local _1
    ___x_cmd_path_rm_ "$@"
    _1="${_1}${dir}"
    PATH="${_1#:}"
    PATH="${PATH%:}"
}
# EndSection

# Section: More frequently used function: up_or_unshift, add_existed_folder
___x_cmd_path_up_or_unshift(){
    local _1
    ___x_cmd_path_rm_ "$@"
    # _1=${_1#:}
    _1="${dir}${_1}"
    PATH="${_1%:}"
}

___x_cmd_path_add_existed_folder(){
    local dir="${1:?Provide a directory}"

    if [ ! -d "$dir" ] ; then
        printf "%s\n" "Failed to add path: $dir, not a directory" >&2
        return 1
    fi

    ___x_cmd_path_up_or_unshift "$@"
}

___x_cmd_path__x_cmd_advise_json(){
    cat "$___X_CMD_ROOT_MOD/path/lib/path.advise.json"
}

# EndSection


## Section: basic
if [ -z "$ZSH_VERSION" ]; then
___x_cmd_path_uniq(){
    local IFS=:
    local newpath=:
    local p; for p in $PATH; do
        [ "$newpath" != "${newpath#*:$p:}" ] || newpath="${newpath}${p}:"
    done
    PATH="${newpath#:}"
    PATH="${PATH%:}"
}

else
___x_cmd_path_uniq(){
    local IFS=:
    local newpath=:
    local path_tmp="$PATH"
    local p; while :; do
        p="${path_tmp%%:*}"
        [ "$p" != "$path_tmp" ] || break
        path_tmp="${path_tmp#*:}"
        [ "$newpath" != "${newpath#*:$p:}" ] || newpath="${newpath}${p}:"
    done
    PATH="${newpath#:}"
    PATH="${PATH%:}"
}

fi
# EndSection
