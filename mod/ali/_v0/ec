# shellcheck shell=sh disable=SC3043,SC2154

# author:       Li Junhao           l@x-cmd.com    edwinjhlee.github.io
# maintainer:   Li Junhao

ali_ec(){
    param:dsl <<A
subcommand:
    ls                  "list"
    quick               "quick"
    start               "start instance"
    stop                "stop instance"
    create              "create instance"
    del                 "delete instance"
    exact               "exact"
    exactid             "exactid"
    info                "info"
    
A
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        ali_ec_quick "$@"
        return
    fi

    "ali_ec_$PARAM_SUBCMD" "$@"
}

ali_ec_info(){
    param:void
    ali_ec_exact "${1:?Provide keyword}"
}

# shellcheck disable=SC2120
ali_ec_ls(){
    param:void
    if [ ! -t 1 ]; then
        _ali_ec_ls "$@"
        return
    fi
    
    _ali_ec_ls "$@" \
        | x jq '.[] |= . +  { 
            OSNameEn: .OSNameEn | gsub("  "; " ") | gsub("64 bit"; "")
        }' \
        | ali_table_json \
            .InstanceId .HostName .StartTime .Status .OSNameEn   CP=.Cpu    MEM=.Memory     IP=.EipAddress.IpAddress .InstanceType .StoppedMode  

}

# shellcheck disable=SC2120
_ali_ec_ls(){
    case $# in
        0)  ccmd 1s -- aliyun ecs DescribeInstances | x jq .Instances.Instance
            ;;
        *)  _ali_ec_ls | x jq .[] | _ali_ec_filter "${1:-Provide regex pattern}" | x jq -s .
            ;;
    esac
}

ali_exactor_declare ali_ec "No such ec server found." "Multiple ec server found." InstanceId

_ali_get_dns(){
    # Using dig/nslookup is much better for icmp might be disable.
    ping -W 0.01 -c 1 "${1:-hostname}" 2>/dev/null | awk 'NR==1 {
        match( $3, /\([0-9.]+\)/ )
        if (RLENGTH > 0) print substr($3, 2, RLENGTH - 2)
        else    exit 1
}'
}

ali_ec_new(){
    local s
    s=$(ali_ec_ls)    
    local len
    len=$(echo "$s" | x jq -s '. | length')
    case "$len" in
        0)  return 1        ;;
        1)  echo "$s"       ;;
        *)  echo "$s"       ;;
    esac

    return 0
}

_ali_ec_filter(){
    local pattern="${1:?Provide pattern}"
    local s
    s="$(cat)"

    local res
    res="$(x jq "
        if .EipAddress.IpAddress | test(\"${pattern}\")  then . 
        elif .InstanceId | test(\"$pattern\") then . 
        elif .HostName | test(\"$pattern\") then . 
        elif .InstanceName | test(\"$pattern\") then . 
        else empty end
    " <<A
$s
A
)"

    # Using dig for DNS
    local len
    len=$(echo "$res" | x jq -s '. | length')

    if [ "$len" != 0 ]; then
        echo "$res"
        return 0
    fi

    local ip
    if ip=$(_ali_get_dns "$pattern"); then
        x jq "
    if .EipAddress.IpAddress == \"${ip}\"  then .
    else empty end
" <<A
$s
A
        :
    fi

}

ali_ec_op(){
    param:void

    local subcmd="${1:?subcmd}"
    case "$subcmd" in
        start)          ;;
        info)           ;;
        stop)           ;;
        restart)        ;;
    esac
}

ali_ec_start(){
    param:void
    local id
    if id="$(ali_ec_exactid "$@")"; then
        ali_log info "Instance ID: $id"
        aliyun ecs StartInstance --InstanceId "$id"
    fi
}

# reboot forcely
ali_ec_reboot(){
    param:void
    local id
    if id="$(ali_ec_exactid "$@")"; then
        ali_log info "Instance ID: $id"
        aliyun ecs RebootInstance --InstanceId "$id"
    fi
}


ali_ec_stop(){
    param:void
    local id
    if id="$(ali_ec_exactid "$@")"; then
        ali_log info "Instance ID: $id"
        aliyun ecs StopInstance --InstanceId "$id"
    fi
}

ali_ec_del(){
    param:void
    local id
    if id="$(ali_ec_exactid "$@")"; then
        ali_log info "Instance ID: $id"
        aliyun ecs DeleteInstance --InstanceId "$id"
    fi
}

# aliyun ecs new-auto

# aliyun ecs new 47.242.182.73 abc
# aliyun ecs new a.lteam.top abc
# aliyun ecs host

# abc start
# abc stop
# abc info

# check hostname
# check ip
# check dns name
# check

ali_ec_disk_args(){
    printf "%s" "$1" | awk -v FS='|' '
function str_trim(astr){
    gsub(/^[ \t\b\v\n]+/, "", astr)
    gsub(/[ \t\b\v\n]+$/, "", astr)
    return astr
}

function pprint(name, val){
    if (val == "") return
    printf("%s \"%s\" ", name, str_trim(val))
}

{
    pprint("--SystemDisk.Size",         $1)

    if ($2 ~ /PL[0-3]/) {
        pprint("--SystemDisk.Category",             "cloud_essd")
        pprint("--SystemDisk.PerformanceLevel",     $2)
    } else {
        if ($2 != "")   $2 = "cloud_efficiency"
        pprint("--SystemDisk.Category",     $2)
    }
    pprint("--SystemDisk.DiskName",     $3)
    pprint("--SystemDisk.Description",  $4)
}    
'
}

# ali ec create --image ubuntu_20_04_x64 --switch inner-d --type ecs.t6-c1m1.large --disk "40||brand|disk for test"
ali_ec_create(){
    param:dsl <<A
options:
    --name      "ec name"               <instance-name>=""
    --image     "Image keyword"         <image>="ubuntu_20_04_x64"
    --switch    "switch"                <switch>=""
    --type      "instance keyword"      <instance-type>
    --disk      "system disk"           <disk>="40|cloud_ssd|diskname|diskdescription"
A
    param:run
    
    local image_id
    if ! image_id=$(ali_image_exactid "$image"); then
        return
    fi

    local switch_id
    if ! switch_id=$(ali_vpc_switch_exactid "$switch"); then
        return
    fi

    name="${name:-"$type-$(date +%y%m%d%H%m)"}"

    local disk_args
    disk_args="$(ali_ec_disk_args "$disk")"

    eval_echo aliyun ecs CreateInstance \
        --InstanceType "$type" \
        --ImageId "$image_id" \
        --VSwitchId "$switch_id" \
        "$disk_args"
}

ali_ec_quick(){
    param:void
    ali_quicker2 ec "$@"
}

