# shellcheck shell=sh disable=SC1072,SC3043

___x_cmd_hub_login(){
    param:void
    local op="$1"
    local _SELECT
    case "$op" in
        *@*)                    ___x_cmd_hub_login_email_witharg "$@" ;;
        wx|weixin)              ___x_cmd_hub_login_weixin_qr ;;
        tg|telegram)            ___x_cmd_hub_login_telegram_qr ;;
        "")
                ___x_cmd_ui_select "_SELECT" \
                    "Login Methods:" \
                        "Open Browser to x-cmd.com" \
                        "Login With Weixin QR" \
                        "Login With Email Verification"
                        # "Login With Telegram QR" \
                        # "Login With OneTime Password"    # SMS, Telegram, Email, Weixin

                # TODO: Should move official site login to the first of the list
                case "$_SELECT" in
                    # 2)          ___x_cmd_hub_login_telegram_qr "$@" ;;
                    1)          ___x_cmd_hub_login_official_site "$@" ;;
                    2)          ___x_cmd_hub_login_weixin_qr     "$@" ;;
                    3)          ___x_cmd_hub_login_email         "$@" ;;
                    *)          ;;
                esac
                ;;
        *)
                ___x_cmd_hub_login_official_site "$@" ;;
    esac
}

___x_cmd_hub_logout(){
    param:void
    ___x_cmd_hub_token "" && \
        hub:info "Logout Successfully"
}

# Section: telegram, weixin, official_site

___x_cmd_hub_login_telegram_qr(){
    local TOKEN_TO_ACTIVATE
    TOKEN_TO_ACTIVATE="$(___x_cmd_hub_token_generate)"
    ___x_cmd_hub_token "${TOKEN_TO_ACTIVATE}"

    echo x qrencode -t ANSI "https://....${TOKEN_TO_ACTIVATE}"
}

___x_cmd_hub_login_weixin_qr(){
    local token_to_activate
    token_to_activate="$(___x_cmd_hub_token_generate)"

    ___x_cmd_hub_print_qrcode "$(___x_cmd_hub_wechat_login_url "${token_to_activate}")"
    printf "Please scan the QR code above, then press [Enter] to continue: "
    read -r _

    local userinfo
    if userinfo="$(___x_cmd_hub_get_userinfo_by_token "${token_to_activate}")" ; then
        ___x_cmd_hub_token "${token_to_activate}"
        hub:info "Login Successfully, ${userinfo}, save token to ${___X_CMD_HUB_ENV}/.token"
    else
        hub:error "Login Failed"
    fi
}

___x_cmd_hub_login_official_site(){

    local token_to_activate
    token_to_activate="$(___x_cmd_hub_token_generate)"

    # TODO: to change xlogin to login
    ___x_cmd_http_browse "$___X_CMD_HUB_SERVICE_URL/xlogin?token_to_activate=${token_to_activate}"
    printf "Please login to hub.x-cmd.com, then press [Enter] to continue: " >&2
    read -r _

    local userinfo
    if userinfo="$(___x_cmd_hub_get_userinfo_by_token "${token_to_activate}")" ; then
        ___x_cmd_hub_token "${token_to_activate}"
        hub:info "Login Successfully, ${userinfo}, save token to ${___X_CMD_HUB_ENV}/.token"
    else
        hub:error "Login Failed"
    fi
}

# EndSection

# Section: email(frozen)
___x_cmd_hub_login_email_witharg(){
    local email="${1:?Provide email}"
    local token_to_activate
    token_to_activate="$(___x_cmd_hub_token_generate)"

    local res
    if ! res="$(___x_cmd_httpget "$___X_CMD_HUB_SERVICE_URL/api/v0/account/login/$email?token_to_activate=${token_to_activate}")" ; then
        hub:error "Failed to login with email: $email, res: $res"
        return 1
    fi
    hub:debug "Login with email: $email, res: $res"
    printf "%s" "Please check your email $email to approve, then press [Enter] to continue: " >&2
    read -r _

    local userinfo
    if userinfo="$(___x_cmd_hub_get_userinfo_by_token "${token_to_activate}")" ; then
        ___x_cmd_hub_token "${token_to_activate}"
        hub:info "Login Successfully, ${userinfo}, save token to ${___X_CMD_HUB_ENV}/.token"
    else
        hub:error "Login Failed"
    fi
}

___x_cmd_hub_login_email(){
    local email="${1}"
    if [ -z "$email" ]; then
        printf "%s" "Email: "
        read -r email
    fi
    ___x_cmd_hub_login_email_witharg "$email"
}

# EndSection
