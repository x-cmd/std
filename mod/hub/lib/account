# shellcheck shell=sh disable=SC3043,SC1091,SC3028

xrc ui/lib/select http

# Section(utils): ___x_cmd_hub_token_generate

if command -v md5sum >/dev/null; then
    # TODO(refactor): to remove " -" from the end of the string
    ___x_cmd_hub_token_md5(){
        local token
        token="$(md5sum "$@")"
        printf "%s" "${token%% *}"
    }
else
    ___x_cmd_hub_token_md5(){
        md5 "$@"
    }
fi

if [ -n "$RANDOM" ]; then
    ___x_cmd_hub_token_random_md5(){
        printf "%s" "${RANDOM}${RANDOM}${RANDOM}${RANDOM}${RANDOM}${RANDOM}" | ___x_cmd_hub_token_md5 "$@"
    }
else
    ___x_cmd_hub_token_random_md5(){
        dd if=/dev/random bs=1024 count=1 2>/dev/null | ___x_cmd_hub_token_md5 "$@"
    }
fi

___x_cmd_hub_token_generate(){
    printf "%s%s" "$(date +%s)" "$(___x_cmd_hub_token_random_md5 "$@")" | ___x_cmd_hub_token_md5 "$@"
}

# EndSection

# Section: qrcode

___x_cmd_hub_print_qrcode(){
    x qr enc -s 1 -m 3 -t ANSIUTF8 "$1"
    hub:debug "QR Code url: $1"
}

___x_cmd_hub_wechat_register_url(){
    local token_to_activate="${1:?provide token_to_activate}"
    local username="${2:?provide username}"
    printf "%s" "${___X_CMD_HUB_WECHAT_AUTHORIZE_URL_PREFIX}r%3Fu%3D${username}&response_type=code&scope=snsapi_userinfo&state=${token_to_activate}#wechat_redire"
}

___x_cmd_hub_wechat_login_url(){
    local token_to_activate="${1:?provide token_to_activate}"
    printf "%s" "${___X_CMD_HUB_WECHAT_AUTHORIZE_URL_PREFIX}l&response_type=code&scope=snsapi_userinfo&state=${token_to_activate}#wechat_redire"
}

# EndSection

# Section(env): ___x_cmd_hub_user, ___x_cmd_hub_token, ___x_cmd_hub_get_userinfo_by_token

___x_cmd_hub_user(){
    param:void
    ___x_cmd_hub_get_userinfo_by_token "$(___x_cmd_hub_token)"
}

# shellcheck disable=SC2120

# The only one true way to get and set the token
___x_cmd_hub_token(){
    param:void
    if [ "$#" -eq 0 ]; then
        cat "$___X_CMD_HUB_ENV/.token" 2>/dev/null
    else
        printf "%s\n" "${1}" > "$___X_CMD_HUB_ENV/.token"
    fi
}

# TODO: We should cache the user info, and update it when the token is expired
___x_cmd_hub_get_userinfo_by_token(){
    local token="${1}"
    if [ -z "$token" ]; then
        hub:error "Token is empty, please login first"
        return 1
    fi

    local res
    if ! res="$(___x_cmd_httpget "$___X_CMD_HUB_SERVICE_URL/api/v0/account/user?token=${token}")" ; then
        hub:error "Failed to get userinfo by token: $res"
        return 1
    fi
    hub:debug "Get response: ${res}"

    local userid
    local username

    {
        read -r userid
        read -r username
    } <<A
$res
A

    userid="${userid#id=}"
    username="${username#username=}"
    printf "%s\n" "${username} ${userid}"
}

# EndSection

___x_cmd_source_inner_lib hub account_login account_registration
