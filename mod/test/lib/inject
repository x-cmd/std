
___x_cmd_test_source_inner_inject(){
    while [ $# -gt 0 ]; do
        if [ "${1%%/*}" = "$___X_CMD_TEST_INJECT_MOD" ]; then
            . "$___X_CMD_TEST_INJECT_PATH/${1#*/}"
        else
            . "$___X_CMD_ROOT_MOD/$1"
        fi
        shift
    done
}

___x_cmd_test_source_inner_lib_inject(){
    local mod="${1:?Provide module name}"; shift
    if [ "$___X_CMD_TEST_INJECT_MOD" = "$mod" ]; then
        local ___X_CMD_ROOT_MOD="${___X_CMD_TEST_INJECT_PATH%/*}"
        mod="${___X_CMD_TEST_INJECT_PATH##*/}"
    fi
    ___x_cmd_source_inner_lib "$mod" "$@"
}

___x_cmd_test_inject(){
    if [ "$#" -ne 2 ]; then
        x:info "Provide two arguments: <module> <path>"
        return 1
    fi
    ___X_CMD_TEST_INJECT_MOD="${1:?Provide module}"
    ___X_CMD_TEST_INJECT_PATH="${2:?Provide path}"
}

___x_cmd_test_inject_apply(){
    [ -n "$___X_CMD_TEST_INJECT_MOD" ] || return
    alias xrc:mod=___x_cmd_test_source_inner_inject
    alias xrc:mod:lib=___x_cmd_test_source_inner_lib_inject
    [ ! -f "$___X_CMD_TEST_INJECT_PATH/latest" ] || . "$___X_CMD_TEST_INJECT_PATH/latest"
}

___x_cmd_test_inject_recover(){
    alias xrc:mod=___x_cmd_source_inner
    alias xrc:mod:lib=___x_cmd_source_inner_lib
    ___X_CMD_TEST_INJECT_MOD=
    ___X_CMD_TEST_INJECT_PATH=
}
