
# Section: exclude
___x_cmd_test___cycle_exclude(){
    local target="${1:?Provide target}"; shift

    local pattern
    for pattern in "$@"; do
        case "$pattern" in
            +*)     ___x_cmd_test___cycle_pat "$target" "${pattern#?}" && return 0 ;;
            -*)     ___x_cmd_test___cycle_pat "$target" "${pattern#?}" && return 1 ;;
        esac
    done
    return 0
}

___x_cmd_test___cycle_pat(){
    local target="$1"
    local pattern="$2"

    eval "
    case \"\$target\" in
        $pattern)       return 0 ;;
        *)              return 1 ;;
    esac 2>/dev/null

    " 2>/dev/null
}
# EndSection

# Section: cycle init
___x_cmd_test_cycle_init(){
    xrc:mod assert/latest
    exec 6<>/dev/stderr

    x log +cycle

    alias @assert:errexit='___x_cmd_test_errexit on'
    alias @assert:errexit:off='___x_cmd_test_errexit off'

    alias @assert='___x_cmd_test_true_or_exit ___x_cmd_assert'
    alias @assert:file:func='___x_cmd_test_true_or_exit ___x_cmd_test_assert_true_for_all_func'

    alias @debug='  2>&6 ___x_cmd_test_log_indent;    2>&6 x log :cycle debug '
    alias @info='   2>&6 ___x_cmd_test_log_indent;    2>&6 x log :cycle info'
    alias @warn='   2>&6 ___x_cmd_test_log_indent;    2>&6 x log :cycle warn'
    alias @error='  2>&6 ___x_cmd_test_log_indent;    2>&6 x log :cycle error'
}


___x_cmd_test_assert_true_for_all_func() {
    < "${1:-$___X_CMD_TEST_CURRENT_TESTCASE}" \
        awk -v PREFIX="${2:-test}" '$0~ "^" PREFIX "_[^\\(]+\\(\\)"{ gsub(/\(\)\{/, "", $0); print $0 }' | \
    while read -r ___line; do
        printf "%s\n" "Testing Function: $___line"
        if ! eval "$___line"; then
            printf "\033[0;31m======= Fail at function: %s \033[0m" "$___line" >&2
            return 1
        fi
    done
}

___x_cmd_test_true_or_exit(){
    local code
    "$@"
    code=$?
    if [ $code -ne 0 ]; then
        [ -z "$___X_CMD_TEST_ASSERT_ERREXIT" ] || exit $code
    fi
    return "$code"
}

# EndSection


# Section: ui

# x log init testcase

___x_cmd_test_log_indent(){
    printf "%s" "      >>>>>>>>  " >&2
}

# EndSection
