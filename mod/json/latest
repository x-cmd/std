# shellcheck shell=sh disable=SC2039,SC3043 # xrc

# author:       Li Junhao           l@x-cmd.com

___X_CMD_JSON_AWK_PATH="$(xrc which json/lib/v0_walk.awk)"

# Section: main

# TODO: Using subcmd module to enhance.

___x_cmd_json(){
    local op="${1}";    [ "$#" -ge 1 ] && shift 1

    case "$op" in
        help|"")            xrc cat json/lib/help.txt >&2    ;;
        var)                ___x_cmd_json_var           "$@" ;;
        color)              ___x_cmd_json_color         "$@" ;;
        push|append)        ___x_cmd_json_push          "$@" ;;
        unshift|prepend)    ___x_cmd_json_prepend       "$@" ;;
        put)                ___x_cmd_json_put           "$@" ;;
        keys)               ___x_cmd_json_keys          "$@" ;;
        values)             ___x_cmd_json_values        "$@" ;;
        query)              ___x_cmd_json_query         "$@" ;;
        del)                ___x_cmd_json_del           "$@" ;;
        shift)              ___x_cmd_json_shift         "$@" ;;
        pop)                ___x_cmd_json_pop           "$@" ;;
        length)             ___x_cmd_json_length        "$@" ;;
        unescape)           ___x_cmd_json_unescape      "$@" ;;
        data)               ___x_cmd_json_data          "$@" ;;
        *)                  ___x_cmd_json_query         "$op" "$@" ;;
    esac
}

# EndSection

# Section: data
___x_cmd_json_data(){
    ___x_cmd_curl_gitx x-cmd json-test-data main data/one.mb.json "${TMPDIR}/mb1.json"
    seq "${1:-1}" | x args 1 - cat "${TMPDIR}/mb1.json"
}
# EndSection

# Section: functions

# We have a better design
___x_cmd_json_var(){
    local varname="${1:?Provide variable name}"
    shift
    local s
    if [ $# -ne 0 ]; then
        s="$(awk -f "$___X_CMD_JSON_AWK_PATH" <<A
$(eval echo $(printf "%s" \"$@\"))
A
)"
    else
        s="$(awk -f "$___X_CMD_JSON_AWK_PATH" -)"
    fi
    local code=$?
    if [ $code -eq 0 ]; then eval "$varname=\"\$s\""
    else return 1;  fi
}

___x_cmd_json_color(){
    if [ "$1" ]; then
        local varname="${1:?Provide variable name}"
        awk -v format=1 -v color=1 -f "$___X_CMD_JSON_AWK_PATH" <<A
$(eval echo $(printf "%s" \"\$"${varname}"\"))
A
    else
        awk -v format=1 -v color=1 -f "$___X_CMD_JSON_AWK_PATH" -
    fi
}

# aaa.push()
___x_cmd_json_push(){ ___x_cmd_json_append "$@"; }

# aaa.append()
___x_cmd_json_append(){
    local keypath="${1:?Provide variable name}"
    local opv2="${2:?Provide value}"

    local varname=${keypath%%.*}
    local opv1=".${keypath#*.}"
    [ "$varname" = "$keypath" ] && opv1="."
    shift 2

    local s
    if [ "$varname" ]; then
        s="$(awk -v op=append -v opv1="$opv1" -v opv2="$opv2" -f "$___X_CMD_JSON_AWK_PATH" <<A
$(eval echo $(printf "%s" \"\$"${varname}"\"))
A
)"
    else
        s="$(awk -v op=append -v opv1="$opv1" -v opv2="$opv2" -f "$___X_CMD_JSON_AWK_PATH")"
    fi
    local code=$?
    if [ $code -eq 0 ]; then eval "$varname=\"\$s\""
    else return 1;  fi
}

# aaa.prepend("value")
___x_cmd_json_unshift(){ ___x_cmd_json_prepend "$@"; }
___x_cmd_json_prepend(){
    local keypath=${1:?Provide variable name}
    local opv2="${2:?Provide value}"

    local varname=${keypath%%.*}
    local opv1=".${keypath#*.}"

    [ "$varname" = "$keypath" ] && opv1="."
    shift 2

    local s
    if [ "$varname" ]; then
        s="$(awk -v op=prepend -v opv1="$opv1" -v opv2="$opv2" -f "$___X_CMD_JSON_AWK_PATH" <<A
$(eval echo $(printf "%s" \"\$"${varname}"\"))
A
)"
    else
        s="$(awk -v op=prepend -v opv1="$opv1" -v opv2="$opv2" -f "$___X_CMD_JSON_AWK_PATH")"
    fi
    local code=$?
    if [ $code -eq 0 ]; then eval "$varname=\"\$s\""
    else return 1;  fi
}

# jo b.b= 2

: <<'DOCTEST'
> b={a:1}
> ___x_cmd_json_put b.b 2
> echo "$b"
{"a":1,"b":"2"}
DOCTEST
___x_cmd_json_put(){
    local keypath="${1:?Provide variable name}"
    local opv2="${2:?Provide value}"
    shift 2

    local varname="${keypath%%.*}"
    local opv1=".${keypath#*.}"

    [ "$varname" = "$keypath" ] && opv1="."
    local s
    if [ "$varname" ]; then
        s="$(awk -v op=put -v opv1="$opv1" -v opv2="$opv2" -f "$___X_CMD_JSON_AWK_PATH" <<A
$(eval echo $(printf "%s" \"\$"${varname}"\"))
A
)"
    else
        s="$(awk -v op=put -v opv1="$opv1" -v opv2="$opv2" -f "$___X_CMD_JSON_AWK_PATH")"
    fi
    local code=$?
    if [ $code -eq 0 ]; then eval "$varname=\"\$s\""
    else return 1;  fi
}


# TODO: json pop b :a  # values stored in symbol a
# TODO: json pop b @a  # all values stored in array b
___x_cmd_json_pop(){
    local keypath="${1:?Provide variable name}"; shift

    local varname=${keypath%%.*}
    local opv1=".${keypath#*.}"

    [ "$varname" = "$keypath" ] && opv1="."

    local s
    if [ "$varname" ]; then
        if s="$(awk -v op=pop -v opv1="$opv1" -f "$___X_CMD_JSON_AWK_PATH" <<A
$(eval echo $(printf "%s" \"\$"${varname}"\"))
A
)";     then
            local t=""
            while read -r s; do
                t+="$s"
            done <<A
$s
A
            printf "%s\n" "$t"
            eval "$varname=\"\$t\""
        else return 1;  fi
    else
        awk -v op=pop -v opv1="$opv1" -f "$___X_CMD_JSON_AWK_PATH" | tail -n 1
    fi
}


: <<'DOCTEST'
> b=[1,2,3]
> ___x_cmd_json_del b.[0]
> echo $b  # ___x_cmd_json_del
[2,3]
DOCTEST
___x_cmd_json_del(){
    local keypath=${1:?Provide variable name}

    local varname=${keypath%%.*}
    local opv1=".${keypath#*.}"

    [ "$varname" = "$keypath" ] && opv1="."
    # shift 2

    if [ "$varname" ]; then
        if s="$(awk -v op=del -v opv1="$opv1" -f "$___X_CMD_JSON_AWK_PATH" <<A
$(eval echo $(printf "%s" \"\$"${varname}"\"))
A
)";     then
            local t=""
            while read -r s; do
                t+="$s"
            done <<A
$s
A
            [ -n "$t" ] && printf "%s\n" "$t"
            eval "$varname=\"\$t\""
        else return 1;  fi
    else
        awk -v op=del -v opv1="$opv1" -f "$___X_CMD_JSON_AWK_PATH" | tail -n 1
    fi
}

: <<'DOCTEST'
> b=[1,2,3]
> ___x_cmd_json_shift b
> echo $b; # ___x_cmd_json_shift
[2,3]
DOCTEST
___x_cmd_json_shift(){
    local keypath=${1:?Provide variable name}

    local varname=${keypath%%.*}
    local opv1=".${keypath#*.}"

    [ "$varname" = "$keypath" ] && opv1="."
    # shift 2

    if [ "$varname" ]; then
        if s="$(awk -v op=shift -v opv1="$opv1" -f "$___X_CMD_JSON_AWK_PATH" <<A
$(eval echo $(printf "%s" \"\$"${varname}"\"))
A
)";     then
            local t=""
            while read -r s; do
                t+="$s"
            done <<A
$s
A
            printf "%s\n" "$t"
            eval "$varname=\"\$t\""
        else return 1;  fi
    else
        awk -v op=shift -v opv1="$opv1" -f "$___X_CMD_JSON_AWK_PATH" | tail -n 1
    fi
}


# EndSection

xrc json/lib/awk
xrc json/lib/generator
xrc json/lib/query

xrc setmain ___x_cmd_json
