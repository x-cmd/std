#! /usr/bin/env bash

# shellcheck shell=sh disable=SC2039

# author:       Li Junhao           l@x-cmd.com    edwinjhlee.github.io
# maintainer:   Li Junhao

xrc log init git

xrc param/v0

# Section : init

case "$GIT_BIN" in
    "")     GIT_BIN="$(command -v git)" ;;
    /*)     ;;
esac

git_setup(){
    : yum install -y git
    : apt install -y git
    : apk add git
    : brew install git
}

# Maybe install tig

# EndSection

# Section: alias

# From el-repo

alias gis="git status"
alias giss="git status -s"
alias gib="git branch"

gia(){
    if [ $# -eq 0 ]; then
        git add .;
    else
        git add "$@";
    fi
}

giam(){
    local first_arg="$2"
    git add "${2:-.}" "${@:3:}"
    git commit -m "${1:-...}"
}

gip(){
    git pull origin $(git branch | awk '$1=="*"{ print $2 }' )
}

giP(){
    if [ -e "$1" ]; then
        git push origin $1
    else
        git push origin $(git branch | awk '$1=="*"{ print $2 }')
    fi
}

# EndSection

git(){
    if [ -n "$GIT_BIN" ]; then
        git(){
            ___git_intercept "$@"
            local ___code=$?
            if [ $___code -eq 127 ]; then
                $GIT_BIN "$@"
            else
                return $___code
            fi
        }
        git "$@"
    else
        echo "Git uninstalled. Please setup git command." >&2
    fi
}


# Section : cur

# shellcheck disable=SC2120
git_branches_local() {
    if [ "$#" -eq 0 ]; then
        git branch --no-color | sed 's/^[* ] //'
    else
        git_branches_local | ___git_str_contain "$1"
    fi
}

# shellcheck disable=SC2120
git_branches_remote() {
    if [ "$#" -eq 0 ]; then
        git branch -r --no-color | sed 's/^[* ] //'
    else
        git_branches_remote | ___git_str_contain "$1"
    fi
}

# shellcheck disable=SC2120
git_branches_all() {
    if [ "$#" -eq 0 ]; then
        (
            git branch --no-color
            git branch -r --no-color
        ) | sed 's/^[* ] //'
        return
    fi
    git_branches_all | ___git_str_contain "$1"
}
# EndSection

# Section : exists

___git_str_escape() {
	printf "%s" "$1" | sed 's/\([\.\$\*]\)/\\\1/g'
}

# set logic
___git_str_contain() {
	grep -q " $(___git_str_escape "${1:-Provide item}") "
}

___git_is_clean_working_tree() {
	if ! git diff --no-ext-diff --ignore-submodules --quiet --exit-code; then
		return 1
	elif ! git diff-index --cached --quiet --ignore-submodules HEAD --; then
		return 2
	fi
	return 0
}

___git_repo_is_headless() {
	! git rev-parse --quiet --verify HEAD >/dev/null 2>&1
}

___git_tag_exists() {
	git tag | ___git_str_contain "$1"
}

# EndSection


# Section : ensure

___git_panic(){
    git_log error "$@"
    return
}

___git_ensure_git_repo() {
	if ! git rev-parse --git-dir >/dev/null 2>&1; then
		git_log error "fatal: Not a git repository"
        return 1
	fi
}

___git_ensure_gitflow_initialized() {
	if ! gitflow_is_initialized; then
		git_log error "fatal: Not a gitflow-enabled repo yet. Please run \"git flow init\" first."
                return 1
    fi
}

___git_ensure_clean_working_tree() {
	git_is_clean_working_tree
	local result=$?
	if [ $result -eq 1 ]; then
		git_log error "fatal: Working tree contains unstaged changes. Aborting."
        return 1
	fi
	if [ $result -eq 2 ]; then
		git_log error "fatal: Index contains uncommited changes. Aborting."
        return 2
	fi
}

___git_ensure_local_branch() {
	if ! git_branches_local "$1"; then
		git_log error "fatal: Local branch '$1' does not exist and is required."
        return 1
	fi
}

___git_ensure_remote_branch() {
	if ! git_branches_remote "$1"; then
		git_log error "Remote branch '$1' does not exist and is required."
        return 1
	fi
}

___git_ensure_branch() {
	if ! git_branches_all "$1"; then
		git_log error "Branch '$1' does not exist and is required."
        return 1
	fi
}

___git_ensure_branch_absent() {
	if git_branch_all "$1"; then
		git_log error "Branch '$1' already exists. Pick another name."
        return 1
	fi
}

___git_ensure_tag_absent() {
    local tag
    local target="${1:?Provide branch}"
	while read -r tag; do
		if [ "$target" = "$tag" ]; then
			git_log error "Tag '$target' already exists. Pick another name."
            return 1
		fi
	done <<A
$(git tag)
A
}

___git_ensure_branches_equal() {
	___git_ensure_local_branch "$1"
	___git_ensure_remote_branch "$2"

	git_compare_branches "$1" "$2"
	local status=$?
    if [ "$status" -eq 0 ]; then
        return
    fi
    git_log warn "Branches '$1' and '$2' have diverged."

    case "$status" in
        1)      git_log error "And branch '$1' may be fast-forwarded."; return 1 ;;
        2)      git_log warn "And local branch '$1' is ahead of '$2'."  return 0 ;;
        *)      git_log error "Branches need merging first."; return 1 ;;
    esac
}


# EndSection

# Section : help advise

# help for original git
# help for git module
# help for tig
___git_exthelp(){
    cat <<A
git     cmd extension

Extension Subcommand:
    a                   alias for 'git add'
    cm                  alias for 'git commit'
    ca                  alias for 'git commit -a'
    push-all <name>     push all branch and all tags to name, name default is origin
    pull-all <name>     pull all branch and all tags to name, name default is origin

    track               alias for 'git branch --track'
    track-all|ta        track all branch from origin
    github              git github <org-name>/<repo-name>
    github-http         git github <org-name>/<repo-name>
    gitee               git github <org-name>/<repo-name>
    gitee-http          git github <org-name>/<repo-name>
    is-empty-repo       is empty repo
A

    printf "\n%s\n" "---------------------------"
    $GIT_BIN --help
}

___git_advise(){
    xrc cat git/_v0/advise.json
    return 126
}

# EndSection

# Section : hook

# Reference: husky

___git_push(){
    (
        for i in "$@"; do
            case "$i" in
                -h|--help)
                    git push --help
                    return 0 ;;
                *) ;;
            esac
        done
    )

    if : Pre commit code; then
        # Pre hook
        if $GIT_BIN push "$@"; then
            : Post commit hook
        else
            :
        fi
    fi
    return
}

___git_commit(){
    (
        for i in "$@"; do
            case "$i" in
                -h|--help)
                    $GIT_BIN commit --help
                    return 0 ;;
                *) ;;
            esac
        done
    )

    if : Pre commit code; then
        # Pre hook
        if $GIT_BIN commit "$@"; then
            : Post commit hook
        else
            :
        fi
    fi
}

# EndSection

# Section : rootup other newly add functions

# Reference: https://www.cnblogs.com/shines77/p/3460274.html
___git_rootout(){
    git_log info "Deleting the file and all of its history: $1"
    git filter-branch --force --index-filter "git rm --cached --ignore-unmatch ${1}" --prune-empty --tag-name-filter cat -- --all

}

___git_pullall(){
    local tgt=${1:-origin} # TODO: ?
    $GIT_BIN track all
    $GIT_BIN fetch "$tgt"
    $GIT_BIN pull "$tgt"
}

___git_pushall(){
    local tgt=${1:-origin} # TODO: ?
    $GIT_BIN push -u --all "$tgt"
    $GIT_BIN push --force --tags "$tgt"
}

# EndSection

# Section : shortcut

___git_ca(){
    $GIT_BIN commit -a "$@"
}


# Section : track

___git_track() {

    if [ "$#" -eq 2 ]; then
        git branch --track "${1:?local branch}" "${2:?remote branch}"
        return
    fi

    if [ "$#" -eq 1 ]; then
        if [ "$1" = all ]; then
            ___git_trackall "$@"
            return
        fi
    fi

    # TODO
}

___git_trackall() {
    # TODO: make it universal instead of origin
    # for remote in $(git branch -r | grep -v '\->' | grep -E "^ +origin"); do git branch --track "$remote"; done
    $GIT_BIN branch -r | grep -v '\->' | \
    grep -E "^ +origin" |
    while read remote; do
        # git branch --track "${remote#origin/}" "$remote";
        git track "${remote#origin/}" "$remote"
    done
}

# gitignore management
___git_ignore(){
    xrc gitignore
    gitignore "$@"
}

# EndSection

# Section : flow

___git_flow(){
    :
}

# EndSection


# Section : hook



# EndSection

# Section : template

# EndSection

# Section : intercept

___git_intercept(){

    param:dsl <<A
subcommand:
    ignore          "gitignore file management"
    rootout         "delete file in all history"
    is-empty-repo   "de"
    a               "alias for 'git add'"
    ca              "alias for 'git commit -a'"
    pushall|Pa      "push all branch into the cloud"
    pullall|pa      "pull all branch from the cloud"
    track           "track branch to local"
    flow            "git flow facility"
A
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        return 127
    fi

    "___git_$PARAM_SUBCMD" "$@"

    case "$op" in
        ignore)                     xrc gitignore/v0 ;      gitignore "$@"  ;;
        flow)                       ___git_flow "$@" ;;
        rootout)                    ___git_rootout "$@"  ;;
        push)                       ___git_push "$@"    ;;
        pa|pullall)                 ___git_pullall "$@" ;;
        Pa|pushall)                 ___git_pushall "$@" ;;
        track)                      ___git_track "$@" ;;
        is-empty-repo)              $GIT_BIN branch -r | grep -q ^ ;;
        *)
    esac
}

# EndSection

if [ -z "$XRC_NO_ADVISE" ] && [ -n "${BASH_VERSION}${ZSH_VERSION}" ] && [ "${-#*i}" != "$-" ]; then
    xrc advise/v0
    advise git
fi

