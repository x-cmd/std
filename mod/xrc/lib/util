
___x_cmd_search_path_(){
    local cur="${1:?Provide starting path}"
    cd "$cur" 1>/dev/null 2>&1 && cur="$PWD" && cd "$OLDPWD" || return

    local relative_filepath="${2:?Provide relative filepath}"
    while [ ! "$cur" = "" ]; do
        if [ -f "$cur/$relative_filepath" ]; then
            ___X_CMD_SEARCH_PATH_RESULT="$cur"
            return 0
        fi
        cur=${cur%/*}
    done
    return 1
}

___x_cmd_search_path(){
    ___x_cmd_search_path_ "$@" && printf "%s" "$___X_CMD_SEARCH_PATH_RESULT"
}

___x_cmd_is_interative_tty(){
    [ "${-#*i}" != "$-" ]
}

___x_cmd_is_suitable_advise_env(){
    [ -n "$___X_CMD_ADVISE_ENABLE" ] && [ -n "${BASH_VERSION}${ZSH_VERSION}" ] && [ "${-#*i}" != "$-" ]
}

___x_cmd_readlink_recursive(){
    local ___X_CMD_READLINK_RECURSIVE_
    ___x_cmd_readlink_recursive_ "$@"
    printf "%s\n" "$___X_CMD_READLINK_RECURSIVE_"
}

___x_cmd_definelazyloader(){
    local funcname="${1:?Provide function name}"
    local respath="${2:?Provide resource path}"
    eval "$funcname(){
        if [ \"\$___X_CMD_DEFINELAZYLOADER\" = \"$funcname\" ]; then
            printf \"No such function [%s] in [%s]\" \"$funcname\" \"$respath\"
            return 1
        fi

        if ! xrc $respath; then
            printf \"Fail to xrc: %s\" \"$respath\"
            return 1
        fi

        local ___X_CMD_DEFINELAZYLOADER=$funcname
        $funcname \"\$@\"
    }"
}

# VAR   SEP    IT
___x_cmd_trimutil(){
    eval "
[ -z \"\$${O}\" ] && return 1
IT=\"\${${O}%%${SEP:-
}*}\"
if [ \"\${IT}\" = \"\${$O}\" ]; then
    $O=\"\"
else
    $O=\"\${${O}#*${SEP:-
}}\"
fi
return 0
"
}

# f(){
#     local IT
#     local SEP=,
#     local a
#     a="abc,cde,eft"
#     while O=a ___x_cmd_trimutil; do
#         printf "%s\n" "$IT"
#     done
# }

# f

___x_cmd_pidofsubshell(){
    sh -c 'printf "%s\n" "$PPID"'
}

# To prevent dash inline environment problem: just for dash
if [ "$___X_CMD_SHELL" = dash ]; then
    alias ___x_cmd_shift1='[ $# -gt 0 ] && shift ; '
else
    alias ___x_cmd_shift1="shift ; "
fi

# Section: q1 q2
case "$___X_CMD_SHELL" in
    bash|zsh)
___x_cmd_q1(){
    printf "'%s'" "${1//\'/\\\'}"
}

___x_cmd_q2(){
    printf "\"%s\"" "${1//\"/\\\"}"
}
    ;;
    *)
___x_cmd_q1(){
    awk '
BEGIN{ RS="\001"; S="'\''"; }
{
    gsub(S, "\\" S, $0)
    printf(S "%s" S, $0)
}' <<A
$1
A
}

___x_cmd_q2(){
    awk '
BEGIN{ RS="\001"; S="\""; }
{
    gsub(S, "\\" S, $0)
    printf(S "%s" S, $0)
}' <<A
$1
A
}
    ;;
esac
# EndSection

# # TODO: xrc_log +xrc
# ___xrc_log(){
#     local level="$1"; shift
#     [ "$level" = debug ] && [ -z "$___X_CMD_XRC_LOG_DEBUG_MODE" ] && return
#     printf "[%s]: %s\n" "$level" "$@" 1>&2
# }


___x_cmd_llist(){
    xrc xrc/lib/llist && ___x_cmd_llist "$@" ;
}

___x_cmd_awk(){
    xrc awk/latest && ___x_cmd_awk "$@"
}

___x_cmd_evex(){
    if [ "$#" -lt 2 ]; then
        eval "${1:-:}"
    else
        "$@"
    fi
}

___x_cmd_eval(){
    if [ "$#" -lt 2 ]; then
        eval "${1:-:}"
    else
        # "$@"
        local ___x_cmd_evex_op="$1"; shift
        eval "$___x_cmd_evex_op" "\"\$@\""
    fi
}

# ___x_cmd_abspath(){
#     cd "${1:?Provide Path}" && ___X_CMD_ABSPATH="$PWD" && cd "$OLDPWD" || return
# }


___x_cmd_isunset(){
    eval '[ -z "${'"${1:?Provide name}"'+1}" ] ' || return 1
    # eval '[ -z "${'"${1:?Provide name}"'}" ] && [ -z "${'"${1}"'+1}" ] ' || return 1
}

___x_cmd_retry(){
    local ___X_CMD_RETRY_MAX_ATTEMPT=3
    local ___X_CMD_RETRY_INTERVAL=1
    while true; do
        case "$1" in
            --)                 shift; break ;;
            -m|--max)           shift; ___X_CMD_RETRY_MAX_ATTEMPT="$1"; shift; ;;
            -i|--interval)      shift; ___X_CMD_RETRY_INTERVAL="$1"; shift ;;
            *)                  break ;;
        esac
    done

    local i=1
    local ___X_CMD_RETRY_EXITCODE
    while true; do
        [ "$i" -eq 1 ] || x:warn "Retrying[${___X_CMD_RETRY_INTERVAL}s,$i/$___X_CMD_RETRY_MAX_ATTEMPT]: $*"
        ___X_CMD_RETRY_EXITCODE=0
        "$@" || ___X_CMD_RETRY_EXITCODE="$?"
        [ "$___X_CMD_RETRY_EXITCODE" -ne 0 ] || return 0
        i=$((i+1))
        [ "$i" -le "$___X_CMD_RETRY_MAX_ATTEMPT" ] || return "$___X_CMD_RETRY_EXITCODE"
        sleep "$___X_CMD_RETRY_INTERVAL" || return 130
    done
}
