# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263,SC2120    # xrc

# Section: utils

___x_cmd_env_python_get_platform_arch(){

    local _platform
    local _arch
    _platform="$(x os name)"
    _arch="$(x os arch)"

    case "$_platform" in
        linux)      ___X_CMD_ENV_PLATFORM=Linux                     ;;
        windows)    ___X_CMD_ENV_PLATFORM=Windows                   ;;
        darwin)     ___X_CMD_ENV_PLATFORM=MacOSX                    ;;
        *)          env:error "your arch:(" "$_platform" ") are not supported"
                    return 1
                    ;;
    esac

    case "$_arch" in
        aarch64|arm64|armv7l|armv6l)    ___X_CMD_ENV_ARCH="$_arch"   ;;
        x64)                            ___X_CMD_ENV_ARCH=x86_64     ;;
        *)          env:error "your arch:(" "$_arch" ") are not supported"
                    return 1
                    ;;
    esac
}

___x_cmd_env_python_get_miniconda_filename_and_compression(){
    local version="${1:?Provide python version}"

    local ___X_CMD_ENV_PLATFORM
    local ___X_CMD_ENV_ARCH
    if ___x_cmd_env_python_get_platform_arch ; then
        if [ $___X_CMD_ENV_PLATFORM = "Windows" ] ; then
            ___X_CMD_ENV_COMPRESSION="exe"
        else
            ___X_CMD_ENV_COMPRESSION="sh"
        fi
    fi
    miniconda_filename="Miniconda3-${version}-${___X_CMD_ENV_PLATFORM}-${___X_CMD_ENV_ARCH}.${___X_CMD_ENV_COMPRESSION}"
}

# EndSection

# Section: ls, la

___x_cmd_env_python_ls_remote(){
    local pattern="${1:-""}"
    local cache_expiration="${2:-86400}"
	local cache_path="$___X_CMD_ENV_PATH/python/cache/version_list"

    local ___X_CMD_ENV_PLATFORM
    local ___X_CMD_ENV_ARCH

    if ___x_cmd_env_python_get_platform_arch ; then
        ___x_cmd_httpget "https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/" "$cache_path" "$cache_expiration" && \
        awk -v pattern="$pattern" -v platform="${___X_CMD_ENV_PLATFORM}" -v arch="$___X_CMD_ENV_ARCH" '
            BEGIN{RS="<a href=";FS="\""}{
                if (match($2, "^.*-" platform "-" arch ".sh$")) {
                    split($2, a, /-/)
                    version = a[2]
                    if (pattern == "" || index(version, pattern) > 0) {
                        print version
                    }
                }
            }' <"$cache_path" | ___x_cmd_env_common_sort_version | ___x_cmd_env_common_simplify_version
    fi
}

# EndSection

# Section: download, unpack

___x_cmd_env_python_download_archive(){
    local version="${1:?Provide python version}"

    if ___x_cmd_env_util_is_archive_cached python "$version" 2>/dev/null; then
        env:info "Archive existed: $version"
        return 0
    fi

    local miniconda_filename
    local ___X_CMD_ENV_COMPRESSION
    ___x_cmd_env_python_get_miniconda_filename_and_compression "$version"

    local archive_path="$___X_CMD_ENV_PATH/python/archive/python-$version.$___X_CMD_ENV_COMPRESSION"
    mkdir -p "$(dirname "$archive_path")"

    # TODO: use function to switch mirror
    local url="https://repo.anaconda.com/miniconda"
    if [ "${___X_CMD_IN_CHINA_NET:-0}" -eq 1 ]; then
        url="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda"
    fi

    local download_url="$url/$miniconda_filename"
    env:info "Downloading $download_url"
    if ! curl --fail --output "$archive_path" "$download_url"; then
        env:error "Download failure from $download_url"
        return 1
    fi

    env:info "Download completed $archive_path"
}

___x_cmd_env_python_unpack(){
    local version="${1:?Provide python version}"
    local miniconda_filename
    local ___X_CMD_ENV_COMPRESSION
    ___x_cmd_env_python_get_miniconda_filename_and_compression "$version"

    env:info "Unpacking python-$version.$___X_CMD_ENV_COMPRESSION"

    local versions_path="$___X_CMD_ENV_PATH/python/versions"
    mkdir -p "${versions_path}"
    local archive_path="$___X_CMD_ENV_PATH/python/archive/python-$version.$___X_CMD_ENV_COMPRESSION"
    chmod +x "${archive_path}" && \
        "${archive_path}" -b -u -p "${versions_path}/${version}" 1>&2
}

# EndSection

# Section: ui_catsel

#TODO: Should be optimized
___x_cmd_env_python_ui_catsel(){
    case "$#" in
        0)  ___x_cmd_env_python_ls_remote | awk '{ split($0,arr,"."); vmap[arr[1]]=1 } END{ for(key in vmap){print key} }'  ;;
        1)  ___x_cmd_env_python_ls_remote | grep ^"$1" | awk '{ print $0 }' ;;
    esac
}

# EndSection

___x_cmd_env_python_ws(){
    :
}