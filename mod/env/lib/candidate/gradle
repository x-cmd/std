# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263    # xrc

# Section: gradle ls_remote and la

___x_cmd_env_gradle_ls_remote(){
    # local pattern="${1:-""}"	# TODO: ls remote filter
    local cache_expiration="${2:-1}"
    local cache_path="$___X_CMD_ENV_PATH/gradle/cache/version_list"

    ___x_cmd_httpget "https://services.gradle.org/distributions/" "$cache_path" "$cache_expiration" 2>/dev/null && \
    awk 'match($0, /gradle-([0-9.]+)-all.zip"/){ print substr($0, RSTART+7, RLENGTH-16)}' <"$cache_path"
}

# EndSection

# Section: download, unpack

___x_cmd_env_gradle_download_archive(){
    local version="${1:?Provide gradle version}"

    if ___x_cmd_env_util_is_archive_cached gradle "$version" 2>/dev/null; then
        env_log info "Archive existed: $version"
        return 0
    fi

    local archive_path="$___X_CMD_ENV_PATH/gradle/archive/gradle-$version.zip"
    mkdir -p "$(dirname "$archive_path")"
    local download_url="https://services.gradle.org/distributions/gradle-$version-all.zip"

    env_log info "Downloading $download_url"
    if ! curl --progress-bar --location --retry-max-time 10 --retry 0 "$download_url" --output "$archive_path" ; then
        env_log error "Download failure from $download_url"
        return 1
    fi

    env_log info "Download completed $download_url"
}

___x_cmd_env_gradle_unpack(){
	local version="${1:?Provide a version}"
    env_log info "Unpacking: gradle ${version}"

    local archive_path="$___X_CMD_ENV_PATH/gradle/archive/gradle-$version.zip"
	x uz "$archive_path" "$(dirname "$archive_path")" || return 1

    local archive_unpack_files
    archive_unpack_files="$(dirname "$archive_path")/gradle-$version"

    local versions_path="$___X_CMD_ENV_PATH/gradle/versions"
	mkdir -p "$versions_path/${version}"
	mv -f "$archive_unpack_files/"* "$versions_path/${version}"
	rm -rf "$archive_unpack_files"
}

# EndSection