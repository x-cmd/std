# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263,SC2120    # xrc

# Section: get system platform

___x_cmd_env_go_get_system_platform(){
    xrc os
    case "$(___x_cmd_os name)" in
        linux)      platform=linux    ;;
        win)        platform=windows  ;;
        darwin)     platform=darwin   ;;
        *)          env:error "your arch:(" "$(___x_cmd_os name)" ") are not supported"
                    return 1
                    ;;
    esac
    case "$(___x_cmd_os arch)" in
        x86)           arch=386        ;;
        x64)           arch=amd64      ;;
        arm64)         arch=arm64      ;;
        armv7l|ARMv6)  arch=armv6l     ;;
        *)  env:error "your arch:(" "$(___x_cmd_os arch)" ") are not supported"
            return 1
            ;;
    esac
}
# EndSection

# Section: ls_remote

___x_cmd_env_go_ls_remote(){
    local pattern="${1:-""}"
    local cache_path="$___X_CMD_ENV_PATH/go/cache/version_list"
    local cache_expiration="${2:-86400}"

    local platform
    local arch

    if ___x_cmd_env_go_get_system_platform ; then
        ___x_cmd_httpget "https://golang.google.cn/dl/" "$cache_path" "$cache_expiration" && \
            awk -v platform="${platform}" -v arch="${arch}" -v pattern="${pattern}" \
            'match($0, "/dl/go[0-9.]+" platform "-" arch) {
                match($0, "/dl/go[0-9.]+")
                version = substr($0, RSTART+6, RLENGTH-7)
                if (pattern == "" || index(version, pattern) > 0) {
                    print version
                }
            }' < "$cache_path"  | ___x_cmd_env_common_sort_version | ___x_cmd_env_common_simplify_version
    fi
}
# EndSection

# Section: download

___x_cmd_env_go_download_archive(){
    local version="${1:?Provide a version}"
    if ___x_cmd_env_util_is_archive_cached go "$version" 2>/dev/null; then
        env:info "Archive existed: $version"
        return 0
    fi

    if ___x_cmd_env_go_get_system_platform ; then
        local compression='tar.gz'; [ "${platform}" = 'windows' ] && compression='zip'
        local download_url="https://golang.google.cn/dl/go${version}.${platform}-${arch}.${compression}"
        env:info "Downloading go ${download_url}"
    fi
    local archive_path="$___X_CMD_ENV_PATH/go/archive/go-${version}.${compression}"
    mkdir -p "$(dirname "$archive_path")"
    if ! curl --progress-bar --location --retry-max-time 10 --retry 0 "${download_url}" --output "${archive_path}"; then
	    env:info "Download failure"
	    return 1
	fi
   env:info "Download Done"
}

# EndSection

# Section: unpack

___x_cmd_env_go_unpack(){
    local version="${1:?Provide go version}"
    local platform
    local arch
    {
        read -r platform
        read -r arch
    } <<A
$(x os name; x os arch)
A

    local compression='tar.gz'; [ "${platform}" = 'win' ] && compression='zip' # TODO: tar.xz support
    local archive_path="$___X_CMD_ENV_PATH/go/archive/go-${version}.${compression}"
    local archive_unpack_files
    archive_unpack_files="$(dirname "$archive_path")/go-${version}"
    mkdir -p "$archive_unpack_files"
    case "$platform" in
        win)    ___x_cmd_env_go_unpack_win    ;;
        *)      ___x_cmd_env_go_unpack_other  ;;
    esac
    local code=$?
    rm -rf "${archive_unpack_files}"
    env:info "Done unpacking!"
    return $code
}

___x_cmd_env_go_unpack_win(){
    x uz "$archive_path" "$(dirname "$archive_path")" || return 1
    local version_path="${___X_CMD_ENV_PATH}/go/versions/${version}/bin"
    mkdir -p "${version_path}" && (
        mv "${archive_unpack_files}/"*/* "${version_path}" || return 1
        cd "${version_path}" && chmod +x go.exe npm npx
    )
}

___x_cmd_env_go_unpack_other(){
    local version_path="${___X_CMD_ENV_PATH}/go/versions/${version}"
    tar -xzf "${archive_path}" -C "${archive_unpack_files}" --strip-components 1 || return 1
    mkdir -p "${version_path}" && mv "${archive_unpack_files}/"* "${version_path}"
}

# EndSection

# Section: ui_catsel

#TODO: Should be optimized
___x_cmd_env_go_ui_catsel(){
    case "$#" in
        0)  ___x_cmd_env_go_ls_remote | awk '{ split($0,arr,"."); vmap[arr[1]]=1 } END{ for(key in vmap){print key} }' ;;
        1)  ___x_cmd_env_go_ls_remote | grep ^"$1" | awk '{ print $0 }' ;;
    esac
}

# EndSection