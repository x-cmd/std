# shellcheck shell=sh disable=SC3028

###
 # @Description: user repo TEST
###

# Section: ___x_cmd_gt_repo_create
test_user_repo_create_default_option(){
    local test_data
    test_data="$(gt repo create "$TEST_RANDOM_SPY_ONE")"
    test:debug "TEST_RANDOM_ONE: ${TEST_RANDOM_SPY_ONE}"
    test:debug "$test_data"

    printf "%s" "personal"          | @assert stdout "x jq -r .namespace.type <<A
$test_data
A"
    printf "%s" "$TEST_USER_NAME"   | @assert stdout "x jq -r .owner.login <<A
$test_data
A"
    printf "%s" "true"              | @assert stdout "x jq -r .private <<A
$test_data
A"
    printf "%s" "true"              | @assert stdout "x jq -r .has_issues <<A
$test_data
A"
    printf "%s" "true"              | @assert stdout "x jq -r .has_wiki <<A
$test_data
A"
    printf "%s" "true"              | @assert stdout "x jq -r .can_comment <<A
$test_data
A"
    printf "%s" "null"              | @assert stdout "x jq -r .description <<A
$test_data
A"
    printf "%s" "null"              | @assert stdout "x jq -r .homepage <<A
$test_data
A"
    printf "%s" "null"              | @assert stdout "x jq -r .license <<A
$test_data
A"
    printf "%s" "https://gitee.com/${TEST_USER_NAME}/${TEST_RANDOM_SPY_ONE}.git" | @assert stdout "x jq -r .html_url <<A
$test_data
A"
}

# TODO: wait param path fix and add path test
test_user_repo_create_with_option(){
    local test_data
    test_data="$(gt repo create  --description "test" --homepage "https://www.test.com" \
        --access "public" --license_template "MIT" --gitignore_template "Node"          \
        --no_issue --no_wiki --no_comment --no_auto_init "$TEST_RANDOM_SPY_TWO")"
    test:debug "TEST_RANDOM_SPY_TWO: ${TEST_RANDOM_SPY_TWO}"
    test:debug "$test_data"


    printf "%s" "personal"              | @assert stdout "x jq -r .namespace.type <<A
$test_data
A"
    printf "%s" "false"                 | @assert stdout "x jq -r .private <<A
$test_data
A"
    printf "%s" "false"                 | @assert stdout "x jq -r .has_issues <<A
$test_data
A"
    printf "%s" "false"                 | @assert stdout "x jq -r .has_wiki <<A
$test_data
A"
    printf "%s" "false"                 | @assert stdout "x jq -r .can_comment <<A
$test_data
A"
    printf "%s" "test"                  | @assert stdout "x jq -r .description <<A
$test_data
A"
    printf "%s" "https://www.test.com"  | @assert stdout "x jq -r .homepage <<A
$test_data
A"
    printf "%s" "https://gitee.com/${TEST_USER_NAME}/${TEST_RANDOM_SPY_TWO}.git" | @assert stdout "x jq -r .html_url <<A
$test_data
A"
}

# EndSection

# Section: ___x_cmd_gt_repo_ls
# TODO: repo ls and repo user ls conflict affect param passing options
test_user_repo_ls(){
    printf "%s" "${TEST_RANDOM_SPY_ONE}" | @assert stdout "x jq -r '.[] | select(.name | contains(\"${TEST_RANDOM_SPY_ONE}\")) | .name' <<A
$(gt repo ls)
A"
}
# EndSection

# Section: ___x_cmd_gt_repo_update
# TODO: wait param path fix and add path test
test_user_repo_update(){
    local test_data
    test_data="$(gt repo update --name "$TEST_RANDOM_SPY_THREE" --access "public" \
        --description "test" --homepage "https://www.test.com" \
        --no_issue --no_wiki --no_comment --no_security_hole \
        --no_pull_requests --no_online_edit --no_lightweight_pr "$TEST_RANDOM_SPY_ONE")"
    test:debug "TEST_RANDOM_SPY_THREE: ${TEST_RANDOM_SPY_THREE}"
    test:debug "$test_data"

    printf "%s" "$TEST_RANDOM_SPY_THREE"    | @assert stdout "x jq -r .name <<A
$test_data
A"
    printf "%s" "false"                     | @assert stdout "x jq -r .private <<A
$test_data
A"
    printf "%s" "false"                     | @assert stdout "x jq -r .has_issues <<A
$test_data
A"
    printf "%s" "false"                     | @assert stdout "x jq -r .has_wiki <<A
$test_data
A"
    printf "%s" "false"                     | @assert stdout "x jq -r .can_comment <<A
$test_data
A"
    printf "%s" "false"                     | @assert stdout "x jq -r .pull_requests_enabled <<A
$test_data
A"
    printf "%s" "test"                      | @assert stdout "x jq -r .description <<A
$test_data
A"
    printf "%s" "https://www.test.com"      | @assert stdout "x jq -r .homepage <<A
$test_data
A"
}
# EndSection

# Section: ___x_cmd_gt_repo_rm
test_user_repo_rm(){
    @assert true "gt repo rm ${TEST_RANDOM_SPY_ONE} ${TEST_RANDOM_SPY_TWO}"
}
# EndSection

@assert:file:func
