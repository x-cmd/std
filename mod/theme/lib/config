# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gt_config(){
    param:subcmd ___x_cmd_gt_config                                        \
        which       "Show current config path"                             \
        get         "Print the value of a given configuration key"         \
        set         "Update configuration with a value for the given key"
    param:subcmd:try
    param:run

    ___x_cmd_gt_config _param_help_doc
    gt_log warn "Subcmd Not Found."
    return 1
}

___x_cmd_gt_config_which(){
    param:void
    local O="${O:-___x_cmd_gt_GITEE_DEFAULT}"
    printf "%s" "$___X_CMD_ROOT/.config/x-bash/app.gitee.config/$O"
}

___x_cmd_gt_config_get(){
    param:scope     ___x_cmd_gt
    param:dsl       '
type:
    ConfigName  =   oauth_token user git_protocol
options:
    --host        "host name"                               <>="gitee.com"
    #1            "The name of the configuration to get"    <>:ConfigName
'
    param:run
    local O="${O:-___x_cmd_gt_GITEE_DEFAULT}"
    [ -e  "$___X_CMD_ROOT/.config/x-bash/app.gitee.config/$O" ] || return 1
    ___x_cmd_git_config_get "$___X_CMD_ROOT/.config/x-bash/app.gitee.config/$O" "$host" "$1"
}

___x_cmd_gt_config_set(){
    param:scope     ___x_cmd_gt
    param:dsl       '
type:
    ConfigName  =   oauth_token user git_protocol
options:
    --host    "host name"                             <>="gitee.com"
    #1        "Please provide configuration key"      <>:ConfigName
    #2        "Please provide configuration val"      <>
'
    param:run
    local O="${O:-___x_cmd_gt_GITEE_DEFAULT}"
    local ___gitee_path="$___X_CMD_ROOT/.config/x-bash/app.gitee.config/$O"
    [ -e  "$___gitee_path" ] || mkdir -p "$___gitee_path##*/"
    ___x_cmd_git_config_set "$___gitee_path" "$host" "$1" "$2" && return 0
    gt_log error "gitee config set fail"
}
