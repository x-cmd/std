# shellcheck shell=sh
# shellcheck disable=SC2039,3043

############################
# Section 2: Wrapping std/http module with object naming changing
############################
___x_cmd_gt_resp_header(){
    O="${O:-___x_cmd_gt_GITEE_DEFAULT}" ___x_cmd_http resp header "$@"
}

# TODO: Not supported yet
___x_cmd_gt_resp_body(){
    O="${O:-___x_cmd_gt_GITEE_DEFAULT}" ___x_cmd_http resp body "$@"
}
___x_cmd_gt_get_multi() {
    if [ -n "$page" ] || [ -n "$per_page" ]; then
        ___x_cmd_gt_http get "$@" page per_page
        return
    fi
    local tmp
    tmp=$(mktemp)
    ___x_cmd_gt_http get "$@" page=1 per_page=100 >> "$tmp"
    local next_url
    _____x_cmd_gt_next_url
    if [ -z "$next_url" ];then
        cat "$tmp"
        rm "$tmp"
        return
    fi
    while [ -n "$next_url" ]; do
        ___x_cmd_gt_http get "$next_url" >> "$tmp"
        _____x_cmd_gt_next_url
    done
    x ja 'BEGIN{print "["} END{print "]"}O[1]{
    if ((V == "}") || (V == "]") || (K ~ "^[0-9]+$")) print V
    else print K ": "V;
    }' < "$tmp" | x jo fmt
    rm "$tmp"
}

_____x_cmd_gt_next_url(){
    next_url="$(___x_cmd_gt_resp_header "link")"
    next_url="${next_url#*"rel='prev', <"}"
    local tmp_url="${next_url%%">; rel='next'"*}"
    if [ "$next_url" != "$tmp_url" ];then
        next_url="${tmp_url#*'.com/api'*}"
    else
        next_url=""
    fi
}

___x_cmd_gt_http(){
    if ! O="${O:-___x_cmd_gt_GITEE_DEFAULT}" ___x_cmd_http header get Content-Type 1>/dev/null 2>&1; then
        O="${O:-___x_cmd_gt_GITEE_DEFAULT}" ___x_cmd_http header put Content-Type application/json
    fi
    O="${O:-___x_cmd_gt_GITEE_DEFAULT}" ___x_cmd_http "$@"
}

############################
# Section 3: Parameter Utilities
############################

alias ___x_cmd_gt_param_init_owner_repo='
    local owner_repo
    ___x_cmd_gt_param_normalize_repo  || return
'

# shellcheck disable=SC2154,SC2034
___x_cmd_gt_param_normalize_repo(){
    local op="$repo"
    [ -z "$op" ] && op="$1"
    case "$op" in
    */*)
        owner_repo="$(printf "%s" "$op")"
        ;;
    "")
        owner_repo="$(_____x_cmd_git_repo)"
        ;;
    *)
        ___x_cmd_gt_current_owner 1>/dev/null
        if [ -z "$___X_CMD_GITEE_DEFAULT_OWNER" ]; then
            printf "No owner provided. Default owner not set.\n" >&2
            return 1
        fi
        owner_repo="$(printf "%s" "$___X_CMD_GITEE_DEFAULT_OWNER/$op")"
        ;;
    esac
}

___x_cmd_gt_default(){
    param_default "$@" 2>/dev/null || return 1
}

___gt_ui_mutual(){
    if [ ! -t 1 ] || [ -n "$ENFORCE_JSON" ] ; then
        "$@"
    else
        # run ui table
        eval "$(cat)"
    fi

    local ___gt_exit_code="$?"
    [ "$___gt_exit_code" -eq 0 ] || gt_log error "${___gt_error_msg:-"Couldn't find any data"}"
    return "$___gt_exit_code"
}
