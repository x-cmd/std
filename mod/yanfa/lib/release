# shellcheck shell=sh disable=SC3043

# Section: main
___x_cmd_yanfa_release(){
    if [ -f "$(x wsroot)/.x-cmd/$1" ]; then
        x _ws "$@"
        return
    fi

    x:trace yanfa/relesae "$@"

    param:subcmd    ___x_cmd_yanfa                  \
        init        "init"
    param:subcmd:try

    param:subcmd    ___x_cmd_yanfa_ws               \
        pull        "pull"                          \
        push        "push"                          \
        name        "get workspace name from git config"
    param:subcmd:try

    param:subcmd    ___x_cmd_yanfa_release          \
        update          "update or add module"      \
        pub             "publish the package"       \
        lsmod           "ls module"                 \
        lsfile          "ls file"                   \
        wc              "count"                     \
        tgz             "compress modules of core/all/<special-release> into <name>.tgz"    \
        7z              "compress modules of 7z"
    param:subcmd:try

    param:run
    ___x_cmd_yanfa_release help
}
# EndSection

# Section: pub
___x_cmd_yanfa_release_pub()(
    param:void
    x:trace yanfa/relesae/pub
    # set -o errexit
    if {
        yanfa:info "update"
        ___x_cmd_yanfa_release_update "${CONCURRENCY:-7}" || {
            local code=$?;  yanfa:info "update fail exit: $?"
            false
        }
    } && {
        yanfa:info "create tgz"
        ___x_cmd_yanfa_release_tgz "$@" || {
            local code=$?;  yanfa:info "create tgz exit: $code"
            false
        }
    } && {
        if [ -n "$NO_UPLOAD" ]; then
            yanfa:info "No Upload. Skip Add && Commit && Push"
        else
            yanfa:info "Add && Commit && Push"
            if ! git add . && git commit -m ... && ___x_cmd_yanfa_ws_push; then
                local code=$?;  yanfa:info "Add && Commit && Push exit: $code"
                false
            fi
        fi
    }; then
        yanfa:info "OK"
    else
        yanfa:info "Fail"
        return 1
    fi
)
# EndSection

# Section: module add pull update

___X_CMD_YANFA_RELEASE_TMP="${TMPDIR}/release/mod"

___x_cmd_yanfa_release_add()(
    x:trace yanfa/relesae/add "[name=$1]" "[position=$2]" "[branch=$branch]"
    local name="${1:?Provide module name}"
    local position="${2:-"git@$(___x_cmd_yanfa_git_domain):x-bash/$name.git"}"
    # local position="${2:-"https://$(___x_cmd_yanfa_git_domain)/x-bash/$name.git"}"
    local branch="${3:-main}"

    cd "$___X_CMD_YANFA_RELEASE_TMP" || exit 1

    local i
    i=1
    while [ "$i" -le "${RETRY:-3}" ]; do
        if git clone --quiet --depth=1 "$position" -b "$branch"; then
            yanfa:info "[$mod/$branch] Cloning success from $position"
            exit 0
        fi
        yanfa:info "[$mod/$branch] Fail to git clone. Retry it after 5 seconds."
        if ! sleep 5; then
            yanfa:warn "Sleep interrupted."
        fi
        i=$((i+1))
    done
    yanfa:error "[$mod/$branch] Fail to git clone after 3 attemps. Mission abort."
    exit 1
)

___x_cmd_yanfa_release_update(){
    param:void
    x:trace yanfa/relesae/update "[concurrency=$1]"

    local IFS=""
    local mod

    rm -rf "$___X_CMD_YANFA_RELEASE_TMP" # TODO: x rmrf
    mkdir -p "$___X_CMD_YANFA_RELEASE_TMP"

    ___x_cmd_yanfa_release_lsmod | {
        while read -r mod; do
            # OUT=/dev/null
            x job put "${1:-7}" ___x_cmd_yanfa_release_add "$mod"
        done

        x job wait
    } | while read -r line; do
        printf "%s\n" "$line"
        case "$line" in
            Write*)
                printf "%s\n" "---------------"
                cat "${line#Write: }"
                printf "%s\n" "---------------"
        esac
    done

    yanfa:debug "Starting CPFILE"
    ___x_cmd_yanfa_release_cpfile
    local code=$?; yanfa:debug "FINISIH CPFILE exit: $code"
}

# EndSection

# Section: information

# shellcheck disable=SC2120
___x_cmd_yanfa_release_lsmod(){
    param:void
    x:trace yanfa/relesae/lsmod "$@"
    ___x_cmd_yanfa_mod_ls "$@"
    local code=$?
    yanfa:info "___x_cmd_yanfa_release_lsmod: $code"
    return $code
}

___x_cmd_yanfa_release_lsfile()(
    param:void
    x:trace yanfa/relesae/lsfile
    [ -d "$___X_CMD_YANFA_RELEASE_TMP" ] || return 1

    ___x_cmd_yanfa_release_lsmod | (
        cd "$___X_CMD_YANFA_RELEASE_TMP" && \
        while read -r line; do
            (
                if ! cd "$line"; then
                    yanfa:error "___x_cmd_yanfa_release_lsfile while-loop: fail to cd - $line"
                    exit 1
                fi
                ___x_cmd_yanfa_mod_lsfile | x arg1 'printf "%s/%s\n" "$line" "$1"'
            )
        done
    )

    local code=$?
    yanfa:info "___x_cmd_yanfa_release_lsfile"
    return $code
)

___x_cmd_yanfa_release_cpfile_inner(){
    # x:trace yanfa/relesae/cpfile/inner        # Use debug
    if [ -d "$2" ]; then
        local p="$2/$1"
        [ -d "${p%/*}" ] || mkdir -p "${p%/*}"
        if ! cp "$1" "$p"; then
            yanfa:info fail to cp [src=$1] to [dst=$p]
        fi
    else
        if ! cp "$1" "$2"; then
            yanfa:info fail to cp [src=$1] to [dst=$2]
        fi
    fi
}

___x_cmd_yanfa_release_cpfile()(
    x:trace yanfa/relesae/cpfile
    yanfa:debug "Staring"
    local tgt
    tgt="$(x wsroot)/mod"
    [ -d "$tgt" ] && rm -rf "$tgt"
    mkdir -p "$tgt"

    x rmrf "$tgt/repo.txt"
    (
        ___x_cmd_yanfa_release_lsmod |
            while read -r mod; do
                (
                    cd "$___X_CMD_YANFA_RELEASE_TMP/$mod"
                    printf "%s\t" "$mod"
                    git rev-parse head
                )
        done >>"$tgt/repo.txt"
    )

    (
        printf "md5:%s\n" "$(x md5 "$tgt/repo.txt")"
        printf "sha256:%s\n" "$(x sha256 "$tgt/repo.txt")"
        printf "sha512:%s\n" "$(x sha512 "$tgt/repo.txt")"
    ) >"$tgt/hashsum.txt"

    ___x_cmd_yanfa_release_lsfile | while read -r line; do
        (
            cd "$___X_CMD_YANFA_RELEASE_TMP"
            ___x_cmd_yanfa_release_cpfile_inner "$line" "$tgt"
            yanfa:debug "<release_cpfile> $line => $tgt: $?"
        )
    done
    # TODO: In Github Action, it return 1. Resulting in breaking. cpfile_inner is OK. The bug might be in while pipe.
    yanfa:debug "exit: $?"
)

___x_cmd_yanfa_release_wc(){
    param:void
    x:trace yanfa/relesae/wc
    cd "$(x wsroot)/mod" &&
        ___x_cmd_yanfa_release_lsfile "$@" | xargs wc | sort -n -r | less
}

# EndSection

# Section: tgz tar 7z

___x_cmd_yanfa_release_tgz()(
    param:void
    case "${1:-all}" in
        core)       scope=core ;;
        all)        scope=all ;;
        *)          return 1 ;;
    esac

    WSROOT="$(x wsroot)"

    [ -f "$scope.tgz" ] && rm "$scope.tgz"

    cd "$WSROOT/mod" &&
        mkdir -p "$WSROOT/dist" &&
        tar czf "$scope.tgz" * 2>/dev/null &&
        mv "$scope.tgz" "$WSROOT/dist/$scope.tgz" &&
        ls -alh "$WSROOT/dist/$scope.tgz"
)

___x_cmd_yanfa_release_7z()(
    param:void
    case "${1:-all}" in
        core)       scope=core ;;
        all)        scope=all ;;
        *)          return 1 ;;
    esac

    WSROOT="$(x wsroot)"

    cd "$WSROOT/mod" &&
        mkdir -p "$WSROOT/dist" &&
        7z a "$scope.7z" * &&
        mv "$scope.7z" "$WSROOT/dist/$scope.7z" &&
        ls -alh "$WSROOT/dist/$scope.7z"
)

# EndSection
