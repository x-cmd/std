

___x_cmd_yanfa_try(){
    param:void
    ___x_cmd_yanfa_try_posix "$@"
}

___x_cmd_yanfa_try_exausted(){
    DOCKER_PLATFORM=linux/arm64

# bash3
# bash4
# bash5

    local container_list="
xcmd/alpine
xcmd/debian
xcmd/ubuntu
xcmd/centos
xcmd/fedora
xcmd/opensuse/tumbleweed
xcmd/archlinux
xcmd/gentoo/stage3
"

    local image
    echo "$container_list" | while read -r image; do
        docker run -it -v  "$(pwd):/pd/" "${image}" "$@"
    done
}

# Test inside ...
# I think we should use posix shell compatible mode to do it...
___x_cmd_yanfa_try_get_image(){
    case "${1:?Provide fun}" in
        bash3)      printf "%s" bash:3 ;;
        bash4)      printf "%s" bash:4 ;;
        bash5)      printf "%s" bash:5 ;;
        zsh)        printf "%s" xcmd/base-alpine-2-dev ;;
        ksh)        printf "%s" xcmd/base-alpine-2-dev ;;
        ash)        printf "%s" xcmd/base-alpine-2-dev ;;
        dash)       printf "%s" xcmd/base-debian-2-dev ;;
    esac
}

# x dev try     =>      x dev try posix

___x_cmd_yanfa_try_exec(){
    local shell_name="$1"; shift
    local image
    image="$(___x_cmd_yanfa_try_get_image "$shell_name")"
    local actual_name
        case "$shell_name" in
            bash*)  actual_name=bash ;;
            ksh)    actual_name=mksh ;;
            *)      actual_name="$shell_name"
        esac
        docker run -i "$image" "$actual_name"
}

___x_cmd_yanfa_try_get_shell_to_test(){
    cat <<A
bash3
bash4
bash5
zsh
ash
dash
ksh
A
}

# Section: try script
___x_cmd_yanfa_try_script(){
    local shell_name="${1:-Must provide shell name}";   shift

    {
        if [ $# -gt 0 ]; then
            printf "%s" "$*"
        else
            cat
        fi
    } | {
        local image
        image="$(___x_cmd_yanfa_try_get_image "$shell_name")"
        local actual_name
        case "$shell_name" in
            bash*)  actual_name=bash ;;
            ksh)    actual_name=mksh ;;
            *)      actual_name="$shell_name"
        esac
        docker run -i "$image" "$actual_name"
    }
}

___x_cmd_yanfa_try_script_all(){
    local SHELL

    if [ "$#" -eq 0 ]; then

        cat >&2 <<A
Please input the script. Press Ctrl-D to EXIT.
A

        local script
        script="$(cat)" || {
            cat >&2 <<A
Wrong code. Exit.
A
            return 1
        }

        trap 'printf "Interrputed.\n"; break ' SIGINT
        trap 'printf "Interrputed.\n"; break ' SIGTERM

        ___x_cmd_yanfa_try_get_shell_to_test | {
            trap 'printf "Interrputed.\n"; break ' SIGINT

            while read -r SHELL || echo err; do

                echo "trap"
                trap -p SIGINT

                printf "\n%s\n%s: %s\n" "--------------------" "Trying" "$SHELL" >&2
                printf "%s" "$script" | ___x_cmd_yanfa_try_script "$SHELL"
                code=$?

                if [ $code -eq 255 ]; then
                    printf "%s\n" "Exit because docker exit in 255 status." >&2
                    return 255
                fi
            done
        }
        return
    else
        trap 'printf "Interrputed.\n"; break ' SIGINT
        ___x_cmd_yanfa_try_get_shell_to_test | while read -r SHELL; do
            printf "\n%s\n%s: %s\n" "--------------------" "Trying" "$SHELL"
            ___x_cmd_yanfa_try_script "$SHELL" "$@"
            code=$?
            if [ $code -eq 255 ]; then
                printf "%s\n" "Exit because docker exit in 255 status." >&2
                return 255
            fi
        done
        trap - SIGINT
    fi

}

___x_cmd_yanfa_try_posix(){
    ___x_cmd_yanfa_try_script_all "$@"
}

# EndSection


# Section: for test

___x_cmd_yanfa_get_ximage(){
    case "$1" in
        bash3)      printf "%s" bash:3 ;;   # inject curl
        bash4)      printf "%s" bash:4 ;;   # inject curl
        bash5)      printf "%s" xcmd/alpine-2-dev ;;
        zsh)        printf "%s" xcmd/alpine-2-dev ;;
        ksh)        printf "%s" xcmd/alpine-2-dev ;;
        ash)        printf "%s" xcmd/alpine-2-dev ;;
        dash)       printf "%s" xcmd/debian-2-dev ;;
    esac
}
# EndSection



