# shellcheck shell=sh
# shellcheck disable=SC2039,3043

############################
# Section 2: Wrapping std/http module with object naming changing
############################
___gt_resp_header() {
    http "@_x_cmd_x_bash_gitee_${O:-GITEE_DEFAULT}" resp header "$@"
}

# TODO: Not supported yet
___gt_resp_body() {
    http "@_x_cmd_x_bash_gitee_${O:-GITEE_DEFAULT}" resp body "$@"
}

___gt_get() {
    http "@_x_cmd_x_bash_gitee_${O:-GITEE_DEFAULT}" get "$@"
}

___gt_get_multi() {
    if [ -n "$page" ] || [ -n "$per_page" ]; then
        ___gt_get "$@" page per_page
        return
    fi
    local i=1 
    local total_page=100000
    while [ "$i" -le "$total_page" ]; do
        ___gt_get "$@" page="$i" per_page=100
        total_page="$(___gt_resp_header "total_page")"
        [ -z "$total_page" ] && return
        # echo "total_page:$total_page" >&2
        i=$((i+1))
    done
}

# gt_post(){ O="_x_cmd_x_bash_gitee_${O:-GITEE_DEFAULT}" http_post "$@"; }
___gt_post_json() {
    http "@_x_cmd_x_bash_gitee_${O:-GITEE_DEFAULT}" post  json "$@"
}

# gt_put(){ O="_x_cmd_x_bash_gitee_${O:-GITEE_DEFAULT}" http_put "$@"; }
___gt_put_json() {
    http "@_x_cmd_x_bash_gitee_${O:-GITEE_DEFAULT}" put json "$@"
}

___gt_patch_json() {
    http "@_x_cmd_x_bash_gitee_${O:-GITEE_DEFAULT}" patch json "$@"
}

___gt_delete() {
    http "@_x_cmd_x_bash_gitee_${O:-GITEE_DEFAULT}" delete "$@"
}

___gt_dict_get() {
    http "@_x_cmd_x_bash_gitee_${O:-GITEE_DEFAULT}" dict "$@"
}

___gt_dict_put() {
    http "@_x_cmd_x_bash_gitee_${O:-GITEE_DEFAULT}" dict "$@"
}


############################
# Section 3: Parameter Utilities
############################

alias gt_param_init_owner_repo='
    local owner_repo
    ___gt_param_normalize_repo  || return
'

___gt_param_normalize_repo() {
    local op="$repo"
    [ -z "$op" ] && op="$1"
    case "$op" in
    */*)
        owner_repo="$(printf "%s" "$op")"
        ;;
    "")
        local _owner
        local _repo
        _owner="$(gt_current_owner)"
        if [ -z "$_owner" ]; then
            printf "No owner provided. Default owner NOT set.\n" >&2
            return 1
        fi

        _repo="$(gt_current_repo)"
        if [ -z "$_repo" ]; then
            printf "No repo provided. Default repo NOT set.\n" >&2
            return 1
        fi

        owner_repo="$(printf "%s/%s" "$_owner" "$_repo")"
        ;;
    *)
        local _owner
        _owner="$(gt_current_owner)"
        if [ -z "$_owner" ]; then
            printf "No owner provided. Default owner not set.\n" >&2
        fi
        owner_repo="$(printf "%s" "$_owner/$op")"
        ;;
    esac
}

### Repo #1

___gt_parse_owner_repo() {
    local O="${O:-GITEE_DEFAULT}"
    if [ -z "$repo" ]; then
        repo="$(gt_current_repo)"
    fi
    # if [[ "$repo" = */* ]]; then
    if str_regex "$repo" "/"; then
        owner=${repo%%/*}
        repo=${repo##*/}
    fi
    if [ -z "$owner" ]; then
        owner="$(gt_current_owner)"
    fi
}

___gt_cache(){
    ccmd -- eval "$@"
}

___gt_table() {
    local tmp
    tmp=$1
    shift
    echo "$tmp" 2>&1 | ui table jsonfmt "$@"
}