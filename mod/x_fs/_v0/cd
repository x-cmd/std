# shellcheck shell=sh disable=SC3043,SC2164

# author:       Li Junhao           l@x-cmd.com    edwinjhlee.github.io
# maintainer:   Li Junhao
# license:      GPLv3

# jump to a folder contains: jc bin
# jump to a child folder: jc lib
# jump to a father folder: jo opening; cd .

# cd /u/l/

# TODO: better ui
___x_cmd_cd_choose(){

    # If no interactive, return false
    if [ "$1" = "" ] || [ "${-#*i}${___X_CMD_FS_DEBUG}" = "$-" ]; then
        printf "%s\n" "cd: no such directory: $p " >&2
        return 1
    fi

    local adir
    local i=1
    local text=

    local IFS="
"
    while read -r adir; do
        text="$text$(printf "%s.\t%s\n" "$i" "$adir")
"
        i=$((i+1))
    done <<A
$1
A
    if [ "$i" -eq 2 ]; then
        ___x_cmd_cd_origin "$1"
        return
    fi

    printf "%s" "$text"

    printf "...Which to cd into: "
    read -r ans
    if [ "$ans" -ge 1 ] 2>/dev/null && [ "$ans" -lt "$i" ] 2>/dev/null ; then
        ___x_cmd_cd_origin "$(awk -v target="$ans"  'NR==target{ print $0 }'<<A
$1
A
)"
    fi
}

___x_cmd_cd_back(){
    local p
    p="$(cd .. && pwd)"
    local pat="$1"
    local target
    if target="$(printf "" | awk -v p="$p" -v target="$pat" '
BEGIN {
    return_code = 1
    arrl = split(p, arr, "/")
    for (i=arrl; i>=1; i--) {
        if (match(arr[i], target)) {
            res = ""
            for (j=1; j<=i; ++j) {
                if (arr[j] == "") continue
                res = res "/" arr[j]
            }
            print res
            return_code = 0
            exit(0)
        }
    }
    exit(1)
}

END {
    exit(return_code)
}
'
)"; then
        ___x_cmd_cd_origin "$target"
    fi

}

___x_cmd_cd_iter()(
    local root="$1"
    local iter_path="$2"

    ___x_cmd_cd_origin "$root"

    local cur="${iter_path%%/*}"
    
    if [ "$cur" = "$iter_path" ]; then
        # this is final
        if [ "${cur%*}" = "$cur" ]; then
            cur="$cur*"
        fi
        eval "ls -d $cur/" 2>/dev/null | awk -v root="$root" '{ printf("%s%s\n", root, $0) }'
    else
        local elem
        iter_path="${iter_path#*/}"
        if [ "${cur%*}" = "$cur" ]; then
            cur="$cur*"
        fi
        eval "ls -d $cur/" 2>/dev/null | while read -r elem; do
            ___x_cmd_cd_iter "${root%/}/$elem" "$iter_path"
        done
    fi
)

mkdir -p "$___X_CMD_ROOT/.tmp/cd"

___x_cmd_cd_origin(){
    # `command cd` will not execute buildin command `cd` in zsh, refer: https://linux.die.net/man/1/zshbuiltins
    if [ -n "$ZSH_VERSION" ]; then
        builtin cd "$@"
    else
        command cd "$@"
    fi

    [ "${-#*i}${___X_CMD_FS_DEBUG}" = "$-" ] && return
    if [ -z "$___X_CMD_CD_HISTORY" ]; then
        ___X_CMD_CD_HISTORY="$(pwd | tee -a "$___X_CMD_ROOT/.tmp/cd/history")"
    else
        ___X_CMD_CD_HISTORY="$(pwd | tee -a "$___X_CMD_ROOT/.tmp/cd/history")
$___X_CMD_CD_HISTORY"
    fi
}

___X_CMD_AWK_CODE='{
    if (count > 200) { exit(exit_code); }
    if (data[$0] == "") {
        data[$0] = 1
        print $0
        count = count + 1
    } else {
        exit_code = 1
    }
}
END {
    exit(exit_code)
}
'

___x_cmd_cd_load_history(){
    if [ -f "$___X_CMD_ROOT/.tmp/cd/history" ]; then
    ___X_CMD_CD_HISTORY=$(awk '
BEGIN {
    res_len = 0
    len = 0
}
{
    data[ len ] = $0
    len = len + 1
}
END {
    for (j=0; j<len && res_len<200; j++) {
        if (map[ data[ len-j-1 ] ] != "") {
            continue
        }
        map[ data[ len-j-1 ] ] = 1
        res_len = res_len + 1
        print data[ len-j-1 ]
    }
}' <"$___X_CMD_ROOT/.tmp/cd/history")
fi

    printf "%s" "$___X_CMD_CD_HISTORY" | awk '
BEGIN {
    res_len=0
    len=0
}
{
    data[ len ] = $0
    len = len + 1
}
END {
    for (j=0; j<len ; j++) {
        print data[ len-j-1 ]
    }
}
    ' > "$___X_CMD_ROOT/.tmp/cd/history"
}
___x_cmd_cd_load_history

___x_cmd_cd(){
    local p="$1"

    if [ -d "$p" ]; then
        ___x_cmd_cd_origin "$p"
        return
    fi

    case "$p" in
        "")      ___x_cmd_cd_origin              ;;
        ...)     ___x_cmd_cd_origin ../..        ;;
        ....)    ___x_cmd_cd_origin ../../../    ;;
        ../*)    ___x_cmd_cd_back "${p#../}"     ;;
        ./*)     ___x_cmd_cd_choose "$(find . -name "*${p#./}*" -type d 2>/dev/null)" ;;
        
        # Self defined documents
        -%)     
            ___X_CMD_CD_HISTORY="$(printf "%s" "$___X_CMD_CD_HISTORY" | awk "$___X_CMD_AWK_CODE")"
            printf "%s\n" "$___X_CMD_CD_HISTORY"
            ;;
        -/) 
            # very less used
            ___X_CMD_CD_HISTORY=
            ;;
        -) 
            # cd to most recent
            ___x_cmd_cd_origin -
            ;;
        --)
            ___X_CMD_CD_HISTORY="$(printf "%s" "$___X_CMD_CD_HISTORY" | awk "$___X_CMD_AWK_CODE")"
            local target="${___X_CMD_CD_HISTORY#*
*
}"
            [ "$target" = "$___X_CMD_CD_HISTORY" ] && printf "%s\n" "cd: no such directory: " >&2 && return
            target="${target%%
*}"
            ___x_cmd_cd_origin "$target"
            ;;
        -*)
            ___X_CMD_CD_HISTORY="$(printf "%s" "$___X_CMD_CD_HISTORY" | awk "$___X_CMD_AWK_CODE")"
            ___x_cmd_cd_origin "$(awk "FNR <= 1" <<A
$(printf "%s" "$___X_CMD_CD_HISTORY" | grep "${p#-}")
A
)"         
            ;;
        :*)
            p=${p#:}
            local ans
            ans="$(find "$HOME" \
                -path "$HOME/Library" -prune \
                -o -path "$HOME/.*" -prune \
                -o -path "*/.git" -prune \
                -o -name "*$p*" -type d -print 2>/dev/null)"
            if [ "$ans" = "" ]; then
                printf "%s\n" "not found: " 2>/dev/null
                return 1
            fi
            ___x_cmd_cd_choose "$ans"
            ;;
        /*)    ___x_cmd_cd_choose "$(___x_cmd_cd_iter / "${p#/}")" ;;
        */*)   ___x_cmd_cd_choose "$(___x_cmd_cd_iter . "${p}")"   ;;
        *)
            ___X_CMD_CD_HISTORY="$(printf "%s" "$___X_CMD_CD_HISTORY" | awk "$___X_CMD_AWK_CODE")"
            ___x_cmd_cd_choose "$(printf "%s" "$___X_CMD_CD_HISTORY" | grep "${p#-}")"
            ;;
    esac   
}

___x_cmd_cd_advise_candidates(){
    local can="$1"
    case "$can" in
        "")
            cat <<A
=
-
...
../
$(ls)
A
        ;;
        ./*)
            ;;
        ../*)
            ;;
        -)  ;;
        --)
            ;;
        -*)
            ;;
        /*) ;;
        */*) ;;


    esac
}

