# shellcheck shell=sh disable=SC2039,SC2142,SC3043


# Section: Testcase for generate advise json.
local space="$(printf " ")"
test_advise_json(){
  @assert stdout "X_CMD_ADVISE_FUNC_NAME=paramtest; paramtest _x_cmd_advise_json"<<A
{
  "--candi_null": {
    "#1": [ "abc", "cde", "def" ],
    "#desc": "Test null option to use candidate"
  },
  "option|op-test": {
    "#desc": "Test option",
    "--mul_line_arg|-m": {
      "#1": [  ],
      "#desc": "Test multiple line argument"
    },
    "--regex_arg1": {
      "#1": [  ],
      "#desc": "Test an argument with regex 1"
    },
    "--regex_arg2": {
      "#1": [  ],
      "#desc": "Test an argument with regex 2"
    },
    "--repo|-r": {
      "#1": [  ],
      "#desc": "Provide repo name"
    },
    "--repo2|-b|m": {
      "#1": [ "abc", "cde", "def" ],
      "#2": [  ],
      "#desc": "Provide two repo name"
    },
    "--priviledge|-p": {
      "#1": [ "private", "public" ],
      "#desc": "Provide privilidge"
    },
    "--no_type_arg|-n": {
      "#1": [  ],
      "#desc": "Test no type argument but have default"
    },
    "--flag1|-f": "--- Flag1 that you can use $\{flag1:-false} to get the bool value",
    "--flag1222|-g": "--- Flag1222 that you can use $\{flag1222:-false} to get the bool value",
    "#1": "list_repo",
    "#222222": [  ],
    "#3": [  ]
  },
  "subcmd": {
    "#desc": "Test subcommand",
    "sscmd1|s1|s-s1|longlongsubcommand": {
      "#desc": "Test sub sub command1",
      "--ss1_opt1|-s": "--- Test sub sub command1 option1",
      "--ss1_opt2|-d": "--- Test sub sub command1 option2",
      "--ss1_opt3|-f": "--- Test sub sub command1 option3",
      "subcmd_null":${space}
    },
    "sscmd2": ,
    "subcmd_null":${space}
  },
  "marg": {
    "#desc": "Test multiple argement",
    "--card|-c|m": {
      "#1": [  ],
      "#2": [  ],
      "#3": [  ],
      "#desc": "Provide multiple action card in following format. [ <title> <message-url> <picture-url> ] ..."
    }
  },
  "rarg": {
    "#desc": "Test rest argement",
    "#1": [ "private", "public", "inner-public" ],
    "#2": [  ],
    "#3": [  ],
    "#4": [  ],
    "#5": [  ]
  },
  "namelist": {
    "#desc": "Test name list",
    "--repo|-r": {
      "#1": [  ],
      "#desc": "Provide repo name"
    },
    "--repo2|-b|m": {
      "#1": [ "abc", "cde", "def" ],
      "#2": [  ],
      "#desc": "Provide two repo name"
    },
    "--priviledge|-p": {
      "#1": [ "private", "public" ],
      "#desc": "Provide privilidge"
    },
    "--no_type_arg|-n": {
      "#1": [  ],
      "#desc": "Test no type argument but have default"
    },
    "--flag1|-f": "--- Flag1 that you can use $\{flag1:-false} to get the bool value",
    "--flag1222|-g": "--- Flag1222 that you can use $\{flag1222:-false} to get the bool value",
    "#1|--mul_line_arg|-m": "list_repo",
    "#3|--regex_arg2": [  ],
    "#2|--regex_arg1": [  ]
  },
  "snl": {
    "#desc": "Test small name list",
    "#1|--org": [  ]
  },
  "advise_null": {
    "#desc": "Test advise null"
  },
  "subcmd_null":${space}
}
A
}
# EndSection

@assert:file:func
