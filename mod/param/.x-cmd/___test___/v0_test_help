# shellcheck shell=sh disable=SC2039,SC2142,SC3043

local space="$(printf " ")"
local COLUMNS=115 # This is screen width

test_error_help(){

    @assert stderr paramtest option --mul_line_arg <<A
error: Option require value, but none was supplied: '--mul_line_arg,-m <mline_arg>'
For more information try --help
A

    @assert stderr paramtest option --mul_line_arg dd -r abcdd <<A
error: Fail to match any regex pattern, option '--repo,-r <>' is part of value is 'abcdd'
 =~ abc cde def
For more information try --help
A

    @assert stderr paramtest option --mul_line_arg dd -r abc --repo2 abcdd <<A
error: Fail to match any candidate, option '--repo2,-b <arg1> <arg2>' is part of value is 'abcdd'
 = abc cde def
For more information try --help
A
}

test_common_help(){
    @assert stdout paramtest _x_cmd_help << A

OPTIONS:
    --candi_null <candi_null>   Test null option to use candidate [default: abc] [candidate: "abc", "cde", "def"]

SUBCOMMANDS:
    option,op-test   Test option
    subcmd           Test subcommand
    marg             Test multiple argement
    rarg             Test rest argement
    namelist         Test name list
    snl              Test small name list
    advise_null      Test advise null
    subcmd_null      Test subcommand null

Run 'CMD SUBCOMMAND --help' for more information on a command

A

    @assert stdout paramtest option --help <<A

FLAGS:
    --flag1,-f      Flag1 that you can use \\$\\{flag1:-false} to get the bool value
    --flag1222,-g   Flag1222 that you can use \\$\\{flag1222:-false} to get the bool value

OPTIONS:
    --mul_line_arg,-m <mline_arg>       Test multiple line argument
    --regex_arg1 <>                     Test an argument with regex 1 [default: 0] [regex: "[0-9]*"]
    --regex_arg2 <>                     Test an argument with regex 2 [default: 20] [regex: "([1-9]?[0-9]|100)"]
    --repo,-r <>                        Provide repo name [regex: "abc"|"cde"|"def"]
    --repo2,-b <arg1> <arg2>            Provide two repo name [candidate: "abc", "cde", "def"] [regex:${space}
                                        "cde"|"def"] [multiple]
    --priviledge,-p <priviledge_type>   Provide privilidge [default: private] [candidate: "private", "public"]
    --no_type_arg,-n <no_type_arg>      Test no type argument but have default [default: default]

ARGS:
    #1        Test rest argument #1 when exist option and flag
    #222222   Provide number #2
    #3        Provide number #3

A

    @assert stdout paramtest_longoption _x_cmd_help <<A

FLAGS:
    --flag1,-f      Flag1 that you can use \\$\\{flag1:-false} to get the bool value Flag1 that you can use${space}
                    \\$\\{flag1:-false} to get the bool value Flag1 that you can use \\$\\{flag1:-false} to get the${space}
                    bool value Flag1 that you can use \\$\{flag1:-false} to get the bool value
    --flag1222,-g   Flag1222 that you can use \\$\\{flag1222:-false} to get the bool value

OPTIONS:
    --mul_line_arg,-m <mline_arg>   Test multiple line argument Test multiple line argument Test multiple line${space}
                                    argument Test multiple line argument Test multiple line argument Test${space}
                                    multiple line argument Test multiple line argument Test multiple line${space}
                                    argument Test multiple line argument Test multiple line argument Test${space}
                                    multiple line argument Test multiple line argument
    --regex_arg1 <>                 Test an argument with regex 1 [default: 0] [regex: "[0-9]*"]
    --regex_arg2 <>                 Test an argument with regex 2 [default: 20] [regex: "([1-9]?[0-9]|100)"]
    --candi_null <candi_null>       Test null option to use candidate [default: abc] [candidate: "abc", "cde",${space}
                                    "def"]
    --name <name>                   Provide name
    --description <desc>            Description [default: a b]
    --cidr <cidr>                   Subnet of 172.16.0.0/12, 10.0.0.0/8, 192.168.0.0/16 [default: 3]

ARGS:
    #1        Test rest argument #1 when exist option and flag Test rest argument #1 when exist option and flag${space}
              Test rest argument #1 when exist option and flag Test rest argument #1 when exist option and flag${space}
              Test rest argument #1 when exist option and flag
    #222222   Provide number #2
    #3        Provide number #3

A

    @assert stdout paramtest namelist _x_cmd_help <<A

FLAGS:
    --flag1,-f      Flag1 that you can use $\\\{flag1:-false} to get the bool value
    --flag1222,-g   Flag1222 that you can use $\\\{flag1222:-false} to get the bool value

OPTIONS:
    --repo,-r <>                        Provide repo name [regex: "abc"|"cde"|"def"]
    --repo2,-b <arg1> <arg2>            Provide two repo name [candidate: "abc", "cde", "def"] [regex:${space}
                                        "cde"|"def"] [multiple]
    --priviledge,-p <priviledge_type>   Provide privilidge [default: private] [candidate: "private", "public"]
    --no_type_arg,-n <no_type_arg>      Test no type argument but have default [default: default]

ARGS:
    #1|--mul_line_arg|-m   Test multiple line argument
    #3|--regex_arg2        Test an argument with regex 2 [default: 20] [regex: "([1-9]?[0-9]|100)"]
    #2|--regex_arg1        Test an argument with regex 1 [default: 0] [regex: "[0-9]*"]

A

    @assert stdout "paramtest subcmd _x_cmd_help" <<A

SUBCOMMANDS:
    sscmd1,s1,s-s1,longlongsubcommand   Test sub sub command1
    sscmd2                              Test sub sub command2
    subcmd_null                         Test 2 subcommand null

Run 'CMD SUBCOMMAND --help' for more information on a command

A

    @assert stdout paramtest rarg _x_cmd_help <<A

ARGS:
    #1   Test rest argument #1 request [candidate: "private", "public", "inner-public"]
    #2   Test rest argument #2 request [regex: "[-0-9,]+"]
    #3   Test rest argument #3 request
    #4   Test rest argument #4 request [default: iii]
    #5   Test rest argument #5 request

A

    @assert stdout param_gh _x_cmd_help <<A

SUBCOMMANDS:
    repo,re   repo command
    current   set current owner, repo
    org       manage org
    user      user
    config    save, load, which
    token     set token
    auth      Authorize gh
    release   manage release
    member    Authorize gh

Run 'CMD SUBCOMMAND --help' for more information on a command

A

    @assert stdout param_gh re _x_cmd_help <<A

SUBCOMMANDS:
    create   create repo
    rm       remove repo

Run 'CMD SUBCOMMAND --help' for more information on a command

A
}
@assert:file:func