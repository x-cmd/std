# shellcheck shell=sh
# shellcheck disable=SC2039,3043

# define lazy loader
# ___x_cmd_definelazyloader   ___x_cmd_gitlab_groups_member           gitlab/lib/groups/member

___x_cmd_gitlab_groups(){
    param:scope     ___x_cmd_gitlab
    param:subcmd ___x_cmd_gitlab_groups                                                 \
        ls                      "List all groups"                                       \
        info                    "Show groups information"                               \
        create                  "Create groups"                                         \
        member                  "groups member manage"                                  \
        update                  "Update group"                                          \
        issue                   "groups issue list"                                     \
        repo                    "group repo mange"
    param:subcmd:try
    param:run

    ___x_cmd_gitlab_groups _param_help_doc
    gitlab_log warn "Subcmd Not Found."
    return 1
}

___x_cmd_gitlab_subgroup(){
    param:scope     ___x_cmd_gitlab
    param:subcmd ___x_cmd_gitlab_subgroup               \
        ls                      "List all subgroups"    \
        create                  "Create subgroups"
    param:subcmd:try
    param:run

    ___x_cmd_gitlab_subgroup _param_help_doc
    gitlab_log warn "Subcmd Not Found."
    return 1
}

# Section: list & info
# shellcheck disable=SC2154
# skip_groups  正则	array of integers
___x_cmd_gitlab_groups_ls(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
type:
    order_by = name path id  similarity
    sort = asc desc
options:
    --sort                      "Order groups in asc or desc order."                                <>=""
    --search                    "Return the list of authorized groups matching the search criteria" <>=""
    --order_by                  "Order groups by"                                                   <>=""
    --skip_groups               "Skip the group IDs passed"                                         <>=""
    --min_access_level          "Limit to groups where current user has at least this access level" <>:Number=""
    --per_page                  "Results per page (max 100)"                                        <>=""
    --page                      "Page number of the results to fetch."                              <>=""
    --owned                     "Limit to groups explicitly owned by the current user"
    --statistics                "Include group statistics"
    --all_available             "Show all the groups you have access to"
    --top_level_only            "Limit to top level groups, excluding all subgroups"
    --with_custom_attributes    "Include custom attributes in response"
'
    param:run

    ___gitlab_ui_mutual ___x_cmd_gitlab_get_multi "/groups" per_page  page <<A
        ___ui_table_json Id=.id Name=.name Path=.path Visibility=.visibility Url=.web_url -- \$@
A
}

___x_cmd_gitlab_subgroup_ls(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
type:
    order_by = name path id  similarity
    sort = asc desc
options:
    #1|--id                     "The ID or URL-encoded path of the group of the immediate parent group" <>
    --sort                      "Order groups in asc or desc order."                                    <>=""
    --search                    "Return the list of authorized groups matching the search criteria"     <>=""
    --order_by                  "Order groups by"                                                       <>=""
    --skip_groups               "Skip the group IDs passed"                                             <>=""
    --min_access_level          "Limit to groups where current user has at least this access level"     <>:Number=""
    --owned                     "Limit to groups explicitly owned by the current user"
    --statistics                "Include group statistics"
    --all_available             "Show all the groups you have access to"
    --top_level_only            "Limit to top level groups, excluding all subgroups"
    --with_custom_attributes    "Include custom attributes in response"
'
    param:run

    ___gitlab_ui_mutual ___x_cmd_gitlab_get_multi "/groups/$1/subgroups" <<A
        ___ui_table_json Id=.id Name=.name Path=.path Visibility=.visibility Url=.web_url -- \$@
A
}

# shellcheck disable=SC2154
___x_cmd_gitlab_groups_info(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    #1|--groups                 "The ID or URL-encoded path of the group"     <>=""
    --with_projects             "Include details from projects that belong to the specified group"
    --with_custom_attributes    "Include custom attributes in response"
'
    param:run

    ___x_cmd_gitlab_http get "/groups/${1:?Provide groups ID or path}" | \
    {
        ___x_cmd_git_json_query_rename id=.id name=.name dir=.path visibility=.visibility url=.web_url
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true   "Success" "id: $id" "name: $name" "path: $dir" "visibility: $visibility" "url: $url"
        else
            ___x_cmd_ui_tf false  "Couldn't find any groups info data by $1"
            return 1
        fi
    }
}
# EndSection

# Section: create
# shellcheck disable=SC2181
# TODO:On GitLab SaaS, you must use the GitLab UI to create groups without a parent group. You cannot use the API to do this.???
___x_cmd_gitlab_groups_create(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    -p|--path                   "groups path"                   <>=""
    --description               "The group description."        <>=""
    --visibility                "The groups visibility."        <>="" = "" private internal public
    --subgroup_creation_level   "Allowed to create subgroups."  <>="" = "" maintainer owner
    #1                          "groups name"
'
    param:run
    local name
    name="$1"
    [ $# -ne 0 ] || { gitlab_log error "Please provide groups name"; return 1; }
    local gitlab_path="$name"
    [ -z "$p" ] || gitlab_path="$p"
    local gen_gitlab_json
    gen_gitlab_json="$(param:option2json -p +name path=gitlab_path)"

    ___x_cmd_gitlab_http post "/groups" "$gen_gitlab_json" | \
    {
        ___x_cmd_git_json_query_rename id=.id
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true   "Creating groups Successfully"
        else
            ___x_cmd_ui_tf false  "Creating groups failure by $1."
            return 1
        fi
    }
}
# EndSection

# Section: create subgroup
# shellcheck disable=SC2181
# TODO:On GitLab SaaS, you must use the GitLab UI to create groups without a parent group. You cannot use the API to do this.???
___x_cmd_gitlab_subgroup_create(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    --parent_id         "parent groups id."    <>
    --subgroup_path     "subgroup path"        <>=""
    --name              "subgroup name"        <>
'
    param:run
    local group_path="$subgroup_path"
    [ -n "$group_path" ] || group_path="$name"
    gen_gitlab_json="$(param:option2json -subgroup_path path=group_path)"
    ___x_cmd_gitlab_http post "/groups" "$gen_gitlab_json"| \
    {
        ___x_cmd_git_json_query_rename id=.id
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true   "Creating groups Successfully"
        else
            ___x_cmd_ui_tf false  "Creating groups failure by $1."
            return 1
        fi
    }
}
# EndSection

# Section:groups update
___x_cmd_gitlab_groups_update(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    -p|--path                   "groups path"                   <>=""
    --name                      "The name of the group"         <>=""
    --description               "The group description."        <>=""
    --visibility                "The groups visibility."        <>="" = "" private internal public
    --subgroup_creation_level   "Allowed to create subgroups."  <>="" = "" maintainer owner
    #1                          "The ID of the group."
'
    param:run
    [ $# -ne 0 ] || { gitlab_log error "Please provide groups ID"; return 1; }
    local gitlab_path="$p"
    local gen_gitlab_json
    # path=gitlab_path
    gen_gitlab_json="$(param:option2json -p path=gitlab_path)"

    ___x_cmd_gitlab_http put "/groups/$1" "$gen_gitlab_json" | \
    {
        ___x_cmd_git_json_query_rename id=.id
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true   "Update groups Successfully"
        else
            ___x_cmd_ui_tf false  "Update groups failure by $1."
            return 1
        fi
    }
}
# EndSection

# Section: groups repo
___x_cmd_gitlab_groups_repo(){
    param:subcmd ___x_cmd_gitlab_groups_repo    \
        ls          "list repo"
        # create      "groups repo create"
    param:subcmd:try
    param:run

    ___x_cmd_gitlab_groups_repo _param_help_doc
    gitlab_log warn "Subcmd Not Found."
    return 1
}

___x_cmd_gitlab_groups_repo_ls(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    #1|--id        "The ID or group path"           <>:Address
    --page          "page"                          <>:NatureNumber=1
    --per_page      "per_page"                      <>:NatureNumber=20
    --visibility    "Limit by visibility"           <>=""
    --archived      "Limit by archived status"
'
    param:run

    ___gitlab_ui_mutual ___x_cmd_gitlab_get_multi "/groups/$id/projects" page per_page visibility archived <<A
        ___ui_table_json Id=.id Name=.name path=.path visibility=.visibility web_url=.web_url -- \$@
A
}

## TODO: create project to groups
# EndSection


# Section: groups issue ls
___x_cmd_gitlab_groups_issue(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
   --id                                    "The ID or URL-encoded path of the project owned by the authenticated user"                                                  <>
   --assignee_id                           "Return issues assigned to the given user id."                                                                               <>:Number=""
   --assignee_username                     "Return issues assigned to the given username."                                                                              <>:array=""
   --author_id                             "Return issues created by the given user id."                                                                                <>:Number=""
   --author_username                       "Return issues created by the given username."                                                                               <>=""
   --confidential                          "Filter confidential or public issues."
   --created_after                         "Return issues created on or after the given time. Expected in ISO 8601 format"                                              <>:datetime=""
   --created_before                        "Return issues created on or before the given time."                                                                         <>:datetime=""
   --due_date                              "Return issues that have no due date,are overdue,or whose due date is this week,this month,or between two weeks ago and next month"     <>=""
   --epic_id                               "Return issues associated with the given epic ID."                                                                           <>:Number=""
   --iids                                  "Return only the issues having the given iid"                                                                                <>:array=""
   --issue_type                            "Filter to a given type of issue. One of issue, incident, or test_case."                                                     <>=""
   --iteration_id                          "Return issues assigned to the given iteration ID."                                                                          <>:Number=""
   --iteration_title                       "Return issues assigned to the iteration with the given title."                                                              <>=""
   --labels                                "Comma-separated list of label names, issues must have all labels to be returned. "                                          <>=""
   --milestone                             "The milestone title. "                                                                                                      <>=""
   --my_reaction_emoji                     "Return issues reacted by the authenticated user by the given emoji. "                                                       <>=""
   --non_archived                          "Return issues only from non-archived projects.If false,the response returns issues from both archived and non-archived projects.Default is true"
   --not                                   "Return issues that do not match the parameters supplied. "                                                                  <>:hash=""
   --order_by                              "Return issues ordered by created_at,due_date,label_priority,milestone_due,popularity,priority,relative_position,title, updated_at,or weight fields.Default is created_at"         <>=""
   --scope                                 "Return issues for the given scope:"                                                                                         <>=""
   --sort                                  "Return issues sorted in asc or desc order. Default is desc"                                                                 <>=""
   --search                                "Search group issues against their title and description"                                                                    <>=""
   --state                                 "Return all issues or just those that are opened or closed"                                                                  <>=""
   --updated_after                         "Return issues updated on or after the given time."                                                                          <>:datetime=""
   --updated_before                        "Return issues updated on or before the given time."                                                                         <>:datetime=""
   --weight                                "Return issues with the specified weight."                                                                                   <>:Number=""
   --with_labels_details                   "If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color.Default is false."
'
 param:run

  ___gitlab_ui_mutual  ___x_cmd_gitlab_get_multi  "/groups/$id/issues" sort order_by search state  <<A
        ___ui_table_json Id=.id iid=.iid project_id=.project_id title=.title state=.state web_url=.web_url -- \$@
A
}

## TODO: create project to groups
# EndSection
