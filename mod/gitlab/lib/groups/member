

# shellcheck shell=sh
# shellcheck disable=SC2039,3043
___x_cmd_gitlab_groups_member(){
    param:subcmd ___x_cmd_gitlab_groups_member          \
        ls              "List member"                   \
        user            "Show groups member user info"  \
        add             "Add member"                    \
        rm              "Remove member"
    param:subcmd:try
    param:run

    ___x_cmd_gitlab_groups_member _param_help_doc
    gitlab_log warn "Subcmd Not Found."
    return 1
}

# shellcheck disable=SC2154
___x_cmd_gitlab_groups_member_ls(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    #1|--id         "The ID or URL-encoded path of the group."    <>
    --query         "A query string to search for members"          <>=""
    --user_ids      "Filter the results on the given user IDs"      <>:integer_array=""
'
 param:run
   ___gitlab_ui_mutual ___x_cmd_gitlab_get_multi "/groups/$id/members" <<A
        ___ui_table_json Id=.id Username=.username web_url=.web_url State=.state -- \$@
A
}

# shellcheck disable=SC2154
___x_cmd_gitlab_groups_member_user(){
    param:scope     ___x_cmd_gitlab
    param:dsl      '
options:
    #1|--id         "The ID or URL-encoded path of the group."  <>
    --user_id       "The user ID of the member"                 <>:UserName
'
    param:run

    ___x_cmd_gitlab_http get "/groups/$id/members/$user_id" | \
    {
        ___x_cmd_git_json_query_rename username=.username url=.web_url email=.email
        if [ -n "$username" ]; then
             ___x_cmd_ui_tf true  "Success" "username: $username" "url: $url" "email: $email"
             return 0
        else
            ___x_cmd_ui_tf false "Couldn't find any data by  $user_id in groups $id"
            return 1
        fi
    }
}

# shellcheck disable=SC2181
___x_cmd_gitlab_groups_member_add(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    --id                "The ID or URL-encoded path of the group"                                   <>:address
    --expires_at        "A date string in the format YEAR-MONTH-DAY"                                <>=""
    --access_level      "A valid access level"                                                      <>:Number
    --invite_source     "The source of the invitation that starts the member creation process."     <>=""
    --tasks_to_be_done  "Tasks the inviter wants the member to focus on."                           <>=""
    --tasks_project_id  "The project ID in which to create the task issues."                        <>=""
    #1|--user_id        "The user ID of the new member or multiple IDs separated by commas"
'
    param:run

    if [ $# -eq 0 ];then
        gitlab_log error "The user ID of the new member or multiple IDs separated by commas"
        return 1
    fi

    local gen_gitlab_json
    gen_gitlab_json="$(param:option2json -id +user_id)"

    if ___x_cmd_gitlab_http post "/groups/$id/members" "$gen_gitlab_json" >/dev/null; then
        gitlab_log info  "Add $username successfully"
    else
        gitlab_log error "Add $username failure"
        return 1
    fi

}

# shellcheck disable=SC2181
___x_cmd_gitlab_groups_member_rm(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    --id                    "The ID or URL-encoded path of the group"         <>
    --skip_subresources     ""
    --unassign_issuables    ""
    #n|--user_id            "The user ID of the member"
'
    param:run

    if [ $# -eq 0 ];then
        gitlab_log error "At least one user's spatial address is needed"
        return 1
    fi

    local username
    for username in "$@"; do
        # TODO:http handleï¼Œdelete repo return data is null.Status: 204 No Content
        if ___x_cmd_gitlab_http delete "/groups/$id/members/$username" >/dev/null; then
            gitlab_log info  "Remove $username successfully."
        else
            gitlab_log error "Remove $username failure"
            return 1
        fi
    done
}

