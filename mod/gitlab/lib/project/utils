# shellcheck shell=sh
# shellcheck disable=SC2039,3043

############################
# Section 6: Repo Path & Clone
############################
___x_cmd_gitlab_repo_url_http(){
    param:scope  ___x_cmd_gitlab
    param:dsl    '
options:
    #n  "Provide repo list"
'
    param:run

    local repo
    for repo in "$@"; do
        printf "https://gitee.com/%s.git\n" "$(___x_cmd_gitlab_param_normalize_repo "$repo")"
    done
}

___x_cmd_gitlab_repo_url(){
    param:void
    ___x_cmd_gitlab_repo_url_ssh ${1:+"$@"}
}

___x_cmd_gitlab_repo_url_ssh(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    #n "Provide repo list"
'
    param:run

    local repo
    for repo in "$@"; do
        printf "git@gitee.com:%s.git\n" "$(___x_cmd_gitlab_param_normalize_repo "$repo")"
    done
}

___x_cmd_gitlab_repo_clone(){
    ___x_cmd_gitlab_repo_clone_ssh "$@" && return 0
    ___x_cmd_gitlab_repo_clone_https "$@" && return 0
    return $?
}

# shellcheck disable=SC2120
___x_cmd_gitlab_repo_clone_ssh(){
    param:void
    git clone "$(___x_cmd_gitlab_repo_url_ssh "$@")"
}

# shellcheck disable=SC2120
___x_cmd_gitlab_repo_clone_https(){
    param:void
    git clone "$(___x_cmd_gitlab_repo_url_http "$@")"
}

# TODO Not available Gitee return Not Found Project
___x_cmd_gitlab_repo_fork(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    --repo              "Provide owner name and repo name.(default:the current user repo)"   <>:RepoName
    --organization=""   "Provide organization"                                               <>:OrgSpaceName
'
    param:run

    local owner_project
    owner_project="$(___x_cmd_gitlab_param_normalize_repo "$repo")"

    ___x_cmd_gitlab_http post "https://gitee.com/api/repos/${owner_project}/forks" -- organization
}
