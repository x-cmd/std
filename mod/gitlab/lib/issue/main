# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gitlab_issue(){
    param:scope         ___x_cmd_gitlab
    param:subcmd ___x_cmd_gitlab_issue              \
        ls              "issue list"                \
        create          "create issue"              \
        update          "update issue"              \
        rm              "delete issue"
    param:subcmd:try
    param:run

    ___x_cmd_gitlab_issue _param_help_doc
    gitlab_log warn "Subcmd Not Found."
    return 1
}

___x_cmd_gitlab_issue_ls(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
   --assignee_id                           "Return issues assigned to the given user id."                                                                                                                                     <>:Number=""
   --assignee_username                     "Return issues assigned to the given username."                                                                                                                                    <>:array=""
   --author_id                             "Return issues created by the given user id."                                                                                                                                      <>:Number=""
   --author_username                       "Return issues created by the given username."                                                                                                                                     <>=""
   --confidential                          "Filter confidential or public issues."
   --created_after                         "Return issues created on or after the given time. Expected in ISO 8601 format"                                                                                                    <>:datetime=""
   --created_before                        "Return issues created on or before the given time."                                                                                                                               <>:datetime=""
   --due_date                              "Return issues that have no due date,are overdue,or whose due date is this week,this month,or between two weeks ago and next month"                                                <>=""
   --epic_id                               "Return issues associated with the given epic ID."                                                                                                                                 <>:Number=""
   --iids                                  "Return only the issues having the given iid"                                                                                                                                      <>:array=""
   --in                                    "Modify the scope of the search attribute. title, description, or a string joining them with comma. Default is title,description"                                                  <>=""
   --issue_type                            "Filter to a given type of issue. One of issue, incident, or test_case."                                                                                                           <>=""
   --iteration_id                          "Return issues assigned to the given iteration ID."                                                                                                                                <>:Number=""
   --iteration_title                       "Return issues assigned to the iteration with the given title."                                                                                                                    <>=""
   --labels                                "Comma-separated list of label names, issues must have all labels to be returned. "                                                                                                <>=""
   --milestone                             "The milestone title. "                                                                                                                                                            <>=""
   --milestone_id                          "Returns issues assigned to milestones with a given timebox value (None, Any, Upcoming, and Started). "                                                                            <>=""
   --my_reaction_emoji                     "Return issues reacted by the authenticated user by the given emoji. "                                                                                                             <>=""
   --non_archived                          "Return issues only from non-archived projects.If false,the response returns issues from both archived and non-archived projects.Default is true"
   --not                                   "Return issues that do not match the parameters supplied. "                                                                                                                        <>:hash=""
   --order_by                              "Return issues ordered by created_at,due_date,label_priority,milestone_due,popularity,priority,relative_position,title, updated_at,or weight fields.Default is created_at"         <>=""
   --scope                                 "Return issues for the given scope:"                                                                                                                                               <>=""
   --sort                                  "Return issues sorted in asc or desc order. Default is desc"                                                                                                                       <>=""
   --search                                "Search issues against their title and description"                                                                                                                                <>=""
   --state                                 "Return all issues or just those that are opened or closed"                                                                                                                        <>=""
   --updated_after                         "Return issues updated on or after the given time."                                                                                                                                <>:datetime=""
   --updated_before                        "Return issues updated on or before the given time."                                                                                                                               <>:datetime=""
   --weight                                "Return issues with the specified weight."                                                                                                                                         <>:Number=""
   --with_labels_details                   "If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color.Default is false."
'
 param:run

    ___gitlab_ui_mutual  ___x_cmd_gitlab_get_multi  "/issues" sort order_by search state  <<A
        ___ui_table_json Id=.id iid=.iid project_id=.project_id title=.title state=.state web_url=.web_url -- \$@
A
}

# shellcheck disable=SC2154,SC2034
___x_cmd_gitlab_issue_create(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
   --id                                         "The ID or URL-encoded path of the project owned by the authenticated user"              <>
   --title                                      "The title of an issue "                                                                 <>
   --iid                                        "The internal ID of the project issue (requires administrator or project owner rights)"  <>=""
   --created_at                                 "When the issue was created. "                                                           <>=""
   --issue_type                                 "The type of issue. One of issue, incident, or test_case. Default is issue."             <>=""
   --due_date                                   "The due date."                                                                          <>=""
   --description                                "The description of an issue. Limited to 1,048,576 characters."                          <>=""
   --assignee_id                                "The ID of the user to assign the issue to. Only appears on GitLab Free."                <>:Number=""
   --assignee_ids                               "The IDs of the users to assign the issue to."                                           <>:array=""
   --discussion_to_resolve                      "The ID of a discussion to resolve"                                                      <>=""
   --epic_id                                    "ID of the epic to add the issue to. Valid values are greater than or equal to 0."       <>:Number=""
   --epic_iid                                   "IID of the epic to add the issue to. Valid values are greater than or equal to 0. "     <>:Number=""
   --labels                                     "Comma-separated label names for an issue"                                               <>=""
   --merge_request_to_resolve_discussions_of    "The IID of a merge request in which to resolve all issues.  "                           <>:Number=""
   --milestone_id                               "The global ID of a milestone to assign issue. "                                         <>:Number=""
   --weight                                     "The weight of the issue. Valid values are greater than or equal to 0."                  <>:Number=""
   --confidential                               "Set an issue to be confidential. Default is false"
'
    param:run

    local gen_gitlab_json
    gen_gitlab_json="$(param:option2json )"
    ___x_cmd_gitlab_http post "/projects/$id/issues" "$gen_gitlab_json" | \
    {
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true  "Success" "id: $id" "title: $title" "url: $html_url"
            return 0
        else
            ___x_cmd_ui_tf false "Create issue failure"
            return 1
        fi
    }
}

# shellcheck disable=SC2154,SC2034
___x_cmd_gitlab_issue_update(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
   --add_labels         "Comma-separated label names to add to an issue."                                       <>=""
   --assignee_ids       "The IDs of the users to assign the issue to."                                          <>:array=""
   --description        "The description of an issue. Limited to 1,048,576 characters."                         <>=""
   --due_date           "The due date."                                                                         <>=""
   --epic_id            "ID of the epic to add the issue to. Valid values are greater than or equal to 0."      <>:Number=""
   --epic_iid           "IID of the epic to add the issue to. Valid values are greater than or equal to 0. "    <>:Number=""
   --project                 "The ID or URL-encoded path of the project owned by the authenticated user"             <>
   --issue_iid          "The internal ID of a project issue"                                                    <>
   --issue_type         "The type of issue. One of issue, incident, or test_case. Default is issue."            <>=""
   --labels             "Comma-separated label names for an issue"                                              <>=""
   --milestone_id       "The global ID of a milestone to assign issue. "                                        <>:Number=""
   --remove_labels      "Comma-separated label names to remove from an issue. "                                 <>=""
   --state_event        "The state event of an issue. Set close to close the issue and reopen to reopen it "    <>=""
   --title              "The title of an issue "                                                                <>=""
   --updated_at         "When the issue was updated. Date time string, ISO 8601 formatted,"                     <>=""
   --weight             "The weight of the issue. Valid values are greater than or equal to 0."                 <>:Number=""
   --confidential       "Updates an issue to be confidential"
   --discussion_locked  "Flag indicating if the issue discussion is locked If the discussion is locked only project members can add or edit comments."
'
    param:run
    local gen_gitlab_json
    gen_gitlab_json="$(param:option2json)"
    ___x_cmd_gitlab_http put "/projects/$project/issues/$issue_iid" "$gen_gitlab_json" | \
    {
        ___x_cmd_git_json_query_rename iid=.iid state=.state web_url=.web_url title=.title
        if [ -n "$iid" ]; then
            ___x_cmd_ui_tf true  "Success" "iid: $iid" "title: $title" "state: $state" "url: $web_url"
            return 0
        else
            ___x_cmd_ui_tf false "Update issue failure"
            return 1
        fi
    }
}

___x_cmd_gitlab_issue_rm(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
   --project                               "The ID or URL-encoded path of the project owned by the authenticated user."                                                         <>
   --issue_iid                             "The internal ID of a project issue"                                                                                                 <>

'
    param:run
    if ___x_cmd_gitlab_http delete "/projects/$project/issues/$issue_iid" >/dev/null; then
        ___x_cmd_ui_tf true  "Deleted comment successfully"
    else
        ___x_cmd_ui_tf false "Deleting comment failure by ${owner_repo} $id."
        return 1
    fi
}