#! /usr/bin/env sh

. dict
. "${IMPLMENTATION:-dict_str}"
. assert

test_dict_setup(){
    dict_make b
    O=b dict_put 1 a
    O=b dict_put 2 b
    O=b dict_put 3 c
}

test_dict_has(){
    test_dict_setup
    assert_t O=b dict_has 2
    assert_f O=b dict_has 4
}

test_dict_size(){
    test_dict_setup
    assert "$(O=b dict_size)" = 3
}

test_dict_isempty(){
    dict_make b
    assert_t O=b dict_isempty
    O=b dict_put 1 a
    assert_f O=b dict_isempty
}

testdict_pget(){
    test_dict_setup
    assert "$(O=b dict_get 2)" = b
}

testdict_pscope(){
    dict_make b
    O=b dict_put el user edwinjhlee
    O=b dict_put lt user lteam
    O=b dict_put el password goforit
    O=b dict_put lt password 2008
    assert_stdout "O=b dict_scope el | dict_print" <<A
user=edwinjhlee
password=goforit
A
    assert_stdout "O=b dict_scope lt | dict_json" <<A
{
  "user": "lteam",
  "password": "2008"
}
A

}

testdict_pdrop(){
    test_dict_setup
    assert_f O=b dict_drop 4
    assert_t O=b dict_has 2
    O=b dict_drop 2
    assert_f O=b dict_has 2
}

testdict_pdropr(){
    test_dict_setup
    assert_t O=b dict_dropr "[1-3]+"
    assert_f O=b dict_has 1
    assert_f O=b dict_has 3
}

cat "$0" | awk '$0~/^test_[^\(]+\(\)/{ gsub(/\(\){/, "", $0); print $0 }' | while read -r line; do
    if ! eval "$line"; then
        echo "fail at function: $line" >&2
        break
    fi
done

